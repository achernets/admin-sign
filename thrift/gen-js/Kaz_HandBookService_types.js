//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


HandBook = class {
  constructor(args) {
    this.id = null;
    this.hBookName = null;
    this.guiId = null;
    this.fixed = null;
    this.accountIds = null;
    this.columns = null;
    this.hbContentAdmins = null;
    this.allowEdit = null;
    this.thriftURL = null;
    this.copyValue = null;
    this.transportType = null;
    this.protocolType = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.hBookName !== undefined && args.hBookName !== null) {
        this.hBookName = args.hBookName;
      }
      if (args.guiId !== undefined && args.guiId !== null) {
        this.guiId = args.guiId;
      }
      if (args.fixed !== undefined && args.fixed !== null) {
        this.fixed = args.fixed;
      }
      if (args.accountIds !== undefined && args.accountIds !== null) {
        this.accountIds = Thrift.copyList(args.accountIds, [null]);
      }
      if (args.columns !== undefined && args.columns !== null) {
        this.columns = Thrift.copyList(args.columns, [HBColumn]);
      }
      if (args.hbContentAdmins !== undefined && args.hbContentAdmins !== null) {
        this.hbContentAdmins = Thrift.copyList(args.hbContentAdmins, [UserOrGroup]);
      }
      if (args.allowEdit !== undefined && args.allowEdit !== null) {
        this.allowEdit = args.allowEdit;
      }
      if (args.thriftURL !== undefined && args.thriftURL !== null) {
        this.thriftURL = args.thriftURL;
      }
      if (args.copyValue !== undefined && args.copyValue !== null) {
        this.copyValue = args.copyValue;
      }
      if (args.transportType !== undefined && args.transportType !== null) {
        this.transportType = args.transportType;
      }
      if (args.protocolType !== undefined && args.protocolType !== null) {
        this.protocolType = args.protocolType;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.hBookName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.guiId = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.fixed = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.SET) {
          this.accountIds = [];
          const _rtmp31 = input.readSetBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = input.readString().value;
            this.accountIds.push(elem3);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.columns = [];
          const _rtmp35 = input.readListBegin();
          const _size4 = _rtmp35.size || 0;
          for (let _i6 = 0; _i6 < _size4; ++_i6) {
            let elem7 = null;
            elem7 = new HBColumn();
            elem7.read(input);
            this.columns.push(elem7);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.LIST) {
          this.hbContentAdmins = [];
          const _rtmp39 = input.readListBegin();
          const _size8 = _rtmp39.size || 0;
          for (let _i10 = 0; _i10 < _size8; ++_i10) {
            let elem11 = null;
            elem11 = new UserOrGroup();
            elem11.read(input);
            this.hbContentAdmins.push(elem11);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.allowEdit = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.thriftURL = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.BOOL) {
          this.copyValue = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.transportType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.protocolType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBook');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.hBookName !== null && this.hBookName !== undefined) {
      output.writeFieldBegin('hBookName', Thrift.Type.STRING, 2);
      output.writeString(this.hBookName);
      output.writeFieldEnd();
    }
    if (this.guiId !== null && this.guiId !== undefined) {
      output.writeFieldBegin('guiId', Thrift.Type.I64, 3);
      output.writeI64(this.guiId);
      output.writeFieldEnd();
    }
    if (this.fixed !== null && this.fixed !== undefined) {
      output.writeFieldBegin('fixed', Thrift.Type.BOOL, 4);
      output.writeBool(this.fixed);
      output.writeFieldEnd();
    }
    if (this.accountIds !== null && this.accountIds !== undefined) {
      output.writeFieldBegin('accountIds', Thrift.Type.SET, 5);
      output.writeSetBegin(Thrift.Type.STRING, this.accountIds.length);
      for (let iter12 in this.accountIds) {
        if (this.accountIds.hasOwnProperty(iter12)) {
          iter12 = this.accountIds[iter12];
          output.writeString(iter12);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.columns !== null && this.columns !== undefined) {
      output.writeFieldBegin('columns', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
      for (let iter13 in this.columns) {
        if (this.columns.hasOwnProperty(iter13)) {
          iter13 = this.columns[iter13];
          iter13.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.hbContentAdmins !== null && this.hbContentAdmins !== undefined) {
      output.writeFieldBegin('hbContentAdmins', Thrift.Type.LIST, 7);
      output.writeListBegin(Thrift.Type.STRUCT, this.hbContentAdmins.length);
      for (let iter14 in this.hbContentAdmins) {
        if (this.hbContentAdmins.hasOwnProperty(iter14)) {
          iter14 = this.hbContentAdmins[iter14];
          iter14.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.allowEdit !== null && this.allowEdit !== undefined) {
      output.writeFieldBegin('allowEdit', Thrift.Type.BOOL, 8);
      output.writeBool(this.allowEdit);
      output.writeFieldEnd();
    }
    if (this.thriftURL !== null && this.thriftURL !== undefined) {
      output.writeFieldBegin('thriftURL', Thrift.Type.STRING, 9);
      output.writeString(this.thriftURL);
      output.writeFieldEnd();
    }
    if (this.copyValue !== null && this.copyValue !== undefined) {
      output.writeFieldBegin('copyValue', Thrift.Type.BOOL, 10);
      output.writeBool(this.copyValue);
      output.writeFieldEnd();
    }
    if (this.transportType !== null && this.transportType !== undefined) {
      output.writeFieldBegin('transportType', Thrift.Type.I32, 11);
      output.writeI32(this.transportType);
      output.writeFieldEnd();
    }
    if (this.protocolType !== null && this.protocolType !== undefined) {
      output.writeFieldBegin('protocolType', Thrift.Type.I32, 12);
      output.writeI32(this.protocolType);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
