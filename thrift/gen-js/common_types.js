//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


UserOrGroupType = {
  'USER' : 0,
  'GROUP' : 1,
  'USER_GUEST' : 2,
  'PROCESS_ROLE' : 3
};
GroupSelector = {
  'ALL' : 0,
  'MAX_FREE' : 1,
  'LAST_EXEC' : 2,
  'ANY' : 3
};
UserType = {
  'CHIEF' : 0,
  'DEPUTY' : 1,
  'EMPLOYEE' : 2,
  'TECHNICAL' : 3
};
AttachmentStatus = {
  'CREATED' : 0,
  'LOADED' : 1,
  'PUBLISHED' : 2,
  'REBUILD' : 3,
  'PROCESSED' : 4,
  'FAIL' : 5,
  'PROCESSING' : 6
};
FileType = {
  'PICTURE' : 0,
  'PDF' : 1,
  'OFFICE' : 2,
  'OTHER' : 3
};
AttachmentEditMode = {
  'SINGLE' : 0,
  'MULTIPLE' : 1,
  'PUBLISHED' : 2
};
SignProviderType = {
  'UA_SIGN' : 0,
  'KAZ_SIGN' : 1
};
DecisionType = {
  'NULL' : 0,
  'YES' : 1,
  'NO' : 2,
  'OTHER_TIME' : 3
};
RemoveActionType = {
  'IGNORE' : 0,
  'CASCADE' : 1
};
UserOrGroup = class {
  constructor(args) {
    this.type = null;
    this.userOrGroupId = null;
    this.nameGroup = null;
    this.descriptionGroup = null;
    this.userFirstName = null;
    this.userLastName = null;
    this.userMiddleName = null;
    this.attrs = null;
    this.deleteDate = null;
    this.avatarUrl = null;
    this.groupSelector = null;
    this.position = null;
    this.userCount = null;
    this.email = null;
    this.workPhone = null;
    this.haveAccess = null;
    this.scMask = null;
    this.employeeNumber = null;
    this.departments = null;
    this.fixed = null;
    this.endlessPassword = null;
    this.needChangePassword = null;
    this.accountIdGroup = null;
    this.userType = null;
    this.id = null;
    this.ldapId = null;
    this.company = null;
    this.mobilePhone = null;
    this.favorite = null;
    this.remark = null;
    this.fixedExec = null;
    this.chiefId = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.userOrGroupId !== undefined && args.userOrGroupId !== null) {
        this.userOrGroupId = args.userOrGroupId;
      }
      if (args.nameGroup !== undefined && args.nameGroup !== null) {
        this.nameGroup = args.nameGroup;
      }
      if (args.descriptionGroup !== undefined && args.descriptionGroup !== null) {
        this.descriptionGroup = args.descriptionGroup;
      }
      if (args.userFirstName !== undefined && args.userFirstName !== null) {
        this.userFirstName = args.userFirstName;
      }
      if (args.userLastName !== undefined && args.userLastName !== null) {
        this.userLastName = args.userLastName;
      }
      if (args.userMiddleName !== undefined && args.userMiddleName !== null) {
        this.userMiddleName = args.userMiddleName;
      }
      if (args.attrs !== undefined && args.attrs !== null) {
        this.attrs = Thrift.copyMap(args.attrs, [null]);
      }
      if (args.deleteDate !== undefined && args.deleteDate !== null) {
        this.deleteDate = args.deleteDate;
      }
      if (args.avatarUrl !== undefined && args.avatarUrl !== null) {
        this.avatarUrl = args.avatarUrl;
      }
      if (args.groupSelector !== undefined && args.groupSelector !== null) {
        this.groupSelector = args.groupSelector;
      }
      if (args.position !== undefined && args.position !== null) {
        this.position = args.position;
      }
      if (args.userCount !== undefined && args.userCount !== null) {
        this.userCount = args.userCount;
      }
      if (args.email !== undefined && args.email !== null) {
        this.email = args.email;
      }
      if (args.workPhone !== undefined && args.workPhone !== null) {
        this.workPhone = args.workPhone;
      }
      if (args.haveAccess !== undefined && args.haveAccess !== null) {
        this.haveAccess = args.haveAccess;
      }
      if (args.scMask !== undefined && args.scMask !== null) {
        this.scMask = args.scMask;
      }
      if (args.employeeNumber !== undefined && args.employeeNumber !== null) {
        this.employeeNumber = args.employeeNumber;
      }
      if (args.departments !== undefined && args.departments !== null) {
        this.departments = Thrift.copyList(args.departments, [null]);
      }
      if (args.fixed !== undefined && args.fixed !== null) {
        this.fixed = args.fixed;
      }
      if (args.endlessPassword !== undefined && args.endlessPassword !== null) {
        this.endlessPassword = args.endlessPassword;
      }
      if (args.needChangePassword !== undefined && args.needChangePassword !== null) {
        this.needChangePassword = args.needChangePassword;
      }
      if (args.accountIdGroup !== undefined && args.accountIdGroup !== null) {
        this.accountIdGroup = args.accountIdGroup;
      }
      if (args.userType !== undefined && args.userType !== null) {
        this.userType = args.userType;
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.ldapId !== undefined && args.ldapId !== null) {
        this.ldapId = args.ldapId;
      }
      if (args.company !== undefined && args.company !== null) {
        this.company = args.company;
      }
      if (args.mobilePhone !== undefined && args.mobilePhone !== null) {
        this.mobilePhone = args.mobilePhone;
      }
      if (args.favorite !== undefined && args.favorite !== null) {
        this.favorite = args.favorite;
      }
      if (args.remark !== undefined && args.remark !== null) {
        this.remark = args.remark;
      }
      if (args.fixedExec !== undefined && args.fixedExec !== null) {
        this.fixedExec = args.fixedExec;
      }
      if (args.chiefId !== undefined && args.chiefId !== null) {
        this.chiefId = args.chiefId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userOrGroupId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.nameGroup = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.descriptionGroup = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.userFirstName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.userLastName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.userMiddleName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.MAP) {
          this.attrs = {};
          const _rtmp31 = input.readMapBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            if (_i2 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key3 = null;
            let val4 = null;
            key3 = input.readString().value;
            val4 = input.readString().value;
            this.attrs[key3] = val4;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I64) {
          this.deleteDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.avatarUrl = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.groupSelector = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.position = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I32) {
          this.userCount = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.email = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.workPhone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.BOOL) {
          this.haveAccess = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRING) {
          this.scMask = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.STRING) {
          this.employeeNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.LIST) {
          this.departments = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = new Department();
            elem8.read(input);
            this.departments.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.BOOL) {
          this.fixed = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.BOOL) {
          this.endlessPassword = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.BOOL) {
          this.needChangePassword = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.STRING) {
          this.accountIdGroup = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.I32) {
          this.userType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.STRING) {
          this.ldapId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.STRING) {
          this.company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.STRING) {
          this.mobilePhone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 29:
        if (ftype == Thrift.Type.BOOL) {
          this.favorite = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 30:
        if (ftype == Thrift.Type.STRING) {
          this.remark = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.BOOL) {
          this.fixedExec = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.STRING) {
          this.chiefId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('UserOrGroup');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.userOrGroupId !== null && this.userOrGroupId !== undefined) {
      output.writeFieldBegin('userOrGroupId', Thrift.Type.STRING, 2);
      output.writeString(this.userOrGroupId);
      output.writeFieldEnd();
    }
    if (this.nameGroup !== null && this.nameGroup !== undefined) {
      output.writeFieldBegin('nameGroup', Thrift.Type.STRING, 3);
      output.writeString(this.nameGroup);
      output.writeFieldEnd();
    }
    if (this.descriptionGroup !== null && this.descriptionGroup !== undefined) {
      output.writeFieldBegin('descriptionGroup', Thrift.Type.STRING, 4);
      output.writeString(this.descriptionGroup);
      output.writeFieldEnd();
    }
    if (this.userFirstName !== null && this.userFirstName !== undefined) {
      output.writeFieldBegin('userFirstName', Thrift.Type.STRING, 5);
      output.writeString(this.userFirstName);
      output.writeFieldEnd();
    }
    if (this.userLastName !== null && this.userLastName !== undefined) {
      output.writeFieldBegin('userLastName', Thrift.Type.STRING, 6);
      output.writeString(this.userLastName);
      output.writeFieldEnd();
    }
    if (this.userMiddleName !== null && this.userMiddleName !== undefined) {
      output.writeFieldBegin('userMiddleName', Thrift.Type.STRING, 7);
      output.writeString(this.userMiddleName);
      output.writeFieldEnd();
    }
    if (this.attrs !== null && this.attrs !== undefined) {
      output.writeFieldBegin('attrs', Thrift.Type.MAP, 8);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attrs));
      for (let kiter9 in this.attrs) {
        if (this.attrs.hasOwnProperty(kiter9)) {
          let viter10 = this.attrs[kiter9];
          output.writeString(kiter9);
          output.writeString(viter10);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.deleteDate !== null && this.deleteDate !== undefined) {
      output.writeFieldBegin('deleteDate', Thrift.Type.I64, 9);
      output.writeI64(this.deleteDate);
      output.writeFieldEnd();
    }
    if (this.avatarUrl !== null && this.avatarUrl !== undefined) {
      output.writeFieldBegin('avatarUrl', Thrift.Type.STRING, 10);
      output.writeString(this.avatarUrl);
      output.writeFieldEnd();
    }
    if (this.groupSelector !== null && this.groupSelector !== undefined) {
      output.writeFieldBegin('groupSelector', Thrift.Type.I32, 11);
      output.writeI32(this.groupSelector);
      output.writeFieldEnd();
    }
    if (this.position !== null && this.position !== undefined) {
      output.writeFieldBegin('position', Thrift.Type.STRING, 12);
      output.writeString(this.position);
      output.writeFieldEnd();
    }
    if (this.userCount !== null && this.userCount !== undefined) {
      output.writeFieldBegin('userCount', Thrift.Type.I32, 13);
      output.writeI32(this.userCount);
      output.writeFieldEnd();
    }
    if (this.email !== null && this.email !== undefined) {
      output.writeFieldBegin('email', Thrift.Type.STRING, 14);
      output.writeString(this.email);
      output.writeFieldEnd();
    }
    if (this.workPhone !== null && this.workPhone !== undefined) {
      output.writeFieldBegin('workPhone', Thrift.Type.STRING, 15);
      output.writeString(this.workPhone);
      output.writeFieldEnd();
    }
    if (this.haveAccess !== null && this.haveAccess !== undefined) {
      output.writeFieldBegin('haveAccess', Thrift.Type.BOOL, 16);
      output.writeBool(this.haveAccess);
      output.writeFieldEnd();
    }
    if (this.scMask !== null && this.scMask !== undefined) {
      output.writeFieldBegin('scMask', Thrift.Type.STRING, 17);
      output.writeString(this.scMask);
      output.writeFieldEnd();
    }
    if (this.employeeNumber !== null && this.employeeNumber !== undefined) {
      output.writeFieldBegin('employeeNumber', Thrift.Type.STRING, 18);
      output.writeString(this.employeeNumber);
      output.writeFieldEnd();
    }
    if (this.departments !== null && this.departments !== undefined) {
      output.writeFieldBegin('departments', Thrift.Type.LIST, 19);
      output.writeListBegin(Thrift.Type.STRUCT, this.departments.length);
      for (let iter11 in this.departments) {
        if (this.departments.hasOwnProperty(iter11)) {
          iter11 = this.departments[iter11];
          iter11.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.fixed !== null && this.fixed !== undefined) {
      output.writeFieldBegin('fixed', Thrift.Type.BOOL, 20);
      output.writeBool(this.fixed);
      output.writeFieldEnd();
    }
    if (this.endlessPassword !== null && this.endlessPassword !== undefined) {
      output.writeFieldBegin('endlessPassword', Thrift.Type.BOOL, 21);
      output.writeBool(this.endlessPassword);
      output.writeFieldEnd();
    }
    if (this.needChangePassword !== null && this.needChangePassword !== undefined) {
      output.writeFieldBegin('needChangePassword', Thrift.Type.BOOL, 22);
      output.writeBool(this.needChangePassword);
      output.writeFieldEnd();
    }
    if (this.accountIdGroup !== null && this.accountIdGroup !== undefined) {
      output.writeFieldBegin('accountIdGroup', Thrift.Type.STRING, 23);
      output.writeString(this.accountIdGroup);
      output.writeFieldEnd();
    }
    if (this.userType !== null && this.userType !== undefined) {
      output.writeFieldBegin('userType', Thrift.Type.I32, 24);
      output.writeI32(this.userType);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 25);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.ldapId !== null && this.ldapId !== undefined) {
      output.writeFieldBegin('ldapId', Thrift.Type.STRING, 26);
      output.writeString(this.ldapId);
      output.writeFieldEnd();
    }
    if (this.company !== null && this.company !== undefined) {
      output.writeFieldBegin('company', Thrift.Type.STRING, 27);
      output.writeString(this.company);
      output.writeFieldEnd();
    }
    if (this.mobilePhone !== null && this.mobilePhone !== undefined) {
      output.writeFieldBegin('mobilePhone', Thrift.Type.STRING, 28);
      output.writeString(this.mobilePhone);
      output.writeFieldEnd();
    }
    if (this.favorite !== null && this.favorite !== undefined) {
      output.writeFieldBegin('favorite', Thrift.Type.BOOL, 29);
      output.writeBool(this.favorite);
      output.writeFieldEnd();
    }
    if (this.remark !== null && this.remark !== undefined) {
      output.writeFieldBegin('remark', Thrift.Type.STRING, 30);
      output.writeString(this.remark);
      output.writeFieldEnd();
    }
    if (this.fixedExec !== null && this.fixedExec !== undefined) {
      output.writeFieldBegin('fixedExec', Thrift.Type.BOOL, 31);
      output.writeBool(this.fixedExec);
      output.writeFieldEnd();
    }
    if (this.chiefId !== null && this.chiefId !== undefined) {
      output.writeFieldBegin('chiefId', Thrift.Type.STRING, 32);
      output.writeString(this.chiefId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
OrgStructure = class {
  constructor(args) {
    this.id = null;
    this.accountGroupId = null;
    this.name = null;
    this.order = null;
    this.main = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.accountGroupId !== undefined && args.accountGroupId !== null) {
        this.accountGroupId = args.accountGroupId;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.order !== undefined && args.order !== null) {
        this.order = args.order;
      }
      if (args.main !== undefined && args.main !== null) {
        this.main = args.main;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.accountGroupId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.order = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.main = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('OrgStructure');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.accountGroupId !== null && this.accountGroupId !== undefined) {
      output.writeFieldBegin('accountGroupId', Thrift.Type.STRING, 2);
      output.writeString(this.accountGroupId);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 3);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.order !== null && this.order !== undefined) {
      output.writeFieldBegin('order', Thrift.Type.I32, 4);
      output.writeI32(this.order);
      output.writeFieldEnd();
    }
    if (this.main !== null && this.main !== undefined) {
      output.writeFieldBegin('main', Thrift.Type.BOOL, 5);
      output.writeBool(this.main);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Department = class {
  constructor(args) {
    this.id = null;
    this.parentId = null;
    this.name = null;
    this.orgStructureCode = null;
    this.orgStructureId = null;
    this.userCount = null;
    this.path = null;
    this.main = null;
    this.order = null;
    this.rank = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.parentId !== undefined && args.parentId !== null) {
        this.parentId = args.parentId;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.orgStructureCode !== undefined && args.orgStructureCode !== null) {
        this.orgStructureCode = args.orgStructureCode;
      }
      if (args.orgStructureId !== undefined && args.orgStructureId !== null) {
        this.orgStructureId = args.orgStructureId;
      }
      if (args.userCount !== undefined && args.userCount !== null) {
        this.userCount = args.userCount;
      }
      if (args.path !== undefined && args.path !== null) {
        this.path = args.path;
      }
      if (args.main !== undefined && args.main !== null) {
        this.main = args.main;
      }
      if (args.order !== undefined && args.order !== null) {
        this.order = args.order;
      }
      if (args.rank !== undefined && args.rank !== null) {
        this.rank = args.rank;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.parentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.orgStructureCode = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.orgStructureId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.userCount = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.path = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.main = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.order = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.rank = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Department');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.parentId !== null && this.parentId !== undefined) {
      output.writeFieldBegin('parentId', Thrift.Type.STRING, 2);
      output.writeString(this.parentId);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 3);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.orgStructureCode !== null && this.orgStructureCode !== undefined) {
      output.writeFieldBegin('orgStructureCode', Thrift.Type.STRING, 4);
      output.writeString(this.orgStructureCode);
      output.writeFieldEnd();
    }
    if (this.orgStructureId !== null && this.orgStructureId !== undefined) {
      output.writeFieldBegin('orgStructureId', Thrift.Type.STRING, 5);
      output.writeString(this.orgStructureId);
      output.writeFieldEnd();
    }
    if (this.userCount !== null && this.userCount !== undefined) {
      output.writeFieldBegin('userCount', Thrift.Type.I64, 6);
      output.writeI64(this.userCount);
      output.writeFieldEnd();
    }
    if (this.path !== null && this.path !== undefined) {
      output.writeFieldBegin('path', Thrift.Type.STRING, 7);
      output.writeString(this.path);
      output.writeFieldEnd();
    }
    if (this.main !== null && this.main !== undefined) {
      output.writeFieldBegin('main', Thrift.Type.BOOL, 8);
      output.writeBool(this.main);
      output.writeFieldEnd();
    }
    if (this.order !== null && this.order !== undefined) {
      output.writeFieldBegin('order', Thrift.Type.I32, 9);
      output.writeI32(this.order);
      output.writeFieldEnd();
    }
    if (this.rank !== null && this.rank !== undefined) {
      output.writeFieldBegin('rank', Thrift.Type.I32, 10);
      output.writeI32(this.rank);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
CompositeId = class {
  constructor(args) {
    this.id = null;
    this.version = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.version !== undefined && args.version !== null) {
        this.version = args.version;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.version = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CompositeId');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.version !== null && this.version !== undefined) {
      output.writeFieldBegin('version', Thrift.Type.I32, 2);
      output.writeI32(this.version);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
