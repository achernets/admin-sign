//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


ServerException = class {
  constructor(args) {
    this.serverExceptionKey = null;
    if (args) {
      if (args.serverExceptionKey !== undefined && args.serverExceptionKey !== null) {
        this.serverExceptionKey = args.serverExceptionKey;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.serverExceptionKey = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ServerException');
    if (this.serverExceptionKey !== null && this.serverExceptionKey !== undefined) {
      output.writeFieldBegin('serverExceptionKey', Thrift.Type.STRING, 1);
      output.writeString(this.serverExceptionKey);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
PreconditionException = class {
  constructor(args) {
    this.preconditionExceptionKey = null;
    this.params = null;
    this.message = null;
    this.verWarnining = null;
    if (args) {
      if (args.preconditionExceptionKey !== undefined && args.preconditionExceptionKey !== null) {
        this.preconditionExceptionKey = args.preconditionExceptionKey;
      }
      if (args.params !== undefined && args.params !== null) {
        this.params = Thrift.copyList(args.params, [null]);
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
      if (args.verWarnining !== undefined && args.verWarnining !== null) {
        this.verWarnining = args.verWarnining;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.preconditionExceptionKey = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.params = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = input.readString().value;
            this.params.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.verWarnining = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PreconditionException');
    if (this.preconditionExceptionKey !== null && this.preconditionExceptionKey !== undefined) {
      output.writeFieldBegin('preconditionExceptionKey', Thrift.Type.STRING, 1);
      output.writeString(this.preconditionExceptionKey);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.params.length);
      for (let iter4 in this.params) {
        if (this.params.hasOwnProperty(iter4)) {
          iter4 = this.params[iter4];
          output.writeString(iter4);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 3);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    if (this.verWarnining !== null && this.verWarnining !== undefined) {
      output.writeFieldBegin('verWarnining', Thrift.Type.BOOL, 4);
      output.writeBool(this.verWarnining);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
