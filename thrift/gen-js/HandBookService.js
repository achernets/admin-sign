//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

HandBookService_getAllHandBooks_args = class {
  constructor(args) {
    this.token = null;
    this.filter = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.filter !== undefined && args.filter !== null) {
        this.filter = new KazFilter(args.filter);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.filter = new KazFilter();
          this.filter.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getAllHandBooks_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.filter !== null && this.filter !== undefined) {
      output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
      this.filter.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getAllHandBooks_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [HandBook]);
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp316 = input.readListBegin();
          const _size15 = _rtmp316.size || 0;
          for (let _i17 = 0; _i17 < _size15; ++_i17) {
            let elem18 = null;
            elem18 = new HandBook();
            elem18.read(input);
            this.success.push(elem18);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getAllHandBooks_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter19 in this.success) {
        if (this.success.hasOwnProperty(iter19)) {
          iter19 = this.success[iter19];
          iter19.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getCountAllHandBooks_args = class {
  constructor(args) {
    this.token = null;
    this.filter = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.filter !== undefined && args.filter !== null) {
        this.filter = new KazFilter(args.filter);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.filter = new KazFilter();
          this.filter.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getCountAllHandBooks_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.filter !== null && this.filter !== undefined) {
      output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
      this.filter.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getCountAllHandBooks_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I32) {
          this.success = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getCountAllHandBooks_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I32, 0);
      output.writeI32(this.success);
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getHandBookById_args = class {
  constructor(args) {
    this.token = null;
    this.id = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getHandBookById_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 2);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getHandBookById_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new HandBook(args.success);
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new HandBook();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getHandBookById_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_createOrUpdateHandBook_args = class {
  constructor(args) {
    this.token = null;
    this.handBook = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.handBook !== undefined && args.handBook !== null) {
        this.handBook = new HandBook(args.handBook);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.handBook = new HandBook();
          this.handBook.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_createOrUpdateHandBook_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.handBook !== null && this.handBook !== undefined) {
      output.writeFieldBegin('handBook', Thrift.Type.STRUCT, 2);
      this.handBook.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_createOrUpdateHandBook_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new HandBook(args.success);
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new HandBook();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_createOrUpdateHandBook_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_createOrUpdateHBRows_args = class {
  constructor(args) {
    this.token = null;
    this.hbId = null;
    this.rows = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.hbId !== undefined && args.hbId !== null) {
        this.hbId = args.hbId;
      }
      if (args.rows !== undefined && args.rows !== null) {
        this.rows = Thrift.copyList(args.rows, [HBRow]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.hbId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.rows = [];
          const _rtmp321 = input.readListBegin();
          const _size20 = _rtmp321.size || 0;
          for (let _i22 = 0; _i22 < _size20; ++_i22) {
            let elem23 = null;
            elem23 = new HBRow();
            elem23.read(input);
            this.rows.push(elem23);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_createOrUpdateHBRows_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.hbId !== null && this.hbId !== undefined) {
      output.writeFieldBegin('hbId', Thrift.Type.STRING, 2);
      output.writeString(this.hbId);
      output.writeFieldEnd();
    }
    if (this.rows !== null && this.rows !== undefined) {
      output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
      for (let iter24 in this.rows) {
        if (this.rows.hasOwnProperty(iter24)) {
          iter24 = this.rows[iter24];
          iter24.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_createOrUpdateHBRows_result = class {
  constructor(args) {
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_createOrUpdateHBRows_result');
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getAllHandBookRows_args = class {
  constructor(args) {
    this.token = null;
    this.hbId = null;
    this.filter = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.hbId !== undefined && args.hbId !== null) {
        this.hbId = args.hbId;
      }
      if (args.filter !== undefined && args.filter !== null) {
        this.filter = new KazFilter(args.filter);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.hbId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.filter = new KazFilter();
          this.filter.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getAllHandBookRows_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.hbId !== null && this.hbId !== undefined) {
      output.writeFieldBegin('hbId', Thrift.Type.STRING, 2);
      output.writeString(this.hbId);
      output.writeFieldEnd();
    }
    if (this.filter !== null && this.filter !== undefined) {
      output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
      this.filter.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getAllHandBookRows_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [HBRow]);
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp326 = input.readListBegin();
          const _size25 = _rtmp326.size || 0;
          for (let _i27 = 0; _i27 < _size25; ++_i27) {
            let elem28 = null;
            elem28 = new HBRow();
            elem28.read(input);
            this.success.push(elem28);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getAllHandBookRows_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter29 in this.success) {
        if (this.success.hasOwnProperty(iter29)) {
          iter29 = this.success[iter29];
          iter29.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getAllHandBookRowsCount_args = class {
  constructor(args) {
    this.token = null;
    this.hbId = null;
    this.filter = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.hbId !== undefined && args.hbId !== null) {
        this.hbId = args.hbId;
      }
      if (args.filter !== undefined && args.filter !== null) {
        this.filter = new KazFilter(args.filter);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.hbId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.filter = new KazFilter();
          this.filter.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getAllHandBookRowsCount_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.hbId !== null && this.hbId !== undefined) {
      output.writeFieldBegin('hbId', Thrift.Type.STRING, 2);
      output.writeString(this.hbId);
      output.writeFieldEnd();
    }
    if (this.filter !== null && this.filter !== undefined) {
      output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
      this.filter.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getAllHandBookRowsCount_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getAllHandBookRowsCount_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getHandBookValues_args = class {
  constructor(args) {
    this.token = null;
    this.filter = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.filter !== undefined && args.filter !== null) {
        this.filter = new KazFilter(args.filter);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.filter = new KazFilter();
          this.filter.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getHandBookValues_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.filter !== null && this.filter !== undefined) {
      output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
      this.filter.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_getHandBookValues_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [HBValue]);
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp331 = input.readListBegin();
          const _size30 = _rtmp331.size || 0;
          for (let _i32 = 0; _i32 < _size30; ++_i32) {
            let elem33 = null;
            elem33 = new HBValue();
            elem33.read(input);
            this.success.push(elem33);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_getHandBookValues_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter34 in this.success) {
        if (this.success.hasOwnProperty(iter34)) {
          iter34 = this.success[iter34];
          iter34.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_removeHandBook_args = class {
  constructor(args) {
    this.token = null;
    this.hbId = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.hbId !== undefined && args.hbId !== null) {
        this.hbId = args.hbId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.hbId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_removeHandBook_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.hbId !== null && this.hbId !== undefined) {
      output.writeFieldBegin('hbId', Thrift.Type.STRING, 2);
      output.writeString(this.hbId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_removeHandBook_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_removeHandBook_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_removeHandBookRow_args = class {
  constructor(args) {
    this.token = null;
    this.hbId = null;
    this.rowId = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.hbId !== undefined && args.hbId !== null) {
        this.hbId = args.hbId;
      }
      if (args.rowId !== undefined && args.rowId !== null) {
        this.rowId = args.rowId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.hbId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.rowId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_removeHandBookRow_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.hbId !== null && this.hbId !== undefined) {
      output.writeFieldBegin('hbId', Thrift.Type.STRING, 2);
      output.writeString(this.hbId);
      output.writeFieldEnd();
    }
    if (this.rowId !== null && this.rowId !== undefined) {
      output.writeFieldBegin('rowId', Thrift.Type.STRING, 3);
      output.writeString(this.rowId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookService_removeHandBookRow_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HandBookService_removeHandBookRow_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HandBookServiceClient = class {
  constructor(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
  }

  getAllHandBooks (token, filter) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getAllHandBooks(token, filter, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getAllHandBooks (token, filter, callback) {
    const params = {
      token: token,
      filter: filter
    };
    const args = new HandBookService_getAllHandBooks_args(params);
    try {
      this.output.writeMessageBegin('getAllHandBooks', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getAllHandBooks();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getAllHandBooks () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new HandBookService_getAllHandBooks_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getAllHandBooks failed: unknown result';
  }

  getCountAllHandBooks (token, filter) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getCountAllHandBooks(token, filter, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getCountAllHandBooks (token, filter, callback) {
    const params = {
      token: token,
      filter: filter
    };
    const args = new HandBookService_getCountAllHandBooks_args(params);
    try {
      this.output.writeMessageBegin('getCountAllHandBooks', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getCountAllHandBooks();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getCountAllHandBooks () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new HandBookService_getCountAllHandBooks_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getCountAllHandBooks failed: unknown result';
  }

  getHandBookById (token, id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getHandBookById(token, id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getHandBookById (token, id, callback) {
    const params = {
      token: token,
      id: id
    };
    const args = new HandBookService_getHandBookById_args(params);
    try {
      this.output.writeMessageBegin('getHandBookById', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getHandBookById();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getHandBookById () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new HandBookService_getHandBookById_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getHandBookById failed: unknown result';
  }

  createOrUpdateHandBook (token, handBook) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_createOrUpdateHandBook(token, handBook, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_createOrUpdateHandBook (token, handBook, callback) {
    const params = {
      token: token,
      handBook: handBook
    };
    const args = new HandBookService_createOrUpdateHandBook_args(params);
    try {
      this.output.writeMessageBegin('createOrUpdateHandBook', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_createOrUpdateHandBook();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_createOrUpdateHandBook () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new HandBookService_createOrUpdateHandBook_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'createOrUpdateHandBook failed: unknown result';
  }

  createOrUpdateHBRows (token, hbId, rows) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_createOrUpdateHBRows(token, hbId, rows, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_createOrUpdateHBRows (token, hbId, rows, callback) {
    const params = {
      token: token,
      hbId: hbId,
      rows: rows
    };
    const args = new HandBookService_createOrUpdateHBRows_args(params);
    try {
      this.output.writeMessageBegin('createOrUpdateHBRows', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_createOrUpdateHBRows();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_createOrUpdateHBRows () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new HandBookService_createOrUpdateHBRows_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    return;
  }

  getAllHandBookRows (token, hbId, filter) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getAllHandBookRows(token, hbId, filter, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getAllHandBookRows (token, hbId, filter, callback) {
    const params = {
      token: token,
      hbId: hbId,
      filter: filter
    };
    const args = new HandBookService_getAllHandBookRows_args(params);
    try {
      this.output.writeMessageBegin('getAllHandBookRows', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getAllHandBookRows();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getAllHandBookRows () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new HandBookService_getAllHandBookRows_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getAllHandBookRows failed: unknown result';
  }

  getAllHandBookRowsCount (token, hbId, filter) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getAllHandBookRowsCount(token, hbId, filter, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getAllHandBookRowsCount (token, hbId, filter, callback) {
    const params = {
      token: token,
      hbId: hbId,
      filter: filter
    };
    const args = new HandBookService_getAllHandBookRowsCount_args(params);
    try {
      this.output.writeMessageBegin('getAllHandBookRowsCount', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getAllHandBookRowsCount();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getAllHandBookRowsCount () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new HandBookService_getAllHandBookRowsCount_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getAllHandBookRowsCount failed: unknown result';
  }

  getHandBookValues (token, filter) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getHandBookValues(token, filter, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getHandBookValues (token, filter, callback) {
    const params = {
      token: token,
      filter: filter
    };
    const args = new HandBookService_getHandBookValues_args(params);
    try {
      this.output.writeMessageBegin('getHandBookValues', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getHandBookValues();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getHandBookValues () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new HandBookService_getHandBookValues_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getHandBookValues failed: unknown result';
  }

  removeHandBook (token, hbId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_removeHandBook(token, hbId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_removeHandBook (token, hbId, callback) {
    const params = {
      token: token,
      hbId: hbId
    };
    const args = new HandBookService_removeHandBook_args(params);
    try {
      this.output.writeMessageBegin('removeHandBook', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_removeHandBook();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_removeHandBook () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new HandBookService_removeHandBook_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'removeHandBook failed: unknown result';
  }

  removeHandBookRow (token, hbId, rowId) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_removeHandBookRow(token, hbId, rowId, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_removeHandBookRow (token, hbId, rowId, callback) {
    const params = {
      token: token,
      hbId: hbId,
      rowId: rowId
    };
    const args = new HandBookService_removeHandBookRow_args(params);
    try {
      this.output.writeMessageBegin('removeHandBookRow', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_removeHandBookRow();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_removeHandBookRow () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new HandBookService_removeHandBookRow_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'removeHandBookRow failed: unknown result';
  }
};
