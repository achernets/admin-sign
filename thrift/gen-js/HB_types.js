//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


HBColumnType = {
  'TEXT' : 0,
  'NUMBER' : 1,
  'USER_CHOICE' : 2,
  'GLOBAL_TEXT' : 3
};
ThriftTransportType = {
  'HTTP' : 0,
  'SOCKET' : 1
};
ThriftProtocolType = {
  'JSON' : 0,
  'BIN' : 1
};
HBValue = class {
  constructor(args) {
    this.id = null;
    this.value = null;
    this.user = null;
    this.type = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = Thrift.copyMap(args.value, [null]);
      }
      if (args.user !== undefined && args.user !== null) {
        this.user = new UserOrGroup(args.user);
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.value = {};
          const _rtmp31 = input.readMapBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            if (_i2 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key3 = null;
            let val4 = null;
            key3 = input.readString().value;
            val4 = input.readString().value;
            this.value[key3] = val4;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.user = new UserOrGroup();
          this.user.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HBValue');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.value));
      for (let kiter5 in this.value) {
        if (this.value.hasOwnProperty(kiter5)) {
          let viter6 = this.value[kiter5];
          output.writeString(kiter5);
          output.writeString(viter6);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.STRUCT, 3);
      this.user.write(output);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 4);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HBRow = class {
  constructor(args) {
    this.id = null;
    this.order = null;
    this.values = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.order !== undefined && args.order !== null) {
        this.order = args.order;
      }
      if (args.values !== undefined && args.values !== null) {
        this.values = Thrift.copyMap(args.values, [HBValue]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.order = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.values = {};
          const _rtmp38 = input.readMapBegin();
          const _size7 = _rtmp38.size || 0;
          for (let _i9 = 0; _i9 < _size7; ++_i9) {
            if (_i9 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key10 = null;
            let val11 = null;
            key10 = input.readString().value;
            val11 = new HBValue();
            val11.read(input);
            this.values[key10] = val11;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HBRow');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.order !== null && this.order !== undefined) {
      output.writeFieldBegin('order', Thrift.Type.I64, 2);
      output.writeI64(this.order);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.values));
      for (let kiter12 in this.values) {
        if (this.values.hasOwnProperty(kiter12)) {
          let viter13 = this.values[kiter12];
          output.writeString(kiter12);
          viter13.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HBColumn = class {
  constructor(args) {
    this.id = null;
    this.oName = null;
    this.requiredColumn = null;
    this.seqNum = null;
    this.searchable = null;
    this.columnType = null;
    this.orgId = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.oName !== undefined && args.oName !== null) {
        this.oName = args.oName;
      }
      if (args.requiredColumn !== undefined && args.requiredColumn !== null) {
        this.requiredColumn = args.requiredColumn;
      }
      if (args.seqNum !== undefined && args.seqNum !== null) {
        this.seqNum = args.seqNum;
      }
      if (args.searchable !== undefined && args.searchable !== null) {
        this.searchable = args.searchable;
      }
      if (args.columnType !== undefined && args.columnType !== null) {
        this.columnType = args.columnType;
      }
      if (args.orgId !== undefined && args.orgId !== null) {
        this.orgId = args.orgId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.oName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.requiredColumn = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.seqNum = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.searchable = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.columnType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.orgId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HBColumn');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.oName !== null && this.oName !== undefined) {
      output.writeFieldBegin('oName', Thrift.Type.STRING, 2);
      output.writeString(this.oName);
      output.writeFieldEnd();
    }
    if (this.requiredColumn !== null && this.requiredColumn !== undefined) {
      output.writeFieldBegin('requiredColumn', Thrift.Type.BOOL, 3);
      output.writeBool(this.requiredColumn);
      output.writeFieldEnd();
    }
    if (this.seqNum !== null && this.seqNum !== undefined) {
      output.writeFieldBegin('seqNum', Thrift.Type.I32, 4);
      output.writeI32(this.seqNum);
      output.writeFieldEnd();
    }
    if (this.searchable !== null && this.searchable !== undefined) {
      output.writeFieldBegin('searchable', Thrift.Type.BOOL, 5);
      output.writeBool(this.searchable);
      output.writeFieldEnd();
    }
    if (this.columnType !== null && this.columnType !== undefined) {
      output.writeFieldBegin('columnType', Thrift.Type.I32, 6);
      output.writeI32(this.columnType);
      output.writeFieldEnd();
    }
    if (this.orgId !== null && this.orgId !== undefined) {
      output.writeFieldBegin('orgId', Thrift.Type.STRING, 7);
      output.writeString(this.orgId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
