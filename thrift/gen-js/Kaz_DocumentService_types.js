//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


ExecutionType = {
  'ANY_IMMEDIATELY' : 0,
  'ANY_WAIT_FOR_EXECUTORS' : 1,
  'ALL_EXECUTORS' : 2,
  'MOST_SET_DECISION' : 3
};
DocPatternStageRequirement = {
  'OPTIONAL' : 0,
  'REQUIRED' : 1,
  'PROHIBITED' : 2
};
AttachmentAction = {
  'PUBLISH_DRAFT' : 0,
  'IGNORE_DRAFT' : 1,
  'DELETE_DRAFT' : 2,
  'FIXATE_DRAFT' : 3
};
CloseWindowType = {
  'CLOSE' : 0,
  'NOT_CLOSE' : 1,
  'NOT_CLOSE_UPDATE' : 2
};
DocumentAccessPolicyType = {
  'ACCESS' : 0,
  'REGISTRY' : 1,
  'BY_ROLE' : 2,
  'EXTERNAL' : 3
};
DocumentIconType = {
  'ICON_DRAFT' : 0,
  'ICON_COMPLETE_CANCEL' : 1,
  'ICON_COMPLETE_EDITED' : 2,
  'ICON_COMPLETE' : 3,
  'ICON_IN_WORK_NO_MY_CANCEL' : 4,
  'ICON_IN_WORK_NO_MY_EDITED' : 5,
  'ICON_IN_WORK_NO_MY' : 6,
  'ICON_IN_WORK_EDITED' : 7,
  'ICON_IN_WORK_CANCELED' : 8,
  'ICON_IN_WORK' : 9,
  'ICON_IN_WORK_WARNING_EDITED' : 10,
  'ICON_IN_WORK_WARNING_CANCELED' : 11,
  'ICON_IN_WORK_WARNING' : 12,
  'ICON_IN_WORK_ERROR_EDITED' : 13,
  'ICON_IN_WORK_ERROR_CANCELED' : 14,
  'ICON_IN_WORK_ERROR' : 15,
  'ICON_ARCHIVE' : 16,
  'ICON_ERROR' : 17
};
PatternType = {
  'DOCUMENT' : 0,
  'DISCUSSION_FLOW' : 1,
  'DISCUSSION_QUESTION' : 2,
  'DISCUSSION_PROTOCOL' : 3
};
ContentItemShowType = {
  'SHORT' : 0,
  'FULL' : 1,
  'ALL' : 2
};
ContentItemShowPlace = {
  'INFO' : 0,
  'TAB' : 1,
  'CONTENT' : 2
};
ContentTableViewMode = {
  'TABLE' : 0,
  'BAND' : 1
};
ContentTableSelectMode = {
  'NONE' : 0,
  'SELECT' : 1,
  'MULTISELECT' : 2
};
ContentItemType = {
  'TEXT_FIELD' : 0,
  'COMBO_BOX' : 1,
  'USER_CHOICE' : 2,
  'CALENDAR' : 3,
  'TABLE' : 4,
  'SEPARATOR' : 5,
  'MULTILINE_TEXT_FIELD' : 6,
  'MARK' : 7,
  'CHECKBOX' : 8,
  'SWITCH_ITEM' : 9,
  'HTTP_LINK' : 10,
  'CALENDAR_RANGE' : 11,
  'CONTAINER' : 12,
  'HAND_BOOK' : 13,
  'ORG_STRUCTURE' : 14,
  'ATTACHMENT' : 15
};
VisibilityOfBookmarks = {
  'SHOW' : 0,
  'NOT_SHOW' : 1,
  'EDITING' : 2
};
DocPatternStageStatus = {
  'CREATED' : 0,
  'IN_PROGRESS' : 1,
  'CLOSED' : 2,
  'ARCHIVE' : 3
};
DocPatternStageSubStatus = {
  'DRAFT' : 0,
  'PROJECT' : 1,
  'CONFIRM' : 2,
  'SIGN' : 3,
  'IN_WORK' : 4,
  'IN_EXECUTION' : 5,
  'CLOSED' : 6,
  'ACTING' : 7,
  'CANCELED' : 8,
  'ARCHIVE' : 9,
  'REGISTRATION' : 10,
  'ON_REVISION' : 11,
  'EDITED' : 12
};
DocPatternStageExecPriority = {
  'PARALLEL' : 0,
  'SERIES' : 1
};
DocPatternStageActionType = {
  'VIEW' : 0,
  'CONFIRM' : 1,
  'SIGN' : 2,
  'PERFORM' : 3
};
DispatchState = {
  'INBOX' : 0,
  'OUTBOX' : 1
};
StageParamType = {
  'STRING' : 0,
  'PATTERN' : 1,
  'REPORT' : 2,
  'COMBOBOX' : 3,
  'CHECKBOX' : 4,
  'SCRIPT' : 5,
  'DATETIME' : 6,
  'JIRATIME' : 7,
  'PATTERN_TO_USER' : 8
};
DocumentExecutionOwnerType = {
  'AUTHOR' : 0,
  'RESPONSIBLE' : 1,
  'EXECUTOR' : 2,
  'VIEWER' : 3,
  'SPECTATOR' : 4,
  'SYSTEM' : 5,
  'ADDITIONAL_CONFIRMER' : 6,
  'PERIODICAL_DISABLE' : 7
};
CommentType = {
  'DECISION' : 0,
  'COMMENT' : 1,
  'LINK' : 2,
  'CHANGE_SUB_STATUS' : 3
};
ExecutionReassignType = {
  'ANY' : 0,
  'CONTROL' : 1,
  'ALL' : 2,
  'ALL_EQUAL' : 3,
  'GROUP' : 4,
  'GROUP_ONE_ENOUGH' : 5
};
DocumentExecutionStatus = {
  'OPEN' : 0,
  'CLOSED' : 1,
  'CLOSED_ADDITIONAL' : 2,
  'FORCED_CLOSURE' : 3,
  'AUTO_CLOSED' : 4,
  'REVOKED' : 5,
  'REMOVED' : 6,
  'NONE' : 7,
  'DISABLED' : 8,
  'SOFT_REMOVED' : 9
};
FilterReassign = {
  'REASSIGN_TO_ME' : 0,
  'MY_REASSIGN' : 1,
  'CONTROL' : 2,
  'ALL_MY_DOCUMENTS' : 3,
  'MY_DOCUMENTS_IN_WORK' : 4,
  'DRAFTS' : 5,
  'MY_COMPLETED_DOCUMENTS' : 6,
  'MY_RESPONSIBLE' : 7,
  'COMPLETED_DOCUMENTS' : 8,
  'UNCOMPLETED_DOCUMENTS' : 9
};
AttachmentType = {
  'ORIGINAL' : 0,
  'PDF' : 1,
  'PNG' : 2,
  'PDF_UNSECURED' : 3
};
AttachmentAccessMode = {
  'NOPREVIEW' : 0,
  'READONLY' : 1,
  'REVIEW' : 2,
  'EDIT' : 3
};
AttachmentExtStatus = {
  'PRIMARY' : 0,
  'SECONDARY' : 1,
  'CARD' : 2,
  'CONTENT' : 3
};
SignInSystem = {
  'NONE' : 0,
  'ALMEX' : 1,
  'EXTERNAL' : 2,
  'BOTH' : 3
};
DocRelationType = {
  'PARENT' : 0,
  'CHILD' : 1,
  'OTHER' : 2
};
DocumentExecutionTypeLink = {
  'ALL' : 0,
  'PARENT' : 1,
  'CHILD' : 2
};
ChangeType = {
  'ADD' : 0,
  'REPLACE' : 1,
  'REMOVE' : 2
};
HistoryLevel = {
  'INFO' : 0,
  'WARNING' : 1,
  'ERROR' : 2
};
TodayTaskType = {
  'ALL' : 0,
  'OPEN' : 1,
  'CLOSED' : 2,
  'EVENT' : 3,
  'MEETING' : 4
};
DocumentExecutionStatisticType = {
  'EXPIRED' : 0,
  'DEADLINE_AFTER_DAY' : 1,
  'NOT_SOON_DEADLINE' : 2
};
AggregationRequiredType = {
  'DOCUMENT' : 0,
  'DOC_COMMENT' : 1,
  'DOC_RELATION' : 2,
  'CONTENT_TAB' : 3,
  'SC' : 4,
  'DEADLINE_HISTORY' : 5,
  'ATTACHMENT' : 6,
  'REPORT_TEMPLATE' : 7,
  'DOC_PERMISSION' : 8,
  'REGISTRY_RULE' : 9,
  'REGISTRY_USERS' : 10,
  'REGISTRY_ACCOUNTS' : 11,
  'MATCHING_USER_GROUP' : 12,
  'CONTENT_HOLDER' : 13
};
AttachmentProcessingType = {
  'NONE' : 0,
  'DELETE' : 1,
  'PROCESS' : 2
};
AccessRule = class {
  constructor(args) {
    this.forAuthor = null;
    this.forResponsible = null;
    this.forExecutors = null;
    this.forUserOrGroup = null;
    this.forRole = null;
    this.allowList = null;
    this.allowRole = null;
    this.forAllDocView = null;
    if (args) {
      if (args.forAuthor !== undefined && args.forAuthor !== null) {
        this.forAuthor = args.forAuthor;
      }
      if (args.forResponsible !== undefined && args.forResponsible !== null) {
        this.forResponsible = args.forResponsible;
      }
      if (args.forExecutors !== undefined && args.forExecutors !== null) {
        this.forExecutors = args.forExecutors;
      }
      if (args.forUserOrGroup !== undefined && args.forUserOrGroup !== null) {
        this.forUserOrGroup = args.forUserOrGroup;
      }
      if (args.forRole !== undefined && args.forRole !== null) {
        this.forRole = args.forRole;
      }
      if (args.allowList !== undefined && args.allowList !== null) {
        this.allowList = Thrift.copyList(args.allowList, [UserOrGroup]);
      }
      if (args.allowRole !== undefined && args.allowRole !== null) {
        this.allowRole = Thrift.copyList(args.allowRole, [null]);
      }
      if (args.forAllDocView !== undefined && args.forAllDocView !== null) {
        this.forAllDocView = args.forAllDocView;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.forAuthor = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.forResponsible = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.forExecutors = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.forUserOrGroup = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.forRole = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.allowList = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new UserOrGroup();
            elem3.read(input);
            this.allowList.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.SET) {
          this.allowRole = [];
          const _rtmp35 = input.readSetBegin();
          const _size4 = _rtmp35.size || 0;
          for (let _i6 = 0; _i6 < _size4; ++_i6) {
            let elem7 = null;
            elem7 = input.readString().value;
            this.allowRole.push(elem7);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.forAllDocView = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AccessRule');
    if (this.forAuthor !== null && this.forAuthor !== undefined) {
      output.writeFieldBegin('forAuthor', Thrift.Type.BOOL, 1);
      output.writeBool(this.forAuthor);
      output.writeFieldEnd();
    }
    if (this.forResponsible !== null && this.forResponsible !== undefined) {
      output.writeFieldBegin('forResponsible', Thrift.Type.BOOL, 2);
      output.writeBool(this.forResponsible);
      output.writeFieldEnd();
    }
    if (this.forExecutors !== null && this.forExecutors !== undefined) {
      output.writeFieldBegin('forExecutors', Thrift.Type.BOOL, 3);
      output.writeBool(this.forExecutors);
      output.writeFieldEnd();
    }
    if (this.forUserOrGroup !== null && this.forUserOrGroup !== undefined) {
      output.writeFieldBegin('forUserOrGroup', Thrift.Type.BOOL, 4);
      output.writeBool(this.forUserOrGroup);
      output.writeFieldEnd();
    }
    if (this.forRole !== null && this.forRole !== undefined) {
      output.writeFieldBegin('forRole', Thrift.Type.BOOL, 5);
      output.writeBool(this.forRole);
      output.writeFieldEnd();
    }
    if (this.allowList !== null && this.allowList !== undefined) {
      output.writeFieldBegin('allowList', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.allowList.length);
      for (let iter8 in this.allowList) {
        if (this.allowList.hasOwnProperty(iter8)) {
          iter8 = this.allowList[iter8];
          iter8.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.allowRole !== null && this.allowRole !== undefined) {
      output.writeFieldBegin('allowRole', Thrift.Type.SET, 7);
      output.writeSetBegin(Thrift.Type.STRING, this.allowRole.length);
      for (let iter9 in this.allowRole) {
        if (this.allowRole.hasOwnProperty(iter9)) {
          iter9 = this.allowRole[iter9];
          output.writeString(iter9);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.forAllDocView !== null && this.forAllDocView !== undefined) {
      output.writeFieldBegin('forAllDocView', Thrift.Type.BOOL, 8);
      output.writeBool(this.forAllDocView);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentPatternStagesLink = class {
  constructor(args) {
    this.id = null;
    this.parentStageId = null;
    this.childStageId = null;
    this.nameDocPatStageLink = null;
    this.descriptionDocPatStageLink = null;
    this.decision = null;
    this.graphicalParams = null;
    this.execType = null;
    this.movePriority = null;
    this.informUsers = null;
    this.accessRule = null;
    this.allowForCurUser = null;
    this.useByDefault = null;
    this.resolution = null;
    this.signature = null;
    this.autoExecute = null;
    this.jiraPeriod = null;
    this.comment = null;
    this.allowRepeatDecision = null;
    this.attachmentAction = null;
    this.orderLink = null;
    this.preFunctionId = null;
    this.closeWindowType = null;
    this.updateWindowInterval = null;
    this.attachmentForceConver = null;
    this.contentHolder = null;
    this.attachmentRequirement = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.parentStageId !== undefined && args.parentStageId !== null) {
        this.parentStageId = args.parentStageId;
      }
      if (args.childStageId !== undefined && args.childStageId !== null) {
        this.childStageId = args.childStageId;
      }
      if (args.nameDocPatStageLink !== undefined && args.nameDocPatStageLink !== null) {
        this.nameDocPatStageLink = args.nameDocPatStageLink;
      }
      if (args.descriptionDocPatStageLink !== undefined && args.descriptionDocPatStageLink !== null) {
        this.descriptionDocPatStageLink = args.descriptionDocPatStageLink;
      }
      if (args.decision !== undefined && args.decision !== null) {
        this.decision = args.decision;
      }
      if (args.graphicalParams !== undefined && args.graphicalParams !== null) {
        this.graphicalParams = args.graphicalParams;
      }
      if (args.execType !== undefined && args.execType !== null) {
        this.execType = args.execType;
      }
      if (args.movePriority !== undefined && args.movePriority !== null) {
        this.movePriority = args.movePriority;
      }
      if (args.informUsers !== undefined && args.informUsers !== null) {
        this.informUsers = Thrift.copyList(args.informUsers, [UserOrGroup]);
      }
      if (args.accessRule !== undefined && args.accessRule !== null) {
        this.accessRule = new AccessRule(args.accessRule);
      }
      if (args.allowForCurUser !== undefined && args.allowForCurUser !== null) {
        this.allowForCurUser = args.allowForCurUser;
      }
      if (args.useByDefault !== undefined && args.useByDefault !== null) {
        this.useByDefault = args.useByDefault;
      }
      if (args.resolution !== undefined && args.resolution !== null) {
        this.resolution = args.resolution;
      }
      if (args.signature !== undefined && args.signature !== null) {
        this.signature = args.signature;
      }
      if (args.autoExecute !== undefined && args.autoExecute !== null) {
        this.autoExecute = args.autoExecute;
      }
      if (args.jiraPeriod !== undefined && args.jiraPeriod !== null) {
        this.jiraPeriod = args.jiraPeriod;
      }
      if (args.comment !== undefined && args.comment !== null) {
        this.comment = args.comment;
      }
      if (args.allowRepeatDecision !== undefined && args.allowRepeatDecision !== null) {
        this.allowRepeatDecision = args.allowRepeatDecision;
      }
      if (args.attachmentAction !== undefined && args.attachmentAction !== null) {
        this.attachmentAction = args.attachmentAction;
      }
      if (args.orderLink !== undefined && args.orderLink !== null) {
        this.orderLink = args.orderLink;
      }
      if (args.preFunctionId !== undefined && args.preFunctionId !== null) {
        this.preFunctionId = new CompositeId(args.preFunctionId);
      }
      if (args.closeWindowType !== undefined && args.closeWindowType !== null) {
        this.closeWindowType = args.closeWindowType;
      }
      if (args.updateWindowInterval !== undefined && args.updateWindowInterval !== null) {
        this.updateWindowInterval = args.updateWindowInterval;
      }
      if (args.attachmentForceConver !== undefined && args.attachmentForceConver !== null) {
        this.attachmentForceConver = args.attachmentForceConver;
      }
      if (args.contentHolder !== undefined && args.contentHolder !== null) {
        this.contentHolder = new ContentHolder(args.contentHolder);
      }
      if (args.attachmentRequirement !== undefined && args.attachmentRequirement !== null) {
        this.attachmentRequirement = args.attachmentRequirement;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.parentStageId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.childStageId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.nameDocPatStageLink = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.descriptionDocPatStageLink = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.decision = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.graphicalParams = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.execType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.movePriority = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.LIST) {
          this.informUsers = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = new UserOrGroup();
            elem13.read(input);
            this.informUsers.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRUCT) {
          this.accessRule = new AccessRule();
          this.accessRule.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.BOOL) {
          this.allowForCurUser = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.BOOL) {
          this.useByDefault = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I32) {
          this.resolution = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I32) {
          this.signature = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.BOOL) {
          this.autoExecute = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRING) {
          this.jiraPeriod = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.STRING) {
          this.comment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.BOOL) {
          this.allowRepeatDecision = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.I32) {
          this.attachmentAction = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.I32) {
          this.orderLink = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRUCT) {
          this.preFunctionId = new CompositeId();
          this.preFunctionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.I32) {
          this.closeWindowType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.I32) {
          this.updateWindowInterval = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.BOOL) {
          this.attachmentForceConver = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.STRUCT) {
          this.contentHolder = new ContentHolder();
          this.contentHolder.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.I32) {
          this.attachmentRequirement = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentPatternStagesLink');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.parentStageId !== null && this.parentStageId !== undefined) {
      output.writeFieldBegin('parentStageId', Thrift.Type.STRING, 2);
      output.writeString(this.parentStageId);
      output.writeFieldEnd();
    }
    if (this.childStageId !== null && this.childStageId !== undefined) {
      output.writeFieldBegin('childStageId', Thrift.Type.STRING, 3);
      output.writeString(this.childStageId);
      output.writeFieldEnd();
    }
    if (this.nameDocPatStageLink !== null && this.nameDocPatStageLink !== undefined) {
      output.writeFieldBegin('nameDocPatStageLink', Thrift.Type.STRING, 4);
      output.writeString(this.nameDocPatStageLink);
      output.writeFieldEnd();
    }
    if (this.descriptionDocPatStageLink !== null && this.descriptionDocPatStageLink !== undefined) {
      output.writeFieldBegin('descriptionDocPatStageLink', Thrift.Type.STRING, 5);
      output.writeString(this.descriptionDocPatStageLink);
      output.writeFieldEnd();
    }
    if (this.decision !== null && this.decision !== undefined) {
      output.writeFieldBegin('decision', Thrift.Type.STRING, 6);
      output.writeString(this.decision);
      output.writeFieldEnd();
    }
    if (this.graphicalParams !== null && this.graphicalParams !== undefined) {
      output.writeFieldBegin('graphicalParams', Thrift.Type.STRING, 7);
      output.writeString(this.graphicalParams);
      output.writeFieldEnd();
    }
    if (this.execType !== null && this.execType !== undefined) {
      output.writeFieldBegin('execType', Thrift.Type.I32, 8);
      output.writeI32(this.execType);
      output.writeFieldEnd();
    }
    if (this.movePriority !== null && this.movePriority !== undefined) {
      output.writeFieldBegin('movePriority', Thrift.Type.I32, 9);
      output.writeI32(this.movePriority);
      output.writeFieldEnd();
    }
    if (this.informUsers !== null && this.informUsers !== undefined) {
      output.writeFieldBegin('informUsers', Thrift.Type.LIST, 10);
      output.writeListBegin(Thrift.Type.STRUCT, this.informUsers.length);
      for (let iter14 in this.informUsers) {
        if (this.informUsers.hasOwnProperty(iter14)) {
          iter14 = this.informUsers[iter14];
          iter14.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.accessRule !== null && this.accessRule !== undefined) {
      output.writeFieldBegin('accessRule', Thrift.Type.STRUCT, 11);
      this.accessRule.write(output);
      output.writeFieldEnd();
    }
    if (this.allowForCurUser !== null && this.allowForCurUser !== undefined) {
      output.writeFieldBegin('allowForCurUser', Thrift.Type.BOOL, 12);
      output.writeBool(this.allowForCurUser);
      output.writeFieldEnd();
    }
    if (this.useByDefault !== null && this.useByDefault !== undefined) {
      output.writeFieldBegin('useByDefault', Thrift.Type.BOOL, 13);
      output.writeBool(this.useByDefault);
      output.writeFieldEnd();
    }
    if (this.resolution !== null && this.resolution !== undefined) {
      output.writeFieldBegin('resolution', Thrift.Type.I32, 14);
      output.writeI32(this.resolution);
      output.writeFieldEnd();
    }
    if (this.signature !== null && this.signature !== undefined) {
      output.writeFieldBegin('signature', Thrift.Type.I32, 15);
      output.writeI32(this.signature);
      output.writeFieldEnd();
    }
    if (this.autoExecute !== null && this.autoExecute !== undefined) {
      output.writeFieldBegin('autoExecute', Thrift.Type.BOOL, 16);
      output.writeBool(this.autoExecute);
      output.writeFieldEnd();
    }
    if (this.jiraPeriod !== null && this.jiraPeriod !== undefined) {
      output.writeFieldBegin('jiraPeriod', Thrift.Type.STRING, 17);
      output.writeString(this.jiraPeriod);
      output.writeFieldEnd();
    }
    if (this.comment !== null && this.comment !== undefined) {
      output.writeFieldBegin('comment', Thrift.Type.STRING, 18);
      output.writeString(this.comment);
      output.writeFieldEnd();
    }
    if (this.allowRepeatDecision !== null && this.allowRepeatDecision !== undefined) {
      output.writeFieldBegin('allowRepeatDecision', Thrift.Type.BOOL, 19);
      output.writeBool(this.allowRepeatDecision);
      output.writeFieldEnd();
    }
    if (this.attachmentAction !== null && this.attachmentAction !== undefined) {
      output.writeFieldBegin('attachmentAction', Thrift.Type.I32, 20);
      output.writeI32(this.attachmentAction);
      output.writeFieldEnd();
    }
    if (this.orderLink !== null && this.orderLink !== undefined) {
      output.writeFieldBegin('orderLink', Thrift.Type.I32, 21);
      output.writeI32(this.orderLink);
      output.writeFieldEnd();
    }
    if (this.preFunctionId !== null && this.preFunctionId !== undefined) {
      output.writeFieldBegin('preFunctionId', Thrift.Type.STRUCT, 22);
      this.preFunctionId.write(output);
      output.writeFieldEnd();
    }
    if (this.closeWindowType !== null && this.closeWindowType !== undefined) {
      output.writeFieldBegin('closeWindowType', Thrift.Type.I32, 23);
      output.writeI32(this.closeWindowType);
      output.writeFieldEnd();
    }
    if (this.updateWindowInterval !== null && this.updateWindowInterval !== undefined) {
      output.writeFieldBegin('updateWindowInterval', Thrift.Type.I32, 24);
      output.writeI32(this.updateWindowInterval);
      output.writeFieldEnd();
    }
    if (this.attachmentForceConver !== null && this.attachmentForceConver !== undefined) {
      output.writeFieldBegin('attachmentForceConver', Thrift.Type.BOOL, 25);
      output.writeBool(this.attachmentForceConver);
      output.writeFieldEnd();
    }
    if (this.contentHolder !== null && this.contentHolder !== undefined) {
      output.writeFieldBegin('contentHolder', Thrift.Type.STRUCT, 26);
      this.contentHolder.write(output);
      output.writeFieldEnd();
    }
    if (this.attachmentRequirement !== null && this.attachmentRequirement !== undefined) {
      output.writeFieldBegin('attachmentRequirement', Thrift.Type.I32, 27);
      output.writeI32(this.attachmentRequirement);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
StageLinkAction = class {
  constructor(args) {
    this.type = null;
    this.userOrGroupId = null;
    this.execId = null;
    this.additionConfirmation = null;
    this.cancelDecision = null;
    this.link = null;
    this.transfer = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.userOrGroupId !== undefined && args.userOrGroupId !== null) {
        this.userOrGroupId = args.userOrGroupId;
      }
      if (args.execId !== undefined && args.execId !== null) {
        this.execId = args.execId;
      }
      if (args.additionConfirmation !== undefined && args.additionConfirmation !== null) {
        this.additionConfirmation = args.additionConfirmation;
      }
      if (args.cancelDecision !== undefined && args.cancelDecision !== null) {
        this.cancelDecision = args.cancelDecision;
      }
      if (args.link !== undefined && args.link !== null) {
        this.link = new DocumentPatternStagesLink(args.link);
      }
      if (args.transfer !== undefined && args.transfer !== null) {
        this.transfer = args.transfer;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userOrGroupId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.execId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.additionConfirmation = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.cancelDecision = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.link = new DocumentPatternStagesLink();
          this.link.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.transfer = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('StageLinkAction');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.userOrGroupId !== null && this.userOrGroupId !== undefined) {
      output.writeFieldBegin('userOrGroupId', Thrift.Type.STRING, 2);
      output.writeString(this.userOrGroupId);
      output.writeFieldEnd();
    }
    if (this.execId !== null && this.execId !== undefined) {
      output.writeFieldBegin('execId', Thrift.Type.STRING, 3);
      output.writeString(this.execId);
      output.writeFieldEnd();
    }
    if (this.additionConfirmation !== null && this.additionConfirmation !== undefined) {
      output.writeFieldBegin('additionConfirmation', Thrift.Type.BOOL, 4);
      output.writeBool(this.additionConfirmation);
      output.writeFieldEnd();
    }
    if (this.cancelDecision !== null && this.cancelDecision !== undefined) {
      output.writeFieldBegin('cancelDecision', Thrift.Type.BOOL, 5);
      output.writeBool(this.cancelDecision);
      output.writeFieldEnd();
    }
    if (this.link !== null && this.link !== undefined) {
      output.writeFieldBegin('link', Thrift.Type.STRUCT, 6);
      this.link.write(output);
      output.writeFieldEnd();
    }
    if (this.transfer !== null && this.transfer !== undefined) {
      output.writeFieldBegin('transfer', Thrift.Type.BOOL, 7);
      output.writeBool(this.transfer);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocPermissions = class {
  constructor(args) {
    this.actions = null;
    this.onlineEdit = null;
    this.onlineComment = null;
    this.editDoc = null;
    this.attachmentAdd = null;
    this.attachmentDelete = null;
    this.changeContent = null;
    this.addExecutors = null;
    this.allowAdditionalConf = null;
    this.allowReassign = null;
    this.generateNumber = null;
    this.shareDocument = null;
    this.shareDocumentRevoke = null;
    this.updateResponsible = null;
    this.updateSC = null;
    this.allowRepeatReassign = null;
    this.exList = null;
    this.attachmentSign = null;
    if (args) {
      if (args.actions !== undefined && args.actions !== null) {
        this.actions = Thrift.copyList(args.actions, [StageLinkAction]);
      }
      if (args.onlineEdit !== undefined && args.onlineEdit !== null) {
        this.onlineEdit = args.onlineEdit;
      }
      if (args.onlineComment !== undefined && args.onlineComment !== null) {
        this.onlineComment = args.onlineComment;
      }
      if (args.editDoc !== undefined && args.editDoc !== null) {
        this.editDoc = args.editDoc;
      }
      if (args.attachmentAdd !== undefined && args.attachmentAdd !== null) {
        this.attachmentAdd = args.attachmentAdd;
      }
      if (args.attachmentDelete !== undefined && args.attachmentDelete !== null) {
        this.attachmentDelete = args.attachmentDelete;
      }
      if (args.changeContent !== undefined && args.changeContent !== null) {
        this.changeContent = args.changeContent;
      }
      if (args.addExecutors !== undefined && args.addExecutors !== null) {
        this.addExecutors = args.addExecutors;
      }
      if (args.allowAdditionalConf !== undefined && args.allowAdditionalConf !== null) {
        this.allowAdditionalConf = args.allowAdditionalConf;
      }
      if (args.allowReassign !== undefined && args.allowReassign !== null) {
        this.allowReassign = args.allowReassign;
      }
      if (args.generateNumber !== undefined && args.generateNumber !== null) {
        this.generateNumber = args.generateNumber;
      }
      if (args.shareDocument !== undefined && args.shareDocument !== null) {
        this.shareDocument = args.shareDocument;
      }
      if (args.shareDocumentRevoke !== undefined && args.shareDocumentRevoke !== null) {
        this.shareDocumentRevoke = args.shareDocumentRevoke;
      }
      if (args.updateResponsible !== undefined && args.updateResponsible !== null) {
        this.updateResponsible = args.updateResponsible;
      }
      if (args.updateSC !== undefined && args.updateSC !== null) {
        this.updateSC = args.updateSC;
      }
      if (args.allowRepeatReassign !== undefined && args.allowRepeatReassign !== null) {
        this.allowRepeatReassign = args.allowRepeatReassign;
      }
      if (args.exList !== undefined && args.exList !== null) {
        this.exList = Thrift.copyList(args.exList, [null]);
      }
      if (args.attachmentSign !== undefined && args.attachmentSign !== null) {
        this.attachmentSign = args.attachmentSign;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.actions = [];
          const _rtmp316 = input.readListBegin();
          const _size15 = _rtmp316.size || 0;
          for (let _i17 = 0; _i17 < _size15; ++_i17) {
            let elem18 = null;
            elem18 = new StageLinkAction();
            elem18.read(input);
            this.actions.push(elem18);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.onlineEdit = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.onlineComment = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.editDoc = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.attachmentAdd = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.attachmentDelete = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.changeContent = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.addExecutors = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.BOOL) {
          this.allowAdditionalConf = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.BOOL) {
          this.allowReassign = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.BOOL) {
          this.generateNumber = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.BOOL) {
          this.shareDocument = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.BOOL) {
          this.shareDocumentRevoke = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.BOOL) {
          this.updateResponsible = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.BOOL) {
          this.updateSC = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.BOOL) {
          this.allowRepeatReassign = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.LIST) {
          this.exList = [];
          const _rtmp320 = input.readListBegin();
          const _size19 = _rtmp320.size || 0;
          for (let _i21 = 0; _i21 < _size19; ++_i21) {
            let elem22 = null;
            elem22 = new PreconditionException();
            elem22.read(input);
            this.exList.push(elem22);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.BOOL) {
          this.attachmentSign = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocPermissions');
    if (this.actions !== null && this.actions !== undefined) {
      output.writeFieldBegin('actions', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.actions.length);
      for (let iter23 in this.actions) {
        if (this.actions.hasOwnProperty(iter23)) {
          iter23 = this.actions[iter23];
          iter23.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.onlineEdit !== null && this.onlineEdit !== undefined) {
      output.writeFieldBegin('onlineEdit', Thrift.Type.BOOL, 2);
      output.writeBool(this.onlineEdit);
      output.writeFieldEnd();
    }
    if (this.onlineComment !== null && this.onlineComment !== undefined) {
      output.writeFieldBegin('onlineComment', Thrift.Type.BOOL, 3);
      output.writeBool(this.onlineComment);
      output.writeFieldEnd();
    }
    if (this.editDoc !== null && this.editDoc !== undefined) {
      output.writeFieldBegin('editDoc', Thrift.Type.BOOL, 4);
      output.writeBool(this.editDoc);
      output.writeFieldEnd();
    }
    if (this.attachmentAdd !== null && this.attachmentAdd !== undefined) {
      output.writeFieldBegin('attachmentAdd', Thrift.Type.BOOL, 5);
      output.writeBool(this.attachmentAdd);
      output.writeFieldEnd();
    }
    if (this.attachmentDelete !== null && this.attachmentDelete !== undefined) {
      output.writeFieldBegin('attachmentDelete', Thrift.Type.BOOL, 6);
      output.writeBool(this.attachmentDelete);
      output.writeFieldEnd();
    }
    if (this.changeContent !== null && this.changeContent !== undefined) {
      output.writeFieldBegin('changeContent', Thrift.Type.BOOL, 7);
      output.writeBool(this.changeContent);
      output.writeFieldEnd();
    }
    if (this.addExecutors !== null && this.addExecutors !== undefined) {
      output.writeFieldBegin('addExecutors', Thrift.Type.BOOL, 8);
      output.writeBool(this.addExecutors);
      output.writeFieldEnd();
    }
    if (this.allowAdditionalConf !== null && this.allowAdditionalConf !== undefined) {
      output.writeFieldBegin('allowAdditionalConf', Thrift.Type.BOOL, 9);
      output.writeBool(this.allowAdditionalConf);
      output.writeFieldEnd();
    }
    if (this.allowReassign !== null && this.allowReassign !== undefined) {
      output.writeFieldBegin('allowReassign', Thrift.Type.BOOL, 10);
      output.writeBool(this.allowReassign);
      output.writeFieldEnd();
    }
    if (this.generateNumber !== null && this.generateNumber !== undefined) {
      output.writeFieldBegin('generateNumber', Thrift.Type.BOOL, 11);
      output.writeBool(this.generateNumber);
      output.writeFieldEnd();
    }
    if (this.shareDocument !== null && this.shareDocument !== undefined) {
      output.writeFieldBegin('shareDocument', Thrift.Type.BOOL, 12);
      output.writeBool(this.shareDocument);
      output.writeFieldEnd();
    }
    if (this.shareDocumentRevoke !== null && this.shareDocumentRevoke !== undefined) {
      output.writeFieldBegin('shareDocumentRevoke', Thrift.Type.BOOL, 13);
      output.writeBool(this.shareDocumentRevoke);
      output.writeFieldEnd();
    }
    if (this.updateResponsible !== null && this.updateResponsible !== undefined) {
      output.writeFieldBegin('updateResponsible', Thrift.Type.BOOL, 14);
      output.writeBool(this.updateResponsible);
      output.writeFieldEnd();
    }
    if (this.updateSC !== null && this.updateSC !== undefined) {
      output.writeFieldBegin('updateSC', Thrift.Type.BOOL, 15);
      output.writeBool(this.updateSC);
      output.writeFieldEnd();
    }
    if (this.allowRepeatReassign !== null && this.allowRepeatReassign !== undefined) {
      output.writeFieldBegin('allowRepeatReassign', Thrift.Type.BOOL, 16);
      output.writeBool(this.allowRepeatReassign);
      output.writeFieldEnd();
    }
    if (this.exList !== null && this.exList !== undefined) {
      output.writeFieldBegin('exList', Thrift.Type.LIST, 17);
      output.writeListBegin(Thrift.Type.STRUCT, this.exList.length);
      for (let iter24 in this.exList) {
        if (this.exList.hasOwnProperty(iter24)) {
          iter24 = this.exList[iter24];
          iter24.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.attachmentSign !== null && this.attachmentSign !== undefined) {
      output.writeFieldBegin('attachmentSign', Thrift.Type.BOOL, 18);
      output.writeBool(this.attachmentSign);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentAccessPolicy = class {
  constructor(args) {
    this.type = null;
    this.policyId = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.policyId !== undefined && args.policyId !== null) {
        this.policyId = args.policyId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.policyId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentAccessPolicy');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 1);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.policyId !== null && this.policyId !== undefined) {
      output.writeFieldBegin('policyId', Thrift.Type.STRING, 2);
      output.writeString(this.policyId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentPatternGroup = class {
  constructor(args) {
    this.id = null;
    this.nameDocPatGroup = null;
    this.descriptionDocPatGroup = null;
    this.category = null;
    this.enableWorkWithSC = null;
    this.order = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.nameDocPatGroup !== undefined && args.nameDocPatGroup !== null) {
        this.nameDocPatGroup = args.nameDocPatGroup;
      }
      if (args.descriptionDocPatGroup !== undefined && args.descriptionDocPatGroup !== null) {
        this.descriptionDocPatGroup = args.descriptionDocPatGroup;
      }
      if (args.category !== undefined && args.category !== null) {
        this.category = args.category;
      }
      if (args.enableWorkWithSC !== undefined && args.enableWorkWithSC !== null) {
        this.enableWorkWithSC = args.enableWorkWithSC;
      }
      if (args.order !== undefined && args.order !== null) {
        this.order = args.order;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.nameDocPatGroup = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.descriptionDocPatGroup = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.category = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.enableWorkWithSC = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.order = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentPatternGroup');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.nameDocPatGroup !== null && this.nameDocPatGroup !== undefined) {
      output.writeFieldBegin('nameDocPatGroup', Thrift.Type.STRING, 2);
      output.writeString(this.nameDocPatGroup);
      output.writeFieldEnd();
    }
    if (this.descriptionDocPatGroup !== null && this.descriptionDocPatGroup !== undefined) {
      output.writeFieldBegin('descriptionDocPatGroup', Thrift.Type.STRING, 3);
      output.writeString(this.descriptionDocPatGroup);
      output.writeFieldEnd();
    }
    if (this.category !== null && this.category !== undefined) {
      output.writeFieldBegin('category', Thrift.Type.STRING, 4);
      output.writeString(this.category);
      output.writeFieldEnd();
    }
    if (this.enableWorkWithSC !== null && this.enableWorkWithSC !== undefined) {
      output.writeFieldBegin('enableWorkWithSC', Thrift.Type.BOOL, 5);
      output.writeBool(this.enableWorkWithSC);
      output.writeFieldEnd();
    }
    if (this.order !== null && this.order !== undefined) {
      output.writeFieldBegin('order', Thrift.Type.I32, 6);
      output.writeI32(this.order);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
ContentItemHBValue = class {
  constructor(args) {
    this.row = null;
    this.column = null;
    this.originalColumn = null;
    this.keyColumn = null;
    if (args) {
      if (args.row !== undefined && args.row !== null) {
        this.row = new HBRow(args.row);
      }
      if (args.column !== undefined && args.column !== null) {
        this.column = new HBColumn(args.column);
      }
      if (args.originalColumn !== undefined && args.originalColumn !== null) {
        this.originalColumn = new HBColumn(args.originalColumn);
      }
      if (args.keyColumn !== undefined && args.keyColumn !== null) {
        this.keyColumn = new HBColumn(args.keyColumn);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.row = new HBRow();
          this.row.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.column = new HBColumn();
          this.column.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.originalColumn = new HBColumn();
          this.originalColumn.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.keyColumn = new HBColumn();
          this.keyColumn.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContentItemHBValue');
    if (this.row !== null && this.row !== undefined) {
      output.writeFieldBegin('row', Thrift.Type.STRUCT, 1);
      this.row.write(output);
      output.writeFieldEnd();
    }
    if (this.column !== null && this.column !== undefined) {
      output.writeFieldBegin('column', Thrift.Type.STRUCT, 2);
      this.column.write(output);
      output.writeFieldEnd();
    }
    if (this.originalColumn !== null && this.originalColumn !== undefined) {
      output.writeFieldBegin('originalColumn', Thrift.Type.STRUCT, 3);
      this.originalColumn.write(output);
      output.writeFieldEnd();
    }
    if (this.keyColumn !== null && this.keyColumn !== undefined) {
      output.writeFieldBegin('keyColumn', Thrift.Type.STRUCT, 4);
      this.keyColumn.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
ContentItemValue = class {
  constructor(args) {
    this.strValue = null;
    this.hbValue = null;
    this.strValue2 = null;
    if (args) {
      if (args.strValue !== undefined && args.strValue !== null) {
        this.strValue = args.strValue;
      }
      if (args.hbValue !== undefined && args.hbValue !== null) {
        this.hbValue = new ContentItemHBValue(args.hbValue);
      }
      if (args.strValue2 !== undefined && args.strValue2 !== null) {
        this.strValue2 = args.strValue2;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.strValue = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.hbValue = new ContentItemHBValue();
          this.hbValue.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.strValue2 = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContentItemValue');
    if (this.strValue !== null && this.strValue !== undefined) {
      output.writeFieldBegin('strValue', Thrift.Type.STRING, 1);
      output.writeString(this.strValue);
      output.writeFieldEnd();
    }
    if (this.hbValue !== null && this.hbValue !== undefined) {
      output.writeFieldBegin('hbValue', Thrift.Type.STRUCT, 2);
      this.hbValue.write(output);
      output.writeFieldEnd();
    }
    if (this.strValue2 !== null && this.strValue2 !== undefined) {
      output.writeFieldBegin('strValue2', Thrift.Type.STRING, 3);
      output.writeString(this.strValue2);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
ContentTableDefinition = class {
  constructor(args) {
    this.id = null;
    this.viewMode = null;
    this.selectMode = null;
    this.height = null;
    this.rowHeight = null;
    this.columnDefenition = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.viewMode !== undefined && args.viewMode !== null) {
        this.viewMode = args.viewMode;
      }
      if (args.selectMode !== undefined && args.selectMode !== null) {
        this.selectMode = args.selectMode;
      }
      if (args.height !== undefined && args.height !== null) {
        this.height = args.height;
      }
      if (args.rowHeight !== undefined && args.rowHeight !== null) {
        this.rowHeight = args.rowHeight;
      }
      if (args.columnDefenition !== undefined && args.columnDefenition !== null) {
        this.columnDefenition = Thrift.copyList(args.columnDefenition, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.viewMode = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.selectMode = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.height = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.rowHeight = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.columnDefenition = [];
          const _rtmp326 = input.readListBegin();
          const _size25 = _rtmp326.size || 0;
          for (let _i27 = 0; _i27 < _size25; ++_i27) {
            let elem28 = null;
            elem28 = new ContentItem();
            elem28.read(input);
            this.columnDefenition.push(elem28);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContentTableDefinition');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.viewMode !== null && this.viewMode !== undefined) {
      output.writeFieldBegin('viewMode', Thrift.Type.I32, 2);
      output.writeI32(this.viewMode);
      output.writeFieldEnd();
    }
    if (this.selectMode !== null && this.selectMode !== undefined) {
      output.writeFieldBegin('selectMode', Thrift.Type.I32, 3);
      output.writeI32(this.selectMode);
      output.writeFieldEnd();
    }
    if (this.height !== null && this.height !== undefined) {
      output.writeFieldBegin('height', Thrift.Type.STRING, 4);
      output.writeString(this.height);
      output.writeFieldEnd();
    }
    if (this.rowHeight !== null && this.rowHeight !== undefined) {
      output.writeFieldBegin('rowHeight', Thrift.Type.STRING, 5);
      output.writeString(this.rowHeight);
      output.writeFieldEnd();
    }
    if (this.columnDefenition !== null && this.columnDefenition !== undefined) {
      output.writeFieldBegin('columnDefenition', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.columnDefenition.length);
      for (let iter29 in this.columnDefenition) {
        if (this.columnDefenition.hasOwnProperty(iter29)) {
          iter29 = this.columnDefenition[iter29];
          iter29.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
ContentItem = class {
  constructor(args) {
    this.id = null;
    this.oName = null;
    this.value = null;
    this.type = null;
    this.search = null;
    this.requared = null;
    this.readOnly = null;
    this.order = null;
    this.descriptionContItem = null;
    this.showType = null;
    this.tabId = null;
    this.key = null;
    this.showPlace = null;
    this.copyValue = null;
    this.handBookId = null;
    this.users = null;
    this.tableDefenition = null;
    this.tableKey = null;
    this.rowNumber = null;
    this.childItems = null;
    this.availableUsers = null;
    this.tMask = null;
    this.listView = null;
    this.visible = null;
    this.visibleScript = null;
    this.readonlyScript = null;
    this.onChangeScript = null;
    this.fields = null;
    this.attributes = null;
    this.tMaskDesc = null;
    this.displayedName = null;
    this.department = null;
    this.attachment = null;
    this.quickFill = null;
    this.onlyActiveUser = null;
    this.maxUserCount = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.oName !== undefined && args.oName !== null) {
        this.oName = args.oName;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = new ContentItemValue(args.value);
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.search !== undefined && args.search !== null) {
        this.search = args.search;
      }
      if (args.requared !== undefined && args.requared !== null) {
        this.requared = args.requared;
      }
      if (args.readOnly !== undefined && args.readOnly !== null) {
        this.readOnly = args.readOnly;
      }
      if (args.order !== undefined && args.order !== null) {
        this.order = args.order;
      }
      if (args.descriptionContItem !== undefined && args.descriptionContItem !== null) {
        this.descriptionContItem = args.descriptionContItem;
      }
      if (args.showType !== undefined && args.showType !== null) {
        this.showType = args.showType;
      }
      if (args.tabId !== undefined && args.tabId !== null) {
        this.tabId = args.tabId;
      }
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.showPlace !== undefined && args.showPlace !== null) {
        this.showPlace = args.showPlace;
      }
      if (args.copyValue !== undefined && args.copyValue !== null) {
        this.copyValue = args.copyValue;
      }
      if (args.handBookId !== undefined && args.handBookId !== null) {
        this.handBookId = args.handBookId;
      }
      if (args.users !== undefined && args.users !== null) {
        this.users = Thrift.copyList(args.users, [UserOrGroup]);
      }
      if (args.tableDefenition !== undefined && args.tableDefenition !== null) {
        this.tableDefenition = new ContentTableDefinition(args.tableDefenition);
      }
      if (args.tableKey !== undefined && args.tableKey !== null) {
        this.tableKey = args.tableKey;
      }
      if (args.rowNumber !== undefined && args.rowNumber !== null) {
        this.rowNumber = args.rowNumber;
      }
      if (args.childItems !== undefined && args.childItems !== null) {
        this.childItems = Thrift.copyList(args.childItems, [null]);
      }
      if (args.availableUsers !== undefined && args.availableUsers !== null) {
        this.availableUsers = Thrift.copyList(args.availableUsers, [UserOrGroup]);
      }
      if (args.tMask !== undefined && args.tMask !== null) {
        this.tMask = args.tMask;
      }
      if (args.listView !== undefined && args.listView !== null) {
        this.listView = args.listView;
      }
      if (args.visible !== undefined && args.visible !== null) {
        this.visible = args.visible;
      }
      if (args.visibleScript !== undefined && args.visibleScript !== null) {
        this.visibleScript = args.visibleScript;
      }
      if (args.readonlyScript !== undefined && args.readonlyScript !== null) {
        this.readonlyScript = args.readonlyScript;
      }
      if (args.onChangeScript !== undefined && args.onChangeScript !== null) {
        this.onChangeScript = args.onChangeScript;
      }
      if (args.fields !== undefined && args.fields !== null) {
        this.fields = Thrift.copyList(args.fields, [null]);
      }
      if (args.attributes !== undefined && args.attributes !== null) {
        this.attributes = args.attributes;
      }
      if (args.tMaskDesc !== undefined && args.tMaskDesc !== null) {
        this.tMaskDesc = args.tMaskDesc;
      }
      if (args.displayedName !== undefined && args.displayedName !== null) {
        this.displayedName = args.displayedName;
      }
      if (args.department !== undefined && args.department !== null) {
        this.department = new Department(args.department);
      }
      if (args.attachment !== undefined && args.attachment !== null) {
        this.attachment = new Attachment(args.attachment);
      }
      if (args.quickFill !== undefined && args.quickFill !== null) {
        this.quickFill = args.quickFill;
      }
      if (args.onlyActiveUser !== undefined && args.onlyActiveUser !== null) {
        this.onlyActiveUser = args.onlyActiveUser;
      }
      if (args.maxUserCount !== undefined && args.maxUserCount !== null) {
        this.maxUserCount = args.maxUserCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.oName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new ContentItemValue();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.search = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.requared = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.readOnly = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.order = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.descriptionContItem = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.showType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.tabId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I32) {
          this.showPlace = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.BOOL) {
          this.copyValue = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.handBookId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.LIST) {
          this.users = [];
          const _rtmp331 = input.readListBegin();
          const _size30 = _rtmp331.size || 0;
          for (let _i32 = 0; _i32 < _size30; ++_i32) {
            let elem33 = null;
            elem33 = new UserOrGroup();
            elem33.read(input);
            this.users.push(elem33);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRUCT) {
          this.tableDefenition = new ContentTableDefinition();
          this.tableDefenition.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.STRING) {
          this.tableKey = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.I32) {
          this.rowNumber = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.LIST) {
          this.childItems = [];
          const _rtmp335 = input.readListBegin();
          const _size34 = _rtmp335.size || 0;
          for (let _i36 = 0; _i36 < _size34; ++_i36) {
            let elem37 = null;
            elem37 = new ContentItem();
            elem37.read(input);
            this.childItems.push(elem37);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.LIST) {
          this.availableUsers = [];
          const _rtmp339 = input.readListBegin();
          const _size38 = _rtmp339.size || 0;
          for (let _i40 = 0; _i40 < _size38; ++_i40) {
            let elem41 = null;
            elem41 = new UserOrGroup();
            elem41.read(input);
            this.availableUsers.push(elem41);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRING) {
          this.tMask = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.BOOL) {
          this.listView = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.BOOL) {
          this.visible = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.STRING) {
          this.visibleScript = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.STRING) {
          this.readonlyScript = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.STRING) {
          this.onChangeScript = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.LIST) {
          this.fields = [];
          const _rtmp343 = input.readListBegin();
          const _size42 = _rtmp343.size || 0;
          for (let _i44 = 0; _i44 < _size42; ++_i44) {
            let elem45 = null;
            elem45 = input.readString().value;
            this.fields.push(elem45);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 29:
        if (ftype == Thrift.Type.STRING) {
          this.attributes = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 30:
        if (ftype == Thrift.Type.STRING) {
          this.tMaskDesc = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.STRING) {
          this.displayedName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.STRUCT) {
          this.department = new Department();
          this.department.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 33:
        if (ftype == Thrift.Type.STRUCT) {
          this.attachment = new Attachment();
          this.attachment.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 34:
        if (ftype == Thrift.Type.BOOL) {
          this.quickFill = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 35:
        if (ftype == Thrift.Type.BOOL) {
          this.onlyActiveUser = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 36:
        if (ftype == Thrift.Type.I32) {
          this.maxUserCount = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContentItem');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.oName !== null && this.oName !== undefined) {
      output.writeFieldBegin('oName', Thrift.Type.STRING, 2);
      output.writeString(this.oName);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 3);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 4);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.search !== null && this.search !== undefined) {
      output.writeFieldBegin('search', Thrift.Type.BOOL, 5);
      output.writeBool(this.search);
      output.writeFieldEnd();
    }
    if (this.requared !== null && this.requared !== undefined) {
      output.writeFieldBegin('requared', Thrift.Type.BOOL, 6);
      output.writeBool(this.requared);
      output.writeFieldEnd();
    }
    if (this.readOnly !== null && this.readOnly !== undefined) {
      output.writeFieldBegin('readOnly', Thrift.Type.BOOL, 7);
      output.writeBool(this.readOnly);
      output.writeFieldEnd();
    }
    if (this.order !== null && this.order !== undefined) {
      output.writeFieldBegin('order', Thrift.Type.I32, 8);
      output.writeI32(this.order);
      output.writeFieldEnd();
    }
    if (this.descriptionContItem !== null && this.descriptionContItem !== undefined) {
      output.writeFieldBegin('descriptionContItem', Thrift.Type.STRING, 9);
      output.writeString(this.descriptionContItem);
      output.writeFieldEnd();
    }
    if (this.showType !== null && this.showType !== undefined) {
      output.writeFieldBegin('showType', Thrift.Type.I32, 10);
      output.writeI32(this.showType);
      output.writeFieldEnd();
    }
    if (this.tabId !== null && this.tabId !== undefined) {
      output.writeFieldBegin('tabId', Thrift.Type.STRING, 11);
      output.writeString(this.tabId);
      output.writeFieldEnd();
    }
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 12);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.showPlace !== null && this.showPlace !== undefined) {
      output.writeFieldBegin('showPlace', Thrift.Type.I32, 13);
      output.writeI32(this.showPlace);
      output.writeFieldEnd();
    }
    if (this.copyValue !== null && this.copyValue !== undefined) {
      output.writeFieldBegin('copyValue', Thrift.Type.BOOL, 14);
      output.writeBool(this.copyValue);
      output.writeFieldEnd();
    }
    if (this.handBookId !== null && this.handBookId !== undefined) {
      output.writeFieldBegin('handBookId', Thrift.Type.STRING, 15);
      output.writeString(this.handBookId);
      output.writeFieldEnd();
    }
    if (this.users !== null && this.users !== undefined) {
      output.writeFieldBegin('users', Thrift.Type.LIST, 16);
      output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
      for (let iter46 in this.users) {
        if (this.users.hasOwnProperty(iter46)) {
          iter46 = this.users[iter46];
          iter46.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.tableDefenition !== null && this.tableDefenition !== undefined) {
      output.writeFieldBegin('tableDefenition', Thrift.Type.STRUCT, 17);
      this.tableDefenition.write(output);
      output.writeFieldEnd();
    }
    if (this.tableKey !== null && this.tableKey !== undefined) {
      output.writeFieldBegin('tableKey', Thrift.Type.STRING, 18);
      output.writeString(this.tableKey);
      output.writeFieldEnd();
    }
    if (this.rowNumber !== null && this.rowNumber !== undefined) {
      output.writeFieldBegin('rowNumber', Thrift.Type.I32, 19);
      output.writeI32(this.rowNumber);
      output.writeFieldEnd();
    }
    if (this.childItems !== null && this.childItems !== undefined) {
      output.writeFieldBegin('childItems', Thrift.Type.LIST, 20);
      output.writeListBegin(Thrift.Type.STRUCT, this.childItems.length);
      for (let iter47 in this.childItems) {
        if (this.childItems.hasOwnProperty(iter47)) {
          iter47 = this.childItems[iter47];
          iter47.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.availableUsers !== null && this.availableUsers !== undefined) {
      output.writeFieldBegin('availableUsers', Thrift.Type.LIST, 21);
      output.writeListBegin(Thrift.Type.STRUCT, this.availableUsers.length);
      for (let iter48 in this.availableUsers) {
        if (this.availableUsers.hasOwnProperty(iter48)) {
          iter48 = this.availableUsers[iter48];
          iter48.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.tMask !== null && this.tMask !== undefined) {
      output.writeFieldBegin('tMask', Thrift.Type.STRING, 22);
      output.writeString(this.tMask);
      output.writeFieldEnd();
    }
    if (this.listView !== null && this.listView !== undefined) {
      output.writeFieldBegin('listView', Thrift.Type.BOOL, 23);
      output.writeBool(this.listView);
      output.writeFieldEnd();
    }
    if (this.visible !== null && this.visible !== undefined) {
      output.writeFieldBegin('visible', Thrift.Type.BOOL, 24);
      output.writeBool(this.visible);
      output.writeFieldEnd();
    }
    if (this.visibleScript !== null && this.visibleScript !== undefined) {
      output.writeFieldBegin('visibleScript', Thrift.Type.STRING, 25);
      output.writeString(this.visibleScript);
      output.writeFieldEnd();
    }
    if (this.readonlyScript !== null && this.readonlyScript !== undefined) {
      output.writeFieldBegin('readonlyScript', Thrift.Type.STRING, 26);
      output.writeString(this.readonlyScript);
      output.writeFieldEnd();
    }
    if (this.onChangeScript !== null && this.onChangeScript !== undefined) {
      output.writeFieldBegin('onChangeScript', Thrift.Type.STRING, 27);
      output.writeString(this.onChangeScript);
      output.writeFieldEnd();
    }
    if (this.fields !== null && this.fields !== undefined) {
      output.writeFieldBegin('fields', Thrift.Type.LIST, 28);
      output.writeListBegin(Thrift.Type.STRING, this.fields.length);
      for (let iter49 in this.fields) {
        if (this.fields.hasOwnProperty(iter49)) {
          iter49 = this.fields[iter49];
          output.writeString(iter49);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.attributes !== null && this.attributes !== undefined) {
      output.writeFieldBegin('attributes', Thrift.Type.STRING, 29);
      output.writeString(this.attributes);
      output.writeFieldEnd();
    }
    if (this.tMaskDesc !== null && this.tMaskDesc !== undefined) {
      output.writeFieldBegin('tMaskDesc', Thrift.Type.STRING, 30);
      output.writeString(this.tMaskDesc);
      output.writeFieldEnd();
    }
    if (this.displayedName !== null && this.displayedName !== undefined) {
      output.writeFieldBegin('displayedName', Thrift.Type.STRING, 31);
      output.writeString(this.displayedName);
      output.writeFieldEnd();
    }
    if (this.department !== null && this.department !== undefined) {
      output.writeFieldBegin('department', Thrift.Type.STRUCT, 32);
      this.department.write(output);
      output.writeFieldEnd();
    }
    if (this.attachment !== null && this.attachment !== undefined) {
      output.writeFieldBegin('attachment', Thrift.Type.STRUCT, 33);
      this.attachment.write(output);
      output.writeFieldEnd();
    }
    if (this.quickFill !== null && this.quickFill !== undefined) {
      output.writeFieldBegin('quickFill', Thrift.Type.BOOL, 34);
      output.writeBool(this.quickFill);
      output.writeFieldEnd();
    }
    if (this.onlyActiveUser !== null && this.onlyActiveUser !== undefined) {
      output.writeFieldBegin('onlyActiveUser', Thrift.Type.BOOL, 35);
      output.writeBool(this.onlyActiveUser);
      output.writeFieldEnd();
    }
    if (this.maxUserCount !== null && this.maxUserCount !== undefined) {
      output.writeFieldBegin('maxUserCount', Thrift.Type.I32, 36);
      output.writeI32(this.maxUserCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
SimpleDocumentPatternOrGroup = class {
  constructor(args) {
    this.id = null;
    this.oName = null;
    this.oDescription = null;
    this.ids = null;
    this.order = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.oName !== undefined && args.oName !== null) {
        this.oName = args.oName;
      }
      if (args.oDescription !== undefined && args.oDescription !== null) {
        this.oDescription = args.oDescription;
      }
      if (args.ids !== undefined && args.ids !== null) {
        this.ids = Thrift.copyList(args.ids, [null]);
      }
      if (args.order !== undefined && args.order !== null) {
        this.order = args.order;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.oName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.oDescription = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.ids = [];
          const _rtmp351 = input.readListBegin();
          const _size50 = _rtmp351.size || 0;
          for (let _i52 = 0; _i52 < _size50; ++_i52) {
            let elem53 = null;
            elem53 = input.readString().value;
            this.ids.push(elem53);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.order = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SimpleDocumentPatternOrGroup');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.oName !== null && this.oName !== undefined) {
      output.writeFieldBegin('oName', Thrift.Type.STRING, 2);
      output.writeString(this.oName);
      output.writeFieldEnd();
    }
    if (this.oDescription !== null && this.oDescription !== undefined) {
      output.writeFieldBegin('oDescription', Thrift.Type.STRING, 3);
      output.writeString(this.oDescription);
      output.writeFieldEnd();
    }
    if (this.ids !== null && this.ids !== undefined) {
      output.writeFieldBegin('ids', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.ids.length);
      for (let iter54 in this.ids) {
        if (this.ids.hasOwnProperty(iter54)) {
          iter54 = this.ids[iter54];
          output.writeString(iter54);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.order !== null && this.order !== undefined) {
      output.writeFieldBegin('order', Thrift.Type.I32, 5);
      output.writeI32(this.order);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
NomenclatureNumber = class {
  constructor(args) {
    this.id = null;
    this.oName = null;
    this.numberPattern = null;
    this.currentSequenceValue = null;
    this.accountId = null;
    this.account = null;
    this.nomenclatureGroup = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.oName !== undefined && args.oName !== null) {
        this.oName = args.oName;
      }
      if (args.numberPattern !== undefined && args.numberPattern !== null) {
        this.numberPattern = args.numberPattern;
      }
      if (args.currentSequenceValue !== undefined && args.currentSequenceValue !== null) {
        this.currentSequenceValue = args.currentSequenceValue;
      }
      if (args.accountId !== undefined && args.accountId !== null) {
        this.accountId = args.accountId;
      }
      if (args.account !== undefined && args.account !== null) {
        this.account = new Account(args.account);
      }
      if (args.nomenclatureGroup !== undefined && args.nomenclatureGroup !== null) {
        this.nomenclatureGroup = new NomenclatureGroup(args.nomenclatureGroup);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.oName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.numberPattern = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.currentSequenceValue = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.accountId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.account = new Account();
          this.account.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.nomenclatureGroup = new NomenclatureGroup();
          this.nomenclatureGroup.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('NomenclatureNumber');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.oName !== null && this.oName !== undefined) {
      output.writeFieldBegin('oName', Thrift.Type.STRING, 2);
      output.writeString(this.oName);
      output.writeFieldEnd();
    }
    if (this.numberPattern !== null && this.numberPattern !== undefined) {
      output.writeFieldBegin('numberPattern', Thrift.Type.STRING, 3);
      output.writeString(this.numberPattern);
      output.writeFieldEnd();
    }
    if (this.currentSequenceValue !== null && this.currentSequenceValue !== undefined) {
      output.writeFieldBegin('currentSequenceValue', Thrift.Type.I64, 4);
      output.writeI64(this.currentSequenceValue);
      output.writeFieldEnd();
    }
    if (this.accountId !== null && this.accountId !== undefined) {
      output.writeFieldBegin('accountId', Thrift.Type.STRING, 5);
      output.writeString(this.accountId);
      output.writeFieldEnd();
    }
    if (this.account !== null && this.account !== undefined) {
      output.writeFieldBegin('account', Thrift.Type.STRUCT, 6);
      this.account.write(output);
      output.writeFieldEnd();
    }
    if (this.nomenclatureGroup !== null && this.nomenclatureGroup !== undefined) {
      output.writeFieldBegin('nomenclatureGroup', Thrift.Type.STRUCT, 7);
      this.nomenclatureGroup.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
NomenclatureGroup = class {
  constructor(args) {
    this.id = null;
    this.oName = null;
    this.code = null;
    this.storageTerm = null;
    this.articleNumber = null;
    this.remark = null;
    this.nomenclatureNumbers = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.oName !== undefined && args.oName !== null) {
        this.oName = args.oName;
      }
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.storageTerm !== undefined && args.storageTerm !== null) {
        this.storageTerm = args.storageTerm;
      }
      if (args.articleNumber !== undefined && args.articleNumber !== null) {
        this.articleNumber = args.articleNumber;
      }
      if (args.remark !== undefined && args.remark !== null) {
        this.remark = args.remark;
      }
      if (args.nomenclatureNumbers !== undefined && args.nomenclatureNumbers !== null) {
        this.nomenclatureNumbers = Thrift.copyList(args.nomenclatureNumbers, [NomenclatureNumber]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.oName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.code = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.storageTerm = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.articleNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.remark = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.LIST) {
          this.nomenclatureNumbers = [];
          const _rtmp356 = input.readListBegin();
          const _size55 = _rtmp356.size || 0;
          for (let _i57 = 0; _i57 < _size55; ++_i57) {
            let elem58 = null;
            elem58 = new NomenclatureNumber();
            elem58.read(input);
            this.nomenclatureNumbers.push(elem58);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('NomenclatureGroup');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.oName !== null && this.oName !== undefined) {
      output.writeFieldBegin('oName', Thrift.Type.STRING, 2);
      output.writeString(this.oName);
      output.writeFieldEnd();
    }
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.STRING, 3);
      output.writeString(this.code);
      output.writeFieldEnd();
    }
    if (this.storageTerm !== null && this.storageTerm !== undefined) {
      output.writeFieldBegin('storageTerm', Thrift.Type.STRING, 4);
      output.writeString(this.storageTerm);
      output.writeFieldEnd();
    }
    if (this.articleNumber !== null && this.articleNumber !== undefined) {
      output.writeFieldBegin('articleNumber', Thrift.Type.STRING, 5);
      output.writeString(this.articleNumber);
      output.writeFieldEnd();
    }
    if (this.remark !== null && this.remark !== undefined) {
      output.writeFieldBegin('remark', Thrift.Type.STRING, 6);
      output.writeString(this.remark);
      output.writeFieldEnd();
    }
    if (this.nomenclatureNumbers !== null && this.nomenclatureNumbers !== undefined) {
      output.writeFieldBegin('nomenclatureNumbers', Thrift.Type.LIST, 7);
      output.writeListBegin(Thrift.Type.STRUCT, this.nomenclatureNumbers.length);
      for (let iter59 in this.nomenclatureNumbers) {
        if (this.nomenclatureNumbers.hasOwnProperty(iter59)) {
          iter59 = this.nomenclatureNumbers[iter59];
          iter59.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentPattern = class {
  constructor(args) {
    this.id = null;
    this.nameDocPattern = null;
    this.descriptionDocPattern = null;
    this.creatorId = null;
    this.modifierId = null;
    this.createDate = null;
    this.modifiedDate = null;
    this.deleteDate = null;
    this.content = null;
    this.isValidState = null;
    this.nomenclatureNumber = null;
    this.documentPatternGroup = null;
    this.scMask = null;
    this.controlDate = null;
    this.useSC = null;
    this.useDocNumber = null;
    this.needGeneratePdf = null;
    this.order = null;
    this.startDocNumber = null;
    this.currentDocNumber = null;
    this.account = null;
    this.hideAuto = null;
    this.hideExt = null;
    this.meetingPattern = null;
    this.patternType = null;
    this.autoGenerateDocName = null;
    this.docNamePattern = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.nameDocPattern !== undefined && args.nameDocPattern !== null) {
        this.nameDocPattern = args.nameDocPattern;
      }
      if (args.descriptionDocPattern !== undefined && args.descriptionDocPattern !== null) {
        this.descriptionDocPattern = args.descriptionDocPattern;
      }
      if (args.creatorId !== undefined && args.creatorId !== null) {
        this.creatorId = args.creatorId;
      }
      if (args.modifierId !== undefined && args.modifierId !== null) {
        this.modifierId = args.modifierId;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.modifiedDate !== undefined && args.modifiedDate !== null) {
        this.modifiedDate = args.modifiedDate;
      }
      if (args.deleteDate !== undefined && args.deleteDate !== null) {
        this.deleteDate = args.deleteDate;
      }
      if (args.content !== undefined && args.content !== null) {
        this.content = Thrift.copyList(args.content, [ContentItem]);
      }
      if (args.isValidState !== undefined && args.isValidState !== null) {
        this.isValidState = args.isValidState;
      }
      if (args.nomenclatureNumber !== undefined && args.nomenclatureNumber !== null) {
        this.nomenclatureNumber = new NomenclatureNumber(args.nomenclatureNumber);
      }
      if (args.documentPatternGroup !== undefined && args.documentPatternGroup !== null) {
        this.documentPatternGroup = new DocumentPatternGroup(args.documentPatternGroup);
      }
      if (args.scMask !== undefined && args.scMask !== null) {
        this.scMask = args.scMask;
      }
      if (args.controlDate !== undefined && args.controlDate !== null) {
        this.controlDate = args.controlDate;
      }
      if (args.useSC !== undefined && args.useSC !== null) {
        this.useSC = args.useSC;
      }
      if (args.useDocNumber !== undefined && args.useDocNumber !== null) {
        this.useDocNumber = args.useDocNumber;
      }
      if (args.needGeneratePdf !== undefined && args.needGeneratePdf !== null) {
        this.needGeneratePdf = args.needGeneratePdf;
      }
      if (args.order !== undefined && args.order !== null) {
        this.order = args.order;
      }
      if (args.startDocNumber !== undefined && args.startDocNumber !== null) {
        this.startDocNumber = args.startDocNumber;
      }
      if (args.currentDocNumber !== undefined && args.currentDocNumber !== null) {
        this.currentDocNumber = args.currentDocNumber;
      }
      if (args.account !== undefined && args.account !== null) {
        this.account = new Account(args.account);
      }
      if (args.hideAuto !== undefined && args.hideAuto !== null) {
        this.hideAuto = args.hideAuto;
      }
      if (args.hideExt !== undefined && args.hideExt !== null) {
        this.hideExt = args.hideExt;
      }
      if (args.meetingPattern !== undefined && args.meetingPattern !== null) {
        this.meetingPattern = new DocumentPattern(args.meetingPattern);
      }
      if (args.patternType !== undefined && args.patternType !== null) {
        this.patternType = args.patternType;
      }
      if (args.autoGenerateDocName !== undefined && args.autoGenerateDocName !== null) {
        this.autoGenerateDocName = args.autoGenerateDocName;
      }
      if (args.docNamePattern !== undefined && args.docNamePattern !== null) {
        this.docNamePattern = args.docNamePattern;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.nameDocPattern = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.descriptionDocPattern = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.creatorId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.modifierId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.modifiedDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.deleteDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.LIST) {
          this.content = [];
          const _rtmp361 = input.readListBegin();
          const _size60 = _rtmp361.size || 0;
          for (let _i62 = 0; _i62 < _size60; ++_i62) {
            let elem63 = null;
            elem63 = new ContentItem();
            elem63.read(input);
            this.content.push(elem63);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.BOOL) {
          this.isValidState = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRUCT) {
          this.nomenclatureNumber = new NomenclatureNumber();
          this.nomenclatureNumber.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRUCT) {
          this.documentPatternGroup = new DocumentPatternGroup();
          this.documentPatternGroup.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRING) {
          this.scMask = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.controlDate = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.BOOL) {
          this.useSC = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.BOOL) {
          this.useDocNumber = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.BOOL) {
          this.needGeneratePdf = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.I32) {
          this.order = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.I64) {
          this.startDocNumber = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.I64) {
          this.currentDocNumber = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRUCT) {
          this.account = new Account();
          this.account.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.BOOL) {
          this.hideAuto = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.BOOL) {
          this.hideExt = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.STRUCT) {
          this.meetingPattern = new DocumentPattern();
          this.meetingPattern.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.I32) {
          this.patternType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.BOOL) {
          this.autoGenerateDocName = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.STRING) {
          this.docNamePattern = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentPattern');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.nameDocPattern !== null && this.nameDocPattern !== undefined) {
      output.writeFieldBegin('nameDocPattern', Thrift.Type.STRING, 2);
      output.writeString(this.nameDocPattern);
      output.writeFieldEnd();
    }
    if (this.descriptionDocPattern !== null && this.descriptionDocPattern !== undefined) {
      output.writeFieldBegin('descriptionDocPattern', Thrift.Type.STRING, 3);
      output.writeString(this.descriptionDocPattern);
      output.writeFieldEnd();
    }
    if (this.creatorId !== null && this.creatorId !== undefined) {
      output.writeFieldBegin('creatorId', Thrift.Type.STRING, 4);
      output.writeString(this.creatorId);
      output.writeFieldEnd();
    }
    if (this.modifierId !== null && this.modifierId !== undefined) {
      output.writeFieldBegin('modifierId', Thrift.Type.STRING, 5);
      output.writeString(this.modifierId);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 6);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.modifiedDate !== null && this.modifiedDate !== undefined) {
      output.writeFieldBegin('modifiedDate', Thrift.Type.I64, 7);
      output.writeI64(this.modifiedDate);
      output.writeFieldEnd();
    }
    if (this.deleteDate !== null && this.deleteDate !== undefined) {
      output.writeFieldBegin('deleteDate', Thrift.Type.I64, 8);
      output.writeI64(this.deleteDate);
      output.writeFieldEnd();
    }
    if (this.content !== null && this.content !== undefined) {
      output.writeFieldBegin('content', Thrift.Type.LIST, 9);
      output.writeListBegin(Thrift.Type.STRUCT, this.content.length);
      for (let iter64 in this.content) {
        if (this.content.hasOwnProperty(iter64)) {
          iter64 = this.content[iter64];
          iter64.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.isValidState !== null && this.isValidState !== undefined) {
      output.writeFieldBegin('isValidState', Thrift.Type.BOOL, 10);
      output.writeBool(this.isValidState);
      output.writeFieldEnd();
    }
    if (this.nomenclatureNumber !== null && this.nomenclatureNumber !== undefined) {
      output.writeFieldBegin('nomenclatureNumber', Thrift.Type.STRUCT, 11);
      this.nomenclatureNumber.write(output);
      output.writeFieldEnd();
    }
    if (this.documentPatternGroup !== null && this.documentPatternGroup !== undefined) {
      output.writeFieldBegin('documentPatternGroup', Thrift.Type.STRUCT, 12);
      this.documentPatternGroup.write(output);
      output.writeFieldEnd();
    }
    if (this.scMask !== null && this.scMask !== undefined) {
      output.writeFieldBegin('scMask', Thrift.Type.STRING, 13);
      output.writeString(this.scMask);
      output.writeFieldEnd();
    }
    if (this.controlDate !== null && this.controlDate !== undefined) {
      output.writeFieldBegin('controlDate', Thrift.Type.STRING, 14);
      output.writeString(this.controlDate);
      output.writeFieldEnd();
    }
    if (this.useSC !== null && this.useSC !== undefined) {
      output.writeFieldBegin('useSC', Thrift.Type.BOOL, 15);
      output.writeBool(this.useSC);
      output.writeFieldEnd();
    }
    if (this.useDocNumber !== null && this.useDocNumber !== undefined) {
      output.writeFieldBegin('useDocNumber', Thrift.Type.BOOL, 16);
      output.writeBool(this.useDocNumber);
      output.writeFieldEnd();
    }
    if (this.needGeneratePdf !== null && this.needGeneratePdf !== undefined) {
      output.writeFieldBegin('needGeneratePdf', Thrift.Type.BOOL, 17);
      output.writeBool(this.needGeneratePdf);
      output.writeFieldEnd();
    }
    if (this.order !== null && this.order !== undefined) {
      output.writeFieldBegin('order', Thrift.Type.I32, 18);
      output.writeI32(this.order);
      output.writeFieldEnd();
    }
    if (this.startDocNumber !== null && this.startDocNumber !== undefined) {
      output.writeFieldBegin('startDocNumber', Thrift.Type.I64, 19);
      output.writeI64(this.startDocNumber);
      output.writeFieldEnd();
    }
    if (this.currentDocNumber !== null && this.currentDocNumber !== undefined) {
      output.writeFieldBegin('currentDocNumber', Thrift.Type.I64, 20);
      output.writeI64(this.currentDocNumber);
      output.writeFieldEnd();
    }
    if (this.account !== null && this.account !== undefined) {
      output.writeFieldBegin('account', Thrift.Type.STRUCT, 21);
      this.account.write(output);
      output.writeFieldEnd();
    }
    if (this.hideAuto !== null && this.hideAuto !== undefined) {
      output.writeFieldBegin('hideAuto', Thrift.Type.BOOL, 22);
      output.writeBool(this.hideAuto);
      output.writeFieldEnd();
    }
    if (this.hideExt !== null && this.hideExt !== undefined) {
      output.writeFieldBegin('hideExt', Thrift.Type.BOOL, 23);
      output.writeBool(this.hideExt);
      output.writeFieldEnd();
    }
    if (this.meetingPattern !== null && this.meetingPattern !== undefined) {
      output.writeFieldBegin('meetingPattern', Thrift.Type.STRUCT, 24);
      this.meetingPattern.write(output);
      output.writeFieldEnd();
    }
    if (this.patternType !== null && this.patternType !== undefined) {
      output.writeFieldBegin('patternType', Thrift.Type.I32, 25);
      output.writeI32(this.patternType);
      output.writeFieldEnd();
    }
    if (this.autoGenerateDocName !== null && this.autoGenerateDocName !== undefined) {
      output.writeFieldBegin('autoGenerateDocName', Thrift.Type.BOOL, 26);
      output.writeBool(this.autoGenerateDocName);
      output.writeFieldEnd();
    }
    if (this.docNamePattern !== null && this.docNamePattern !== undefined) {
      output.writeFieldBegin('docNamePattern', Thrift.Type.STRING, 27);
      output.writeString(this.docNamePattern);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
FreezeDocumentPattern = class {
  constructor(args) {
    this.id = null;
    this.nameDocPattern = null;
    this.descriptionDocPattern = null;
    this.creatorId = null;
    this.modifierId = null;
    this.createDate = null;
    this.modifiedDate = null;
    this.deleteDate = null;
    this.isValidState = null;
    this.docNumberPattern = null;
    this.documentPatternGroup = null;
    this.scMask = null;
    this.controlDate = null;
    this.useSC = null;
    this.useDocNumber = null;
    this.needGeneratePdf = null;
    this.startDocNumber = null;
    this.currentDocNumber = null;
    this.account = null;
    this.originalPatternId = null;
    this.docId = null;
    this.hideAuto = null;
    this.hideExt = null;
    this.meetingPattern = null;
    this.meeting = null;
    this.patternType = null;
    this.autoGenerateDocName = null;
    this.docNamePattern = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.nameDocPattern !== undefined && args.nameDocPattern !== null) {
        this.nameDocPattern = args.nameDocPattern;
      }
      if (args.descriptionDocPattern !== undefined && args.descriptionDocPattern !== null) {
        this.descriptionDocPattern = args.descriptionDocPattern;
      }
      if (args.creatorId !== undefined && args.creatorId !== null) {
        this.creatorId = args.creatorId;
      }
      if (args.modifierId !== undefined && args.modifierId !== null) {
        this.modifierId = args.modifierId;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.modifiedDate !== undefined && args.modifiedDate !== null) {
        this.modifiedDate = args.modifiedDate;
      }
      if (args.deleteDate !== undefined && args.deleteDate !== null) {
        this.deleteDate = args.deleteDate;
      }
      if (args.isValidState !== undefined && args.isValidState !== null) {
        this.isValidState = args.isValidState;
      }
      if (args.docNumberPattern !== undefined && args.docNumberPattern !== null) {
        this.docNumberPattern = args.docNumberPattern;
      }
      if (args.documentPatternGroup !== undefined && args.documentPatternGroup !== null) {
        this.documentPatternGroup = new DocumentPatternGroup(args.documentPatternGroup);
      }
      if (args.scMask !== undefined && args.scMask !== null) {
        this.scMask = args.scMask;
      }
      if (args.controlDate !== undefined && args.controlDate !== null) {
        this.controlDate = args.controlDate;
      }
      if (args.useSC !== undefined && args.useSC !== null) {
        this.useSC = args.useSC;
      }
      if (args.useDocNumber !== undefined && args.useDocNumber !== null) {
        this.useDocNumber = args.useDocNumber;
      }
      if (args.needGeneratePdf !== undefined && args.needGeneratePdf !== null) {
        this.needGeneratePdf = args.needGeneratePdf;
      }
      if (args.startDocNumber !== undefined && args.startDocNumber !== null) {
        this.startDocNumber = args.startDocNumber;
      }
      if (args.currentDocNumber !== undefined && args.currentDocNumber !== null) {
        this.currentDocNumber = args.currentDocNumber;
      }
      if (args.account !== undefined && args.account !== null) {
        this.account = new Account(args.account);
      }
      if (args.originalPatternId !== undefined && args.originalPatternId !== null) {
        this.originalPatternId = args.originalPatternId;
      }
      if (args.docId !== undefined && args.docId !== null) {
        this.docId = args.docId;
      }
      if (args.hideAuto !== undefined && args.hideAuto !== null) {
        this.hideAuto = args.hideAuto;
      }
      if (args.hideExt !== undefined && args.hideExt !== null) {
        this.hideExt = args.hideExt;
      }
      if (args.meetingPattern !== undefined && args.meetingPattern !== null) {
        this.meetingPattern = new DocumentPattern(args.meetingPattern);
      }
      if (args.meeting !== undefined && args.meeting !== null) {
        this.meeting = new Meeting(args.meeting);
      }
      if (args.patternType !== undefined && args.patternType !== null) {
        this.patternType = args.patternType;
      }
      if (args.autoGenerateDocName !== undefined && args.autoGenerateDocName !== null) {
        this.autoGenerateDocName = args.autoGenerateDocName;
      }
      if (args.docNamePattern !== undefined && args.docNamePattern !== null) {
        this.docNamePattern = args.docNamePattern;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.nameDocPattern = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.descriptionDocPattern = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.creatorId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.modifierId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.modifiedDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.deleteDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.BOOL) {
          this.isValidState = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.docNumberPattern = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRUCT) {
          this.documentPatternGroup = new DocumentPatternGroup();
          this.documentPatternGroup.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.scMask = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRING) {
          this.controlDate = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.BOOL) {
          this.useSC = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.BOOL) {
          this.useDocNumber = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.BOOL) {
          this.needGeneratePdf = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.I64) {
          this.startDocNumber = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.I64) {
          this.currentDocNumber = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.STRUCT) {
          this.account = new Account();
          this.account.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.STRING) {
          this.originalPatternId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRING) {
          this.docId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.BOOL) {
          this.hideAuto = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.BOOL) {
          this.hideExt = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.STRUCT) {
          this.meetingPattern = new DocumentPattern();
          this.meetingPattern.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.STRUCT) {
          this.meeting = new Meeting();
          this.meeting.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.I32) {
          this.patternType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.BOOL) {
          this.autoGenerateDocName = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 33:
        if (ftype == Thrift.Type.STRING) {
          this.docNamePattern = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FreezeDocumentPattern');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.nameDocPattern !== null && this.nameDocPattern !== undefined) {
      output.writeFieldBegin('nameDocPattern', Thrift.Type.STRING, 2);
      output.writeString(this.nameDocPattern);
      output.writeFieldEnd();
    }
    if (this.descriptionDocPattern !== null && this.descriptionDocPattern !== undefined) {
      output.writeFieldBegin('descriptionDocPattern', Thrift.Type.STRING, 3);
      output.writeString(this.descriptionDocPattern);
      output.writeFieldEnd();
    }
    if (this.creatorId !== null && this.creatorId !== undefined) {
      output.writeFieldBegin('creatorId', Thrift.Type.STRING, 4);
      output.writeString(this.creatorId);
      output.writeFieldEnd();
    }
    if (this.modifierId !== null && this.modifierId !== undefined) {
      output.writeFieldBegin('modifierId', Thrift.Type.STRING, 5);
      output.writeString(this.modifierId);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 6);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.modifiedDate !== null && this.modifiedDate !== undefined) {
      output.writeFieldBegin('modifiedDate', Thrift.Type.I64, 7);
      output.writeI64(this.modifiedDate);
      output.writeFieldEnd();
    }
    if (this.deleteDate !== null && this.deleteDate !== undefined) {
      output.writeFieldBegin('deleteDate', Thrift.Type.I64, 8);
      output.writeI64(this.deleteDate);
      output.writeFieldEnd();
    }
    if (this.isValidState !== null && this.isValidState !== undefined) {
      output.writeFieldBegin('isValidState', Thrift.Type.BOOL, 9);
      output.writeBool(this.isValidState);
      output.writeFieldEnd();
    }
    if (this.docNumberPattern !== null && this.docNumberPattern !== undefined) {
      output.writeFieldBegin('docNumberPattern', Thrift.Type.STRING, 10);
      output.writeString(this.docNumberPattern);
      output.writeFieldEnd();
    }
    if (this.documentPatternGroup !== null && this.documentPatternGroup !== undefined) {
      output.writeFieldBegin('documentPatternGroup', Thrift.Type.STRUCT, 11);
      this.documentPatternGroup.write(output);
      output.writeFieldEnd();
    }
    if (this.scMask !== null && this.scMask !== undefined) {
      output.writeFieldBegin('scMask', Thrift.Type.STRING, 12);
      output.writeString(this.scMask);
      output.writeFieldEnd();
    }
    if (this.controlDate !== null && this.controlDate !== undefined) {
      output.writeFieldBegin('controlDate', Thrift.Type.STRING, 13);
      output.writeString(this.controlDate);
      output.writeFieldEnd();
    }
    if (this.useSC !== null && this.useSC !== undefined) {
      output.writeFieldBegin('useSC', Thrift.Type.BOOL, 14);
      output.writeBool(this.useSC);
      output.writeFieldEnd();
    }
    if (this.useDocNumber !== null && this.useDocNumber !== undefined) {
      output.writeFieldBegin('useDocNumber', Thrift.Type.BOOL, 15);
      output.writeBool(this.useDocNumber);
      output.writeFieldEnd();
    }
    if (this.needGeneratePdf !== null && this.needGeneratePdf !== undefined) {
      output.writeFieldBegin('needGeneratePdf', Thrift.Type.BOOL, 16);
      output.writeBool(this.needGeneratePdf);
      output.writeFieldEnd();
    }
    if (this.startDocNumber !== null && this.startDocNumber !== undefined) {
      output.writeFieldBegin('startDocNumber', Thrift.Type.I64, 17);
      output.writeI64(this.startDocNumber);
      output.writeFieldEnd();
    }
    if (this.currentDocNumber !== null && this.currentDocNumber !== undefined) {
      output.writeFieldBegin('currentDocNumber', Thrift.Type.I64, 18);
      output.writeI64(this.currentDocNumber);
      output.writeFieldEnd();
    }
    if (this.account !== null && this.account !== undefined) {
      output.writeFieldBegin('account', Thrift.Type.STRUCT, 19);
      this.account.write(output);
      output.writeFieldEnd();
    }
    if (this.originalPatternId !== null && this.originalPatternId !== undefined) {
      output.writeFieldBegin('originalPatternId', Thrift.Type.STRING, 20);
      output.writeString(this.originalPatternId);
      output.writeFieldEnd();
    }
    if (this.docId !== null && this.docId !== undefined) {
      output.writeFieldBegin('docId', Thrift.Type.STRING, 21);
      output.writeString(this.docId);
      output.writeFieldEnd();
    }
    if (this.hideAuto !== null && this.hideAuto !== undefined) {
      output.writeFieldBegin('hideAuto', Thrift.Type.BOOL, 22);
      output.writeBool(this.hideAuto);
      output.writeFieldEnd();
    }
    if (this.hideExt !== null && this.hideExt !== undefined) {
      output.writeFieldBegin('hideExt', Thrift.Type.BOOL, 23);
      output.writeBool(this.hideExt);
      output.writeFieldEnd();
    }
    if (this.meetingPattern !== null && this.meetingPattern !== undefined) {
      output.writeFieldBegin('meetingPattern', Thrift.Type.STRUCT, 24);
      this.meetingPattern.write(output);
      output.writeFieldEnd();
    }
    if (this.meeting !== null && this.meeting !== undefined) {
      output.writeFieldBegin('meeting', Thrift.Type.STRUCT, 25);
      this.meeting.write(output);
      output.writeFieldEnd();
    }
    if (this.patternType !== null && this.patternType !== undefined) {
      output.writeFieldBegin('patternType', Thrift.Type.I32, 26);
      output.writeI32(this.patternType);
      output.writeFieldEnd();
    }
    if (this.autoGenerateDocName !== null && this.autoGenerateDocName !== undefined) {
      output.writeFieldBegin('autoGenerateDocName', Thrift.Type.BOOL, 32);
      output.writeBool(this.autoGenerateDocName);
      output.writeFieldEnd();
    }
    if (this.docNamePattern !== null && this.docNamePattern !== undefined) {
      output.writeFieldBegin('docNamePattern', Thrift.Type.STRING, 33);
      output.writeString(this.docNamePattern);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
PatternToUser = class {
  constructor(args) {
    this.docPattern = null;
    this.userOrgroup = null;
    if (args) {
      if (args.docPattern !== undefined && args.docPattern !== null) {
        this.docPattern = new DocumentPattern(args.docPattern);
      }
      if (args.userOrgroup !== undefined && args.userOrgroup !== null) {
        this.userOrgroup = new UserOrGroup(args.userOrgroup);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.docPattern = new DocumentPattern();
          this.docPattern.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.userOrgroup = new UserOrGroup();
          this.userOrgroup.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PatternToUser');
    if (this.docPattern !== null && this.docPattern !== undefined) {
      output.writeFieldBegin('docPattern', Thrift.Type.STRUCT, 1);
      this.docPattern.write(output);
      output.writeFieldEnd();
    }
    if (this.userOrgroup !== null && this.userOrgroup !== undefined) {
      output.writeFieldBegin('userOrgroup', Thrift.Type.STRUCT, 2);
      this.userOrgroup.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
StageParam = class {
  constructor(args) {
    this.key = null;
    this.value = null;
    this.type = null;
    this.oName = null;
    this.multi = null;
    this.inValues = null;
    this.scriptId = null;
    this.req = null;
    this.displayName = null;
    this.subProcessAuthors = null;
    if (args) {
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.value !== undefined && args.value !== null) {
        this.value = Thrift.copyList(args.value, [null]);
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.oName !== undefined && args.oName !== null) {
        this.oName = Thrift.copyList(args.oName, [null]);
      }
      if (args.multi !== undefined && args.multi !== null) {
        this.multi = args.multi;
      }
      if (args.inValues !== undefined && args.inValues !== null) {
        this.inValues = Thrift.copyList(args.inValues, [null]);
      }
      if (args.scriptId !== undefined && args.scriptId !== null) {
        this.scriptId = new CompositeId(args.scriptId);
      }
      if (args.req !== undefined && args.req !== null) {
        this.req = args.req;
      }
      if (args.displayName !== undefined && args.displayName !== null) {
        this.displayName = args.displayName;
      }
      if (args.subProcessAuthors !== undefined && args.subProcessAuthors !== null) {
        this.subProcessAuthors = Thrift.copyList(args.subProcessAuthors, [PatternToUser]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.value = [];
          const _rtmp366 = input.readListBegin();
          const _size65 = _rtmp366.size || 0;
          for (let _i67 = 0; _i67 < _size65; ++_i67) {
            let elem68 = null;
            elem68 = input.readString().value;
            this.value.push(elem68);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.oName = [];
          const _rtmp370 = input.readListBegin();
          const _size69 = _rtmp370.size || 0;
          for (let _i71 = 0; _i71 < _size69; ++_i71) {
            let elem72 = null;
            elem72 = input.readString().value;
            this.oName.push(elem72);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.multi = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.inValues = [];
          const _rtmp374 = input.readListBegin();
          const _size73 = _rtmp374.size || 0;
          for (let _i75 = 0; _i75 < _size73; ++_i75) {
            let elem76 = null;
            elem76 = input.readString().value;
            this.inValues.push(elem76);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.scriptId = new CompositeId();
          this.scriptId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.req = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.displayName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.LIST) {
          this.subProcessAuthors = [];
          const _rtmp378 = input.readListBegin();
          const _size77 = _rtmp378.size || 0;
          for (let _i79 = 0; _i79 < _size77; ++_i79) {
            let elem80 = null;
            elem80 = new PatternToUser();
            elem80.read(input);
            this.subProcessAuthors.push(elem80);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('StageParam');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.value.length);
      for (let iter81 in this.value) {
        if (this.value.hasOwnProperty(iter81)) {
          iter81 = this.value[iter81];
          output.writeString(iter81);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 3);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.oName !== null && this.oName !== undefined) {
      output.writeFieldBegin('oName', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRING, this.oName.length);
      for (let iter82 in this.oName) {
        if (this.oName.hasOwnProperty(iter82)) {
          iter82 = this.oName[iter82];
          output.writeString(iter82);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.multi !== null && this.multi !== undefined) {
      output.writeFieldBegin('multi', Thrift.Type.BOOL, 5);
      output.writeBool(this.multi);
      output.writeFieldEnd();
    }
    if (this.inValues !== null && this.inValues !== undefined) {
      output.writeFieldBegin('inValues', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRING, this.inValues.length);
      for (let iter83 in this.inValues) {
        if (this.inValues.hasOwnProperty(iter83)) {
          iter83 = this.inValues[iter83];
          output.writeString(iter83);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.scriptId !== null && this.scriptId !== undefined) {
      output.writeFieldBegin('scriptId', Thrift.Type.STRUCT, 7);
      this.scriptId.write(output);
      output.writeFieldEnd();
    }
    if (this.req !== null && this.req !== undefined) {
      output.writeFieldBegin('req', Thrift.Type.BOOL, 8);
      output.writeBool(this.req);
      output.writeFieldEnd();
    }
    if (this.displayName !== null && this.displayName !== undefined) {
      output.writeFieldBegin('displayName', Thrift.Type.STRING, 9);
      output.writeString(this.displayName);
      output.writeFieldEnd();
    }
    if (this.subProcessAuthors !== null && this.subProcessAuthors !== undefined) {
      output.writeFieldBegin('subProcessAuthors', Thrift.Type.LIST, 10);
      output.writeListBegin(Thrift.Type.STRUCT, this.subProcessAuthors.length);
      for (let iter84 in this.subProcessAuthors) {
        if (this.subProcessAuthors.hasOwnProperty(iter84)) {
          iter84 = this.subProcessAuthors[iter84];
          iter84.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentPatternStage = class {
  constructor(args) {
    this.id = null;
    this.documentPatternId = null;
    this.nameDocPatStage = null;
    this.descriptionDocPatStage = null;
    this.status = null;
    this.subStatus = null;
    this.actionType = null;
    this.stageReq = null;
    this.deadLine = null;
    this.graphicalParams = null;
    this.availablePatternStageId = null;
    this.movedByDecision = null;
    this.registerDocument = null;
    this.execPriority = null;
    this.dispatchState = null;
    this.hide = null;
    this.userOrGroups = null;
    this.allowAdditionalConf = null;
    this.runPerriodicall = null;
    this.startPeriod = null;
    this.nextStartPeriod = null;
    this.periodicJiraEndDate = null;
    this.periodicEndDate = null;
    this.onlineEditRule = null;
    this.onlineCommentRule = null;
    this.changeOnDraft = null;
    this.changeOnEdit = null;
    this.changeOnSetDecision = null;
    this.editDocRule = null;
    this.attachmentAddRule = null;
    this.attachmentDeleteRule = null;
    this.changeContentRule = null;
    this.canEdit = null;
    this.maxSigner = null;
    this.stageParams = null;
    this.availableDecisions = null;
    this.fmEditKey = null;
    this.fmEditPersonal = null;
    this.fmEditClose = null;
    this.fmViewKey = null;
    this.fmViewPersonal = null;
    this.fmViewClose = null;
    this.preFunctionId = null;
    this.postFunctionId = null;
    this.showDocDetails = null;
    this.showChat = null;
    this.showHistory = null;
    this.showAttachments = null;
    this.notifMoveOnEnabled = null;
    this.notifMoveOnChanel = null;
    this.notifPeriodicalEnabled = null;
    this.notifPeriodicalJira = null;
    this.notifPeriodicalChanel = null;
    this.notifCheckDeadlineEnabled = null;
    this.notifCheckDeadlineJira = null;
    this.notifCheckDeadlineChanel = null;
    this.notifCardExpiredEnabled = null;
    this.notifCardExpiredChanel = null;
    this.orderNum = null;
    this.cardActivityPeriod = null;
    this.stageContentHolders = null;
    this.signAttachmentRule = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.documentPatternId !== undefined && args.documentPatternId !== null) {
        this.documentPatternId = args.documentPatternId;
      }
      if (args.nameDocPatStage !== undefined && args.nameDocPatStage !== null) {
        this.nameDocPatStage = args.nameDocPatStage;
      }
      if (args.descriptionDocPatStage !== undefined && args.descriptionDocPatStage !== null) {
        this.descriptionDocPatStage = args.descriptionDocPatStage;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.subStatus !== undefined && args.subStatus !== null) {
        this.subStatus = args.subStatus;
      }
      if (args.actionType !== undefined && args.actionType !== null) {
        this.actionType = args.actionType;
      }
      if (args.stageReq !== undefined && args.stageReq !== null) {
        this.stageReq = args.stageReq;
      }
      if (args.deadLine !== undefined && args.deadLine !== null) {
        this.deadLine = args.deadLine;
      }
      if (args.graphicalParams !== undefined && args.graphicalParams !== null) {
        this.graphicalParams = args.graphicalParams;
      }
      if (args.availablePatternStageId !== undefined && args.availablePatternStageId !== null) {
        this.availablePatternStageId = args.availablePatternStageId;
      }
      if (args.movedByDecision !== undefined && args.movedByDecision !== null) {
        this.movedByDecision = args.movedByDecision;
      }
      if (args.registerDocument !== undefined && args.registerDocument !== null) {
        this.registerDocument = args.registerDocument;
      }
      if (args.execPriority !== undefined && args.execPriority !== null) {
        this.execPriority = args.execPriority;
      }
      if (args.dispatchState !== undefined && args.dispatchState !== null) {
        this.dispatchState = args.dispatchState;
      }
      if (args.hide !== undefined && args.hide !== null) {
        this.hide = args.hide;
      }
      if (args.userOrGroups !== undefined && args.userOrGroups !== null) {
        this.userOrGroups = Thrift.copyList(args.userOrGroups, [UserOrGroup]);
      }
      if (args.allowAdditionalConf !== undefined && args.allowAdditionalConf !== null) {
        this.allowAdditionalConf = args.allowAdditionalConf;
      }
      if (args.runPerriodicall !== undefined && args.runPerriodicall !== null) {
        this.runPerriodicall = args.runPerriodicall;
      }
      if (args.startPeriod !== undefined && args.startPeriod !== null) {
        this.startPeriod = args.startPeriod;
      }
      if (args.nextStartPeriod !== undefined && args.nextStartPeriod !== null) {
        this.nextStartPeriod = args.nextStartPeriod;
      }
      if (args.periodicJiraEndDate !== undefined && args.periodicJiraEndDate !== null) {
        this.periodicJiraEndDate = args.periodicJiraEndDate;
      }
      if (args.periodicEndDate !== undefined && args.periodicEndDate !== null) {
        this.periodicEndDate = args.periodicEndDate;
      }
      if (args.onlineEditRule !== undefined && args.onlineEditRule !== null) {
        this.onlineEditRule = new AccessRule(args.onlineEditRule);
      }
      if (args.onlineCommentRule !== undefined && args.onlineCommentRule !== null) {
        this.onlineCommentRule = new AccessRule(args.onlineCommentRule);
      }
      if (args.changeOnDraft !== undefined && args.changeOnDraft !== null) {
        this.changeOnDraft = args.changeOnDraft;
      }
      if (args.changeOnEdit !== undefined && args.changeOnEdit !== null) {
        this.changeOnEdit = new AccessRule(args.changeOnEdit);
      }
      if (args.changeOnSetDecision !== undefined && args.changeOnSetDecision !== null) {
        this.changeOnSetDecision = new AccessRule(args.changeOnSetDecision);
      }
      if (args.editDocRule !== undefined && args.editDocRule !== null) {
        this.editDocRule = new AccessRule(args.editDocRule);
      }
      if (args.attachmentAddRule !== undefined && args.attachmentAddRule !== null) {
        this.attachmentAddRule = new AccessRule(args.attachmentAddRule);
      }
      if (args.attachmentDeleteRule !== undefined && args.attachmentDeleteRule !== null) {
        this.attachmentDeleteRule = new AccessRule(args.attachmentDeleteRule);
      }
      if (args.changeContentRule !== undefined && args.changeContentRule !== null) {
        this.changeContentRule = new AccessRule(args.changeContentRule);
      }
      if (args.canEdit !== undefined && args.canEdit !== null) {
        this.canEdit = args.canEdit;
      }
      if (args.maxSigner !== undefined && args.maxSigner !== null) {
        this.maxSigner = args.maxSigner;
      }
      if (args.stageParams !== undefined && args.stageParams !== null) {
        this.stageParams = Thrift.copyList(args.stageParams, [StageParam]);
      }
      if (args.availableDecisions !== undefined && args.availableDecisions !== null) {
        this.availableDecisions = Thrift.copyList(args.availableDecisions, [null]);
      }
      if (args.fmEditKey !== undefined && args.fmEditKey !== null) {
        this.fmEditKey = args.fmEditKey;
      }
      if (args.fmEditPersonal !== undefined && args.fmEditPersonal !== null) {
        this.fmEditPersonal = args.fmEditPersonal;
      }
      if (args.fmEditClose !== undefined && args.fmEditClose !== null) {
        this.fmEditClose = args.fmEditClose;
      }
      if (args.fmViewKey !== undefined && args.fmViewKey !== null) {
        this.fmViewKey = args.fmViewKey;
      }
      if (args.fmViewPersonal !== undefined && args.fmViewPersonal !== null) {
        this.fmViewPersonal = args.fmViewPersonal;
      }
      if (args.fmViewClose !== undefined && args.fmViewClose !== null) {
        this.fmViewClose = args.fmViewClose;
      }
      if (args.preFunctionId !== undefined && args.preFunctionId !== null) {
        this.preFunctionId = new CompositeId(args.preFunctionId);
      }
      if (args.postFunctionId !== undefined && args.postFunctionId !== null) {
        this.postFunctionId = new CompositeId(args.postFunctionId);
      }
      if (args.showDocDetails !== undefined && args.showDocDetails !== null) {
        this.showDocDetails = args.showDocDetails;
      }
      if (args.showChat !== undefined && args.showChat !== null) {
        this.showChat = args.showChat;
      }
      if (args.showHistory !== undefined && args.showHistory !== null) {
        this.showHistory = args.showHistory;
      }
      if (args.showAttachments !== undefined && args.showAttachments !== null) {
        this.showAttachments = args.showAttachments;
      }
      if (args.notifMoveOnEnabled !== undefined && args.notifMoveOnEnabled !== null) {
        this.notifMoveOnEnabled = args.notifMoveOnEnabled;
      }
      if (args.notifMoveOnChanel !== undefined && args.notifMoveOnChanel !== null) {
        this.notifMoveOnChanel = args.notifMoveOnChanel;
      }
      if (args.notifPeriodicalEnabled !== undefined && args.notifPeriodicalEnabled !== null) {
        this.notifPeriodicalEnabled = args.notifPeriodicalEnabled;
      }
      if (args.notifPeriodicalJira !== undefined && args.notifPeriodicalJira !== null) {
        this.notifPeriodicalJira = args.notifPeriodicalJira;
      }
      if (args.notifPeriodicalChanel !== undefined && args.notifPeriodicalChanel !== null) {
        this.notifPeriodicalChanel = args.notifPeriodicalChanel;
      }
      if (args.notifCheckDeadlineEnabled !== undefined && args.notifCheckDeadlineEnabled !== null) {
        this.notifCheckDeadlineEnabled = args.notifCheckDeadlineEnabled;
      }
      if (args.notifCheckDeadlineJira !== undefined && args.notifCheckDeadlineJira !== null) {
        this.notifCheckDeadlineJira = args.notifCheckDeadlineJira;
      }
      if (args.notifCheckDeadlineChanel !== undefined && args.notifCheckDeadlineChanel !== null) {
        this.notifCheckDeadlineChanel = args.notifCheckDeadlineChanel;
      }
      if (args.notifCardExpiredEnabled !== undefined && args.notifCardExpiredEnabled !== null) {
        this.notifCardExpiredEnabled = args.notifCardExpiredEnabled;
      }
      if (args.notifCardExpiredChanel !== undefined && args.notifCardExpiredChanel !== null) {
        this.notifCardExpiredChanel = args.notifCardExpiredChanel;
      }
      if (args.orderNum !== undefined && args.orderNum !== null) {
        this.orderNum = args.orderNum;
      }
      if (args.cardActivityPeriod !== undefined && args.cardActivityPeriod !== null) {
        this.cardActivityPeriod = args.cardActivityPeriod;
      }
      if (args.stageContentHolders !== undefined && args.stageContentHolders !== null) {
        this.stageContentHolders = Thrift.copyList(args.stageContentHolders, [null]);
      }
      if (args.signAttachmentRule !== undefined && args.signAttachmentRule !== null) {
        this.signAttachmentRule = new AccessRule(args.signAttachmentRule);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.documentPatternId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.nameDocPatStage = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.descriptionDocPatStage = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.subStatus = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.actionType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.stageReq = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.deadLine = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.graphicalParams = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.availablePatternStageId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.movedByDecision = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.BOOL) {
          this.registerDocument = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I32) {
          this.execPriority = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I32) {
          this.dispatchState = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.BOOL) {
          this.hide = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.LIST) {
          this.userOrGroups = [];
          const _rtmp386 = input.readListBegin();
          const _size85 = _rtmp386.size || 0;
          for (let _i87 = 0; _i87 < _size85; ++_i87) {
            let elem88 = null;
            elem88 = new UserOrGroup();
            elem88.read(input);
            this.userOrGroups.push(elem88);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.BOOL) {
          this.allowAdditionalConf = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.BOOL) {
          this.runPerriodicall = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.I64) {
          this.startPeriod = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRING) {
          this.nextStartPeriod = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRING) {
          this.periodicJiraEndDate = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.I64) {
          this.periodicEndDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.STRUCT) {
          this.onlineEditRule = new AccessRule();
          this.onlineEditRule.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.STRUCT) {
          this.onlineCommentRule = new AccessRule();
          this.onlineCommentRule.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.BOOL) {
          this.changeOnDraft = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.STRUCT) {
          this.changeOnEdit = new AccessRule();
          this.changeOnEdit.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.STRUCT) {
          this.changeOnSetDecision = new AccessRule();
          this.changeOnSetDecision.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 29:
        if (ftype == Thrift.Type.STRUCT) {
          this.editDocRule = new AccessRule();
          this.editDocRule.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 30:
        if (ftype == Thrift.Type.STRUCT) {
          this.attachmentAddRule = new AccessRule();
          this.attachmentAddRule.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.STRUCT) {
          this.attachmentDeleteRule = new AccessRule();
          this.attachmentDeleteRule.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.STRUCT) {
          this.changeContentRule = new AccessRule();
          this.changeContentRule.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 33:
        if (ftype == Thrift.Type.BOOL) {
          this.canEdit = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 34:
        if (ftype == Thrift.Type.I32) {
          this.maxSigner = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 35:
        if (ftype == Thrift.Type.LIST) {
          this.stageParams = [];
          const _rtmp390 = input.readListBegin();
          const _size89 = _rtmp390.size || 0;
          for (let _i91 = 0; _i91 < _size89; ++_i91) {
            let elem92 = null;
            elem92 = new StageParam();
            elem92.read(input);
            this.stageParams.push(elem92);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 36:
        if (ftype == Thrift.Type.SET) {
          this.availableDecisions = [];
          const _rtmp394 = input.readSetBegin();
          const _size93 = _rtmp394.size || 0;
          for (let _i95 = 0; _i95 < _size93; ++_i95) {
            let elem96 = null;
            elem96 = input.readString().value;
            this.availableDecisions.push(elem96);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 37:
        if (ftype == Thrift.Type.STRING) {
          this.fmEditKey = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 38:
        if (ftype == Thrift.Type.BOOL) {
          this.fmEditPersonal = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 39:
        if (ftype == Thrift.Type.BOOL) {
          this.fmEditClose = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 40:
        if (ftype == Thrift.Type.STRING) {
          this.fmViewKey = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 41:
        if (ftype == Thrift.Type.BOOL) {
          this.fmViewPersonal = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 42:
        if (ftype == Thrift.Type.BOOL) {
          this.fmViewClose = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 43:
        if (ftype == Thrift.Type.STRUCT) {
          this.preFunctionId = new CompositeId();
          this.preFunctionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 44:
        if (ftype == Thrift.Type.STRUCT) {
          this.postFunctionId = new CompositeId();
          this.postFunctionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 45:
        if (ftype == Thrift.Type.I32) {
          this.showDocDetails = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 46:
        if (ftype == Thrift.Type.I32) {
          this.showChat = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 47:
        if (ftype == Thrift.Type.I32) {
          this.showHistory = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 48:
        if (ftype == Thrift.Type.I32) {
          this.showAttachments = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 49:
        if (ftype == Thrift.Type.BOOL) {
          this.notifMoveOnEnabled = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 50:
        if (ftype == Thrift.Type.STRING) {
          this.notifMoveOnChanel = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 51:
        if (ftype == Thrift.Type.BOOL) {
          this.notifPeriodicalEnabled = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 52:
        if (ftype == Thrift.Type.STRING) {
          this.notifPeriodicalJira = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 53:
        if (ftype == Thrift.Type.STRING) {
          this.notifPeriodicalChanel = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 54:
        if (ftype == Thrift.Type.BOOL) {
          this.notifCheckDeadlineEnabled = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 55:
        if (ftype == Thrift.Type.STRING) {
          this.notifCheckDeadlineJira = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 56:
        if (ftype == Thrift.Type.STRING) {
          this.notifCheckDeadlineChanel = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 57:
        if (ftype == Thrift.Type.BOOL) {
          this.notifCardExpiredEnabled = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 58:
        if (ftype == Thrift.Type.STRING) {
          this.notifCardExpiredChanel = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 59:
        if (ftype == Thrift.Type.I32) {
          this.orderNum = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 60:
        if (ftype == Thrift.Type.STRING) {
          this.cardActivityPeriod = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 61:
        if (ftype == Thrift.Type.LIST) {
          this.stageContentHolders = [];
          const _rtmp398 = input.readListBegin();
          const _size97 = _rtmp398.size || 0;
          for (let _i99 = 0; _i99 < _size97; ++_i99) {
            let elem100 = null;
            elem100 = new ContentHolderShowPlace();
            elem100.read(input);
            this.stageContentHolders.push(elem100);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 62:
        if (ftype == Thrift.Type.STRUCT) {
          this.signAttachmentRule = new AccessRule();
          this.signAttachmentRule.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentPatternStage');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.documentPatternId !== null && this.documentPatternId !== undefined) {
      output.writeFieldBegin('documentPatternId', Thrift.Type.STRING, 2);
      output.writeString(this.documentPatternId);
      output.writeFieldEnd();
    }
    if (this.nameDocPatStage !== null && this.nameDocPatStage !== undefined) {
      output.writeFieldBegin('nameDocPatStage', Thrift.Type.STRING, 3);
      output.writeString(this.nameDocPatStage);
      output.writeFieldEnd();
    }
    if (this.descriptionDocPatStage !== null && this.descriptionDocPatStage !== undefined) {
      output.writeFieldBegin('descriptionDocPatStage', Thrift.Type.STRING, 4);
      output.writeString(this.descriptionDocPatStage);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 5);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.subStatus !== null && this.subStatus !== undefined) {
      output.writeFieldBegin('subStatus', Thrift.Type.I32, 6);
      output.writeI32(this.subStatus);
      output.writeFieldEnd();
    }
    if (this.actionType !== null && this.actionType !== undefined) {
      output.writeFieldBegin('actionType', Thrift.Type.I32, 7);
      output.writeI32(this.actionType);
      output.writeFieldEnd();
    }
    if (this.stageReq !== null && this.stageReq !== undefined) {
      output.writeFieldBegin('stageReq', Thrift.Type.BOOL, 8);
      output.writeBool(this.stageReq);
      output.writeFieldEnd();
    }
    if (this.deadLine !== null && this.deadLine !== undefined) {
      output.writeFieldBegin('deadLine', Thrift.Type.STRING, 9);
      output.writeString(this.deadLine);
      output.writeFieldEnd();
    }
    if (this.graphicalParams !== null && this.graphicalParams !== undefined) {
      output.writeFieldBegin('graphicalParams', Thrift.Type.STRING, 10);
      output.writeString(this.graphicalParams);
      output.writeFieldEnd();
    }
    if (this.availablePatternStageId !== null && this.availablePatternStageId !== undefined) {
      output.writeFieldBegin('availablePatternStageId', Thrift.Type.STRING, 11);
      output.writeString(this.availablePatternStageId);
      output.writeFieldEnd();
    }
    if (this.movedByDecision !== null && this.movedByDecision !== undefined) {
      output.writeFieldBegin('movedByDecision', Thrift.Type.STRING, 12);
      output.writeString(this.movedByDecision);
      output.writeFieldEnd();
    }
    if (this.registerDocument !== null && this.registerDocument !== undefined) {
      output.writeFieldBegin('registerDocument', Thrift.Type.BOOL, 13);
      output.writeBool(this.registerDocument);
      output.writeFieldEnd();
    }
    if (this.execPriority !== null && this.execPriority !== undefined) {
      output.writeFieldBegin('execPriority', Thrift.Type.I32, 14);
      output.writeI32(this.execPriority);
      output.writeFieldEnd();
    }
    if (this.dispatchState !== null && this.dispatchState !== undefined) {
      output.writeFieldBegin('dispatchState', Thrift.Type.I32, 15);
      output.writeI32(this.dispatchState);
      output.writeFieldEnd();
    }
    if (this.hide !== null && this.hide !== undefined) {
      output.writeFieldBegin('hide', Thrift.Type.BOOL, 16);
      output.writeBool(this.hide);
      output.writeFieldEnd();
    }
    if (this.userOrGroups !== null && this.userOrGroups !== undefined) {
      output.writeFieldBegin('userOrGroups', Thrift.Type.LIST, 17);
      output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroups.length);
      for (let iter101 in this.userOrGroups) {
        if (this.userOrGroups.hasOwnProperty(iter101)) {
          iter101 = this.userOrGroups[iter101];
          iter101.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.allowAdditionalConf !== null && this.allowAdditionalConf !== undefined) {
      output.writeFieldBegin('allowAdditionalConf', Thrift.Type.BOOL, 18);
      output.writeBool(this.allowAdditionalConf);
      output.writeFieldEnd();
    }
    if (this.runPerriodicall !== null && this.runPerriodicall !== undefined) {
      output.writeFieldBegin('runPerriodicall', Thrift.Type.BOOL, 19);
      output.writeBool(this.runPerriodicall);
      output.writeFieldEnd();
    }
    if (this.startPeriod !== null && this.startPeriod !== undefined) {
      output.writeFieldBegin('startPeriod', Thrift.Type.I64, 20);
      output.writeI64(this.startPeriod);
      output.writeFieldEnd();
    }
    if (this.nextStartPeriod !== null && this.nextStartPeriod !== undefined) {
      output.writeFieldBegin('nextStartPeriod', Thrift.Type.STRING, 21);
      output.writeString(this.nextStartPeriod);
      output.writeFieldEnd();
    }
    if (this.periodicJiraEndDate !== null && this.periodicJiraEndDate !== undefined) {
      output.writeFieldBegin('periodicJiraEndDate', Thrift.Type.STRING, 22);
      output.writeString(this.periodicJiraEndDate);
      output.writeFieldEnd();
    }
    if (this.periodicEndDate !== null && this.periodicEndDate !== undefined) {
      output.writeFieldBegin('periodicEndDate', Thrift.Type.I64, 23);
      output.writeI64(this.periodicEndDate);
      output.writeFieldEnd();
    }
    if (this.onlineEditRule !== null && this.onlineEditRule !== undefined) {
      output.writeFieldBegin('onlineEditRule', Thrift.Type.STRUCT, 24);
      this.onlineEditRule.write(output);
      output.writeFieldEnd();
    }
    if (this.onlineCommentRule !== null && this.onlineCommentRule !== undefined) {
      output.writeFieldBegin('onlineCommentRule', Thrift.Type.STRUCT, 25);
      this.onlineCommentRule.write(output);
      output.writeFieldEnd();
    }
    if (this.changeOnDraft !== null && this.changeOnDraft !== undefined) {
      output.writeFieldBegin('changeOnDraft', Thrift.Type.BOOL, 26);
      output.writeBool(this.changeOnDraft);
      output.writeFieldEnd();
    }
    if (this.changeOnEdit !== null && this.changeOnEdit !== undefined) {
      output.writeFieldBegin('changeOnEdit', Thrift.Type.STRUCT, 27);
      this.changeOnEdit.write(output);
      output.writeFieldEnd();
    }
    if (this.changeOnSetDecision !== null && this.changeOnSetDecision !== undefined) {
      output.writeFieldBegin('changeOnSetDecision', Thrift.Type.STRUCT, 28);
      this.changeOnSetDecision.write(output);
      output.writeFieldEnd();
    }
    if (this.editDocRule !== null && this.editDocRule !== undefined) {
      output.writeFieldBegin('editDocRule', Thrift.Type.STRUCT, 29);
      this.editDocRule.write(output);
      output.writeFieldEnd();
    }
    if (this.attachmentAddRule !== null && this.attachmentAddRule !== undefined) {
      output.writeFieldBegin('attachmentAddRule', Thrift.Type.STRUCT, 30);
      this.attachmentAddRule.write(output);
      output.writeFieldEnd();
    }
    if (this.attachmentDeleteRule !== null && this.attachmentDeleteRule !== undefined) {
      output.writeFieldBegin('attachmentDeleteRule', Thrift.Type.STRUCT, 31);
      this.attachmentDeleteRule.write(output);
      output.writeFieldEnd();
    }
    if (this.changeContentRule !== null && this.changeContentRule !== undefined) {
      output.writeFieldBegin('changeContentRule', Thrift.Type.STRUCT, 32);
      this.changeContentRule.write(output);
      output.writeFieldEnd();
    }
    if (this.canEdit !== null && this.canEdit !== undefined) {
      output.writeFieldBegin('canEdit', Thrift.Type.BOOL, 33);
      output.writeBool(this.canEdit);
      output.writeFieldEnd();
    }
    if (this.maxSigner !== null && this.maxSigner !== undefined) {
      output.writeFieldBegin('maxSigner', Thrift.Type.I32, 34);
      output.writeI32(this.maxSigner);
      output.writeFieldEnd();
    }
    if (this.stageParams !== null && this.stageParams !== undefined) {
      output.writeFieldBegin('stageParams', Thrift.Type.LIST, 35);
      output.writeListBegin(Thrift.Type.STRUCT, this.stageParams.length);
      for (let iter102 in this.stageParams) {
        if (this.stageParams.hasOwnProperty(iter102)) {
          iter102 = this.stageParams[iter102];
          iter102.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.availableDecisions !== null && this.availableDecisions !== undefined) {
      output.writeFieldBegin('availableDecisions', Thrift.Type.SET, 36);
      output.writeSetBegin(Thrift.Type.STRING, this.availableDecisions.length);
      for (let iter103 in this.availableDecisions) {
        if (this.availableDecisions.hasOwnProperty(iter103)) {
          iter103 = this.availableDecisions[iter103];
          output.writeString(iter103);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.fmEditKey !== null && this.fmEditKey !== undefined) {
      output.writeFieldBegin('fmEditKey', Thrift.Type.STRING, 37);
      output.writeString(this.fmEditKey);
      output.writeFieldEnd();
    }
    if (this.fmEditPersonal !== null && this.fmEditPersonal !== undefined) {
      output.writeFieldBegin('fmEditPersonal', Thrift.Type.BOOL, 38);
      output.writeBool(this.fmEditPersonal);
      output.writeFieldEnd();
    }
    if (this.fmEditClose !== null && this.fmEditClose !== undefined) {
      output.writeFieldBegin('fmEditClose', Thrift.Type.BOOL, 39);
      output.writeBool(this.fmEditClose);
      output.writeFieldEnd();
    }
    if (this.fmViewKey !== null && this.fmViewKey !== undefined) {
      output.writeFieldBegin('fmViewKey', Thrift.Type.STRING, 40);
      output.writeString(this.fmViewKey);
      output.writeFieldEnd();
    }
    if (this.fmViewPersonal !== null && this.fmViewPersonal !== undefined) {
      output.writeFieldBegin('fmViewPersonal', Thrift.Type.BOOL, 41);
      output.writeBool(this.fmViewPersonal);
      output.writeFieldEnd();
    }
    if (this.fmViewClose !== null && this.fmViewClose !== undefined) {
      output.writeFieldBegin('fmViewClose', Thrift.Type.BOOL, 42);
      output.writeBool(this.fmViewClose);
      output.writeFieldEnd();
    }
    if (this.preFunctionId !== null && this.preFunctionId !== undefined) {
      output.writeFieldBegin('preFunctionId', Thrift.Type.STRUCT, 43);
      this.preFunctionId.write(output);
      output.writeFieldEnd();
    }
    if (this.postFunctionId !== null && this.postFunctionId !== undefined) {
      output.writeFieldBegin('postFunctionId', Thrift.Type.STRUCT, 44);
      this.postFunctionId.write(output);
      output.writeFieldEnd();
    }
    if (this.showDocDetails !== null && this.showDocDetails !== undefined) {
      output.writeFieldBegin('showDocDetails', Thrift.Type.I32, 45);
      output.writeI32(this.showDocDetails);
      output.writeFieldEnd();
    }
    if (this.showChat !== null && this.showChat !== undefined) {
      output.writeFieldBegin('showChat', Thrift.Type.I32, 46);
      output.writeI32(this.showChat);
      output.writeFieldEnd();
    }
    if (this.showHistory !== null && this.showHistory !== undefined) {
      output.writeFieldBegin('showHistory', Thrift.Type.I32, 47);
      output.writeI32(this.showHistory);
      output.writeFieldEnd();
    }
    if (this.showAttachments !== null && this.showAttachments !== undefined) {
      output.writeFieldBegin('showAttachments', Thrift.Type.I32, 48);
      output.writeI32(this.showAttachments);
      output.writeFieldEnd();
    }
    if (this.notifMoveOnEnabled !== null && this.notifMoveOnEnabled !== undefined) {
      output.writeFieldBegin('notifMoveOnEnabled', Thrift.Type.BOOL, 49);
      output.writeBool(this.notifMoveOnEnabled);
      output.writeFieldEnd();
    }
    if (this.notifMoveOnChanel !== null && this.notifMoveOnChanel !== undefined) {
      output.writeFieldBegin('notifMoveOnChanel', Thrift.Type.STRING, 50);
      output.writeString(this.notifMoveOnChanel);
      output.writeFieldEnd();
    }
    if (this.notifPeriodicalEnabled !== null && this.notifPeriodicalEnabled !== undefined) {
      output.writeFieldBegin('notifPeriodicalEnabled', Thrift.Type.BOOL, 51);
      output.writeBool(this.notifPeriodicalEnabled);
      output.writeFieldEnd();
    }
    if (this.notifPeriodicalJira !== null && this.notifPeriodicalJira !== undefined) {
      output.writeFieldBegin('notifPeriodicalJira', Thrift.Type.STRING, 52);
      output.writeString(this.notifPeriodicalJira);
      output.writeFieldEnd();
    }
    if (this.notifPeriodicalChanel !== null && this.notifPeriodicalChanel !== undefined) {
      output.writeFieldBegin('notifPeriodicalChanel', Thrift.Type.STRING, 53);
      output.writeString(this.notifPeriodicalChanel);
      output.writeFieldEnd();
    }
    if (this.notifCheckDeadlineEnabled !== null && this.notifCheckDeadlineEnabled !== undefined) {
      output.writeFieldBegin('notifCheckDeadlineEnabled', Thrift.Type.BOOL, 54);
      output.writeBool(this.notifCheckDeadlineEnabled);
      output.writeFieldEnd();
    }
    if (this.notifCheckDeadlineJira !== null && this.notifCheckDeadlineJira !== undefined) {
      output.writeFieldBegin('notifCheckDeadlineJira', Thrift.Type.STRING, 55);
      output.writeString(this.notifCheckDeadlineJira);
      output.writeFieldEnd();
    }
    if (this.notifCheckDeadlineChanel !== null && this.notifCheckDeadlineChanel !== undefined) {
      output.writeFieldBegin('notifCheckDeadlineChanel', Thrift.Type.STRING, 56);
      output.writeString(this.notifCheckDeadlineChanel);
      output.writeFieldEnd();
    }
    if (this.notifCardExpiredEnabled !== null && this.notifCardExpiredEnabled !== undefined) {
      output.writeFieldBegin('notifCardExpiredEnabled', Thrift.Type.BOOL, 57);
      output.writeBool(this.notifCardExpiredEnabled);
      output.writeFieldEnd();
    }
    if (this.notifCardExpiredChanel !== null && this.notifCardExpiredChanel !== undefined) {
      output.writeFieldBegin('notifCardExpiredChanel', Thrift.Type.STRING, 58);
      output.writeString(this.notifCardExpiredChanel);
      output.writeFieldEnd();
    }
    if (this.orderNum !== null && this.orderNum !== undefined) {
      output.writeFieldBegin('orderNum', Thrift.Type.I32, 59);
      output.writeI32(this.orderNum);
      output.writeFieldEnd();
    }
    if (this.cardActivityPeriod !== null && this.cardActivityPeriod !== undefined) {
      output.writeFieldBegin('cardActivityPeriod', Thrift.Type.STRING, 60);
      output.writeString(this.cardActivityPeriod);
      output.writeFieldEnd();
    }
    if (this.stageContentHolders !== null && this.stageContentHolders !== undefined) {
      output.writeFieldBegin('stageContentHolders', Thrift.Type.LIST, 61);
      output.writeListBegin(Thrift.Type.STRUCT, this.stageContentHolders.length);
      for (let iter104 in this.stageContentHolders) {
        if (this.stageContentHolders.hasOwnProperty(iter104)) {
          iter104 = this.stageContentHolders[iter104];
          iter104.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.signAttachmentRule !== null && this.signAttachmentRule !== undefined) {
      output.writeFieldBegin('signAttachmentRule', Thrift.Type.STRUCT, 62);
      this.signAttachmentRule.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DesicionInfo = class {
  constructor(args) {
    this.freezeStage = null;
    this.holderShowPlace = null;
    if (args) {
      if (args.freezeStage !== undefined && args.freezeStage !== null) {
        this.freezeStage = new DocumentPatternStage(args.freezeStage);
      }
      if (args.holderShowPlace !== undefined && args.holderShowPlace !== null) {
        this.holderShowPlace = Thrift.copyList(args.holderShowPlace, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.freezeStage = new DocumentPatternStage();
          this.freezeStage.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.holderShowPlace = [];
          const _rtmp3106 = input.readListBegin();
          const _size105 = _rtmp3106.size || 0;
          for (let _i107 = 0; _i107 < _size105; ++_i107) {
            let elem108 = null;
            elem108 = new ContentHolderShowPlace();
            elem108.read(input);
            this.holderShowPlace.push(elem108);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DesicionInfo');
    if (this.freezeStage !== null && this.freezeStage !== undefined) {
      output.writeFieldBegin('freezeStage', Thrift.Type.STRUCT, 1);
      this.freezeStage.write(output);
      output.writeFieldEnd();
    }
    if (this.holderShowPlace !== null && this.holderShowPlace !== undefined) {
      output.writeFieldBegin('holderShowPlace', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.holderShowPlace.length);
      for (let iter109 in this.holderShowPlace) {
        if (this.holderShowPlace.hasOwnProperty(iter109)) {
          iter109 = this.holderShowPlace[iter109];
          iter109.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentComment = class {
  constructor(args) {
    this.id = null;
    this.creatorId = null;
    this.creator = null;
    this.createDate = null;
    this.comment = null;
    this.documentId = null;
    this.executionId = null;
    this.theNewCommentId = null;
    this.oldCommentId = null;
    this.parentId = null;
    this.docSubStatusHistId = null;
    this.commentType = null;
    this.rootCreateDate = null;
    this.rootCreatorId = null;
    this.rootCreator = null;
    this.originalUser = null;
    this.modifierUser = null;
    this.modifiedDate = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.creatorId !== undefined && args.creatorId !== null) {
        this.creatorId = args.creatorId;
      }
      if (args.creator !== undefined && args.creator !== null) {
        this.creator = new UserOrGroup(args.creator);
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.comment !== undefined && args.comment !== null) {
        this.comment = args.comment;
      }
      if (args.documentId !== undefined && args.documentId !== null) {
        this.documentId = args.documentId;
      }
      if (args.executionId !== undefined && args.executionId !== null) {
        this.executionId = args.executionId;
      }
      if (args.theNewCommentId !== undefined && args.theNewCommentId !== null) {
        this.theNewCommentId = args.theNewCommentId;
      }
      if (args.oldCommentId !== undefined && args.oldCommentId !== null) {
        this.oldCommentId = args.oldCommentId;
      }
      if (args.parentId !== undefined && args.parentId !== null) {
        this.parentId = args.parentId;
      }
      if (args.docSubStatusHistId !== undefined && args.docSubStatusHistId !== null) {
        this.docSubStatusHistId = args.docSubStatusHistId;
      }
      if (args.commentType !== undefined && args.commentType !== null) {
        this.commentType = args.commentType;
      }
      if (args.rootCreateDate !== undefined && args.rootCreateDate !== null) {
        this.rootCreateDate = args.rootCreateDate;
      }
      if (args.rootCreatorId !== undefined && args.rootCreatorId !== null) {
        this.rootCreatorId = args.rootCreatorId;
      }
      if (args.rootCreator !== undefined && args.rootCreator !== null) {
        this.rootCreator = new UserOrGroup(args.rootCreator);
      }
      if (args.originalUser !== undefined && args.originalUser !== null) {
        this.originalUser = new UserOrGroup(args.originalUser);
      }
      if (args.modifierUser !== undefined && args.modifierUser !== null) {
        this.modifierUser = new UserOrGroup(args.modifierUser);
      }
      if (args.modifiedDate !== undefined && args.modifiedDate !== null) {
        this.modifiedDate = args.modifiedDate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.creatorId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creator = new UserOrGroup();
          this.creator.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.comment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.documentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.executionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.theNewCommentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.oldCommentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.parentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.docSubStatusHistId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.commentType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.rootCreateDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.rootCreatorId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRUCT) {
          this.rootCreator = new UserOrGroup();
          this.rootCreator.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.STRUCT) {
          this.originalUser = new UserOrGroup();
          this.originalUser.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRUCT) {
          this.modifierUser = new UserOrGroup();
          this.modifierUser.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.I64) {
          this.modifiedDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentComment');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.creatorId !== null && this.creatorId !== undefined) {
      output.writeFieldBegin('creatorId', Thrift.Type.STRING, 2);
      output.writeString(this.creatorId);
      output.writeFieldEnd();
    }
    if (this.creator !== null && this.creator !== undefined) {
      output.writeFieldBegin('creator', Thrift.Type.STRUCT, 3);
      this.creator.write(output);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 4);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.comment !== null && this.comment !== undefined) {
      output.writeFieldBegin('comment', Thrift.Type.STRING, 5);
      output.writeString(this.comment);
      output.writeFieldEnd();
    }
    if (this.documentId !== null && this.documentId !== undefined) {
      output.writeFieldBegin('documentId', Thrift.Type.STRING, 6);
      output.writeString(this.documentId);
      output.writeFieldEnd();
    }
    if (this.executionId !== null && this.executionId !== undefined) {
      output.writeFieldBegin('executionId', Thrift.Type.STRING, 7);
      output.writeString(this.executionId);
      output.writeFieldEnd();
    }
    if (this.theNewCommentId !== null && this.theNewCommentId !== undefined) {
      output.writeFieldBegin('theNewCommentId', Thrift.Type.STRING, 8);
      output.writeString(this.theNewCommentId);
      output.writeFieldEnd();
    }
    if (this.oldCommentId !== null && this.oldCommentId !== undefined) {
      output.writeFieldBegin('oldCommentId', Thrift.Type.STRING, 9);
      output.writeString(this.oldCommentId);
      output.writeFieldEnd();
    }
    if (this.parentId !== null && this.parentId !== undefined) {
      output.writeFieldBegin('parentId', Thrift.Type.STRING, 10);
      output.writeString(this.parentId);
      output.writeFieldEnd();
    }
    if (this.docSubStatusHistId !== null && this.docSubStatusHistId !== undefined) {
      output.writeFieldBegin('docSubStatusHistId', Thrift.Type.STRING, 11);
      output.writeString(this.docSubStatusHistId);
      output.writeFieldEnd();
    }
    if (this.commentType !== null && this.commentType !== undefined) {
      output.writeFieldBegin('commentType', Thrift.Type.I32, 12);
      output.writeI32(this.commentType);
      output.writeFieldEnd();
    }
    if (this.rootCreateDate !== null && this.rootCreateDate !== undefined) {
      output.writeFieldBegin('rootCreateDate', Thrift.Type.I64, 13);
      output.writeI64(this.rootCreateDate);
      output.writeFieldEnd();
    }
    if (this.rootCreatorId !== null && this.rootCreatorId !== undefined) {
      output.writeFieldBegin('rootCreatorId', Thrift.Type.STRING, 14);
      output.writeString(this.rootCreatorId);
      output.writeFieldEnd();
    }
    if (this.rootCreator !== null && this.rootCreator !== undefined) {
      output.writeFieldBegin('rootCreator', Thrift.Type.STRUCT, 15);
      this.rootCreator.write(output);
      output.writeFieldEnd();
    }
    if (this.originalUser !== null && this.originalUser !== undefined) {
      output.writeFieldBegin('originalUser', Thrift.Type.STRUCT, 16);
      this.originalUser.write(output);
      output.writeFieldEnd();
    }
    if (this.modifierUser !== null && this.modifierUser !== undefined) {
      output.writeFieldBegin('modifierUser', Thrift.Type.STRUCT, 17);
      this.modifierUser.write(output);
      output.writeFieldEnd();
    }
    if (this.modifiedDate !== null && this.modifiedDate !== undefined) {
      output.writeFieldBegin('modifiedDate', Thrift.Type.I64, 18);
      output.writeI64(this.modifiedDate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentExecutionDelegateInfo = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.documentExecutionId = null;
    this.internalActionIteration = null;
    this.originalUserId = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.documentExecutionId !== undefined && args.documentExecutionId !== null) {
        this.documentExecutionId = args.documentExecutionId;
      }
      if (args.internalActionIteration !== undefined && args.internalActionIteration !== null) {
        this.internalActionIteration = args.internalActionIteration;
      }
      if (args.originalUserId !== undefined && args.originalUserId !== null) {
        this.originalUserId = args.originalUserId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.documentExecutionId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.internalActionIteration = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.originalUserId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentExecutionDelegateInfo');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.documentExecutionId !== null && this.documentExecutionId !== undefined) {
      output.writeFieldBegin('documentExecutionId', Thrift.Type.STRING, 3);
      output.writeString(this.documentExecutionId);
      output.writeFieldEnd();
    }
    if (this.internalActionIteration !== null && this.internalActionIteration !== undefined) {
      output.writeFieldBegin('internalActionIteration', Thrift.Type.I32, 4);
      output.writeI32(this.internalActionIteration);
      output.writeFieldEnd();
    }
    if (this.originalUserId !== null && this.originalUserId !== undefined) {
      output.writeFieldBegin('originalUserId', Thrift.Type.STRING, 5);
      output.writeString(this.originalUserId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentExecution = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.deleteDate = null;
    this.parentId = null;
    this.path = null;
    this.documentId = null;
    this.stageId = null;
    this.iteration = null;
    this.userOGroup = null;
    this.reassignType = null;
    this.deadlineDateTime = null;
    this.executionDateTime = null;
    this.reassignedDateTime = null;
    this.actionType = null;
    this.informedAboutDeadline = null;
    this.ownerType = null;
    this.decision = null;
    this.countAttachment = null;
    this.digitalSignId = null;
    this.closedBy = null;
    this.taskComment = null;
    this.originalUser = null;
    this.comments = null;
    this.internalCreateIteration = null;
    this.internalActionIteration = null;
    this.periodical = null;
    this.startPeriod = null;
    this.nextStartPeriod = null;
    this.periodicJiraEndDate = null;
    this.periodicEndDate = null;
    this.delegateInfo = null;
    this.status = null;
    this.handoverUser = null;
    this.taskCommentUpdateDate = null;
    this.taskCommentUpdateBy = null;
    this.reassignDigitalSignId = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.deleteDate !== undefined && args.deleteDate !== null) {
        this.deleteDate = args.deleteDate;
      }
      if (args.parentId !== undefined && args.parentId !== null) {
        this.parentId = args.parentId;
      }
      if (args.path !== undefined && args.path !== null) {
        this.path = args.path;
      }
      if (args.documentId !== undefined && args.documentId !== null) {
        this.documentId = args.documentId;
      }
      if (args.stageId !== undefined && args.stageId !== null) {
        this.stageId = args.stageId;
      }
      if (args.iteration !== undefined && args.iteration !== null) {
        this.iteration = args.iteration;
      }
      if (args.userOGroup !== undefined && args.userOGroup !== null) {
        this.userOGroup = new UserOrGroup(args.userOGroup);
      }
      if (args.reassignType !== undefined && args.reassignType !== null) {
        this.reassignType = args.reassignType;
      }
      if (args.deadlineDateTime !== undefined && args.deadlineDateTime !== null) {
        this.deadlineDateTime = args.deadlineDateTime;
      }
      if (args.executionDateTime !== undefined && args.executionDateTime !== null) {
        this.executionDateTime = args.executionDateTime;
      }
      if (args.reassignedDateTime !== undefined && args.reassignedDateTime !== null) {
        this.reassignedDateTime = args.reassignedDateTime;
      }
      if (args.actionType !== undefined && args.actionType !== null) {
        this.actionType = args.actionType;
      }
      if (args.informedAboutDeadline !== undefined && args.informedAboutDeadline !== null) {
        this.informedAboutDeadline = args.informedAboutDeadline;
      }
      if (args.ownerType !== undefined && args.ownerType !== null) {
        this.ownerType = args.ownerType;
      }
      if (args.decision !== undefined && args.decision !== null) {
        this.decision = args.decision;
      }
      if (args.countAttachment !== undefined && args.countAttachment !== null) {
        this.countAttachment = args.countAttachment;
      }
      if (args.digitalSignId !== undefined && args.digitalSignId !== null) {
        this.digitalSignId = args.digitalSignId;
      }
      if (args.closedBy !== undefined && args.closedBy !== null) {
        this.closedBy = args.closedBy;
      }
      if (args.taskComment !== undefined && args.taskComment !== null) {
        this.taskComment = args.taskComment;
      }
      if (args.originalUser !== undefined && args.originalUser !== null) {
        this.originalUser = new UserOrGroup(args.originalUser);
      }
      if (args.comments !== undefined && args.comments !== null) {
        this.comments = Thrift.copyList(args.comments, [DocumentComment]);
      }
      if (args.internalCreateIteration !== undefined && args.internalCreateIteration !== null) {
        this.internalCreateIteration = args.internalCreateIteration;
      }
      if (args.internalActionIteration !== undefined && args.internalActionIteration !== null) {
        this.internalActionIteration = args.internalActionIteration;
      }
      if (args.periodical !== undefined && args.periodical !== null) {
        this.periodical = args.periodical;
      }
      if (args.startPeriod !== undefined && args.startPeriod !== null) {
        this.startPeriod = args.startPeriod;
      }
      if (args.nextStartPeriod !== undefined && args.nextStartPeriod !== null) {
        this.nextStartPeriod = args.nextStartPeriod;
      }
      if (args.periodicJiraEndDate !== undefined && args.periodicJiraEndDate !== null) {
        this.periodicJiraEndDate = args.periodicJiraEndDate;
      }
      if (args.periodicEndDate !== undefined && args.periodicEndDate !== null) {
        this.periodicEndDate = args.periodicEndDate;
      }
      if (args.delegateInfo !== undefined && args.delegateInfo !== null) {
        this.delegateInfo = Thrift.copyList(args.delegateInfo, [DocumentExecutionDelegateInfo]);
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.handoverUser !== undefined && args.handoverUser !== null) {
        this.handoverUser = new UserOrGroup(args.handoverUser);
      }
      if (args.taskCommentUpdateDate !== undefined && args.taskCommentUpdateDate !== null) {
        this.taskCommentUpdateDate = args.taskCommentUpdateDate;
      }
      if (args.taskCommentUpdateBy !== undefined && args.taskCommentUpdateBy !== null) {
        this.taskCommentUpdateBy = args.taskCommentUpdateBy;
      }
      if (args.reassignDigitalSignId !== undefined && args.reassignDigitalSignId !== null) {
        this.reassignDigitalSignId = args.reassignDigitalSignId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.deleteDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.parentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.path = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.documentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.stageId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.iteration = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRUCT) {
          this.userOGroup = new UserOrGroup();
          this.userOGroup.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.reassignType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.deadlineDateTime = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I64) {
          this.executionDateTime = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.reassignedDateTime = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I32) {
          this.actionType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.BOOL) {
          this.informedAboutDeadline = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.I32) {
          this.ownerType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRING) {
          this.decision = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.I32) {
          this.countAttachment = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.STRING) {
          this.digitalSignId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.STRING) {
          this.closedBy = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRING) {
          this.taskComment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.STRUCT) {
          this.originalUser = new UserOrGroup();
          this.originalUser.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.LIST) {
          this.comments = [];
          const _rtmp3111 = input.readListBegin();
          const _size110 = _rtmp3111.size || 0;
          for (let _i112 = 0; _i112 < _size110; ++_i112) {
            let elem113 = null;
            elem113 = new DocumentComment();
            elem113.read(input);
            this.comments.push(elem113);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.I32) {
          this.internalCreateIteration = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.I32) {
          this.internalActionIteration = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.BOOL) {
          this.periodical = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.I64) {
          this.startPeriod = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.STRING) {
          this.nextStartPeriod = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 29:
        if (ftype == Thrift.Type.STRING) {
          this.periodicJiraEndDate = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 30:
        if (ftype == Thrift.Type.I64) {
          this.periodicEndDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.LIST) {
          this.delegateInfo = [];
          const _rtmp3115 = input.readListBegin();
          const _size114 = _rtmp3115.size || 0;
          for (let _i116 = 0; _i116 < _size114; ++_i116) {
            let elem117 = null;
            elem117 = new DocumentExecutionDelegateInfo();
            elem117.read(input);
            this.delegateInfo.push(elem117);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 33:
        if (ftype == Thrift.Type.STRUCT) {
          this.handoverUser = new UserOrGroup();
          this.handoverUser.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 34:
        if (ftype == Thrift.Type.I64) {
          this.taskCommentUpdateDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 35:
        if (ftype == Thrift.Type.STRING) {
          this.taskCommentUpdateBy = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 36:
        if (ftype == Thrift.Type.STRING) {
          this.reassignDigitalSignId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentExecution');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.deleteDate !== null && this.deleteDate !== undefined) {
      output.writeFieldBegin('deleteDate', Thrift.Type.I64, 3);
      output.writeI64(this.deleteDate);
      output.writeFieldEnd();
    }
    if (this.parentId !== null && this.parentId !== undefined) {
      output.writeFieldBegin('parentId', Thrift.Type.STRING, 4);
      output.writeString(this.parentId);
      output.writeFieldEnd();
    }
    if (this.path !== null && this.path !== undefined) {
      output.writeFieldBegin('path', Thrift.Type.STRING, 5);
      output.writeString(this.path);
      output.writeFieldEnd();
    }
    if (this.documentId !== null && this.documentId !== undefined) {
      output.writeFieldBegin('documentId', Thrift.Type.STRING, 6);
      output.writeString(this.documentId);
      output.writeFieldEnd();
    }
    if (this.stageId !== null && this.stageId !== undefined) {
      output.writeFieldBegin('stageId', Thrift.Type.STRING, 7);
      output.writeString(this.stageId);
      output.writeFieldEnd();
    }
    if (this.iteration !== null && this.iteration !== undefined) {
      output.writeFieldBegin('iteration', Thrift.Type.I32, 8);
      output.writeI32(this.iteration);
      output.writeFieldEnd();
    }
    if (this.userOGroup !== null && this.userOGroup !== undefined) {
      output.writeFieldBegin('userOGroup', Thrift.Type.STRUCT, 9);
      this.userOGroup.write(output);
      output.writeFieldEnd();
    }
    if (this.reassignType !== null && this.reassignType !== undefined) {
      output.writeFieldBegin('reassignType', Thrift.Type.I32, 10);
      output.writeI32(this.reassignType);
      output.writeFieldEnd();
    }
    if (this.deadlineDateTime !== null && this.deadlineDateTime !== undefined) {
      output.writeFieldBegin('deadlineDateTime', Thrift.Type.I64, 11);
      output.writeI64(this.deadlineDateTime);
      output.writeFieldEnd();
    }
    if (this.executionDateTime !== null && this.executionDateTime !== undefined) {
      output.writeFieldBegin('executionDateTime', Thrift.Type.I64, 12);
      output.writeI64(this.executionDateTime);
      output.writeFieldEnd();
    }
    if (this.reassignedDateTime !== null && this.reassignedDateTime !== undefined) {
      output.writeFieldBegin('reassignedDateTime', Thrift.Type.I64, 13);
      output.writeI64(this.reassignedDateTime);
      output.writeFieldEnd();
    }
    if (this.actionType !== null && this.actionType !== undefined) {
      output.writeFieldBegin('actionType', Thrift.Type.I32, 14);
      output.writeI32(this.actionType);
      output.writeFieldEnd();
    }
    if (this.informedAboutDeadline !== null && this.informedAboutDeadline !== undefined) {
      output.writeFieldBegin('informedAboutDeadline', Thrift.Type.BOOL, 15);
      output.writeBool(this.informedAboutDeadline);
      output.writeFieldEnd();
    }
    if (this.ownerType !== null && this.ownerType !== undefined) {
      output.writeFieldBegin('ownerType', Thrift.Type.I32, 16);
      output.writeI32(this.ownerType);
      output.writeFieldEnd();
    }
    if (this.decision !== null && this.decision !== undefined) {
      output.writeFieldBegin('decision', Thrift.Type.STRING, 17);
      output.writeString(this.decision);
      output.writeFieldEnd();
    }
    if (this.countAttachment !== null && this.countAttachment !== undefined) {
      output.writeFieldBegin('countAttachment', Thrift.Type.I32, 18);
      output.writeI32(this.countAttachment);
      output.writeFieldEnd();
    }
    if (this.digitalSignId !== null && this.digitalSignId !== undefined) {
      output.writeFieldBegin('digitalSignId', Thrift.Type.STRING, 19);
      output.writeString(this.digitalSignId);
      output.writeFieldEnd();
    }
    if (this.closedBy !== null && this.closedBy !== undefined) {
      output.writeFieldBegin('closedBy', Thrift.Type.STRING, 20);
      output.writeString(this.closedBy);
      output.writeFieldEnd();
    }
    if (this.taskComment !== null && this.taskComment !== undefined) {
      output.writeFieldBegin('taskComment', Thrift.Type.STRING, 21);
      output.writeString(this.taskComment);
      output.writeFieldEnd();
    }
    if (this.originalUser !== null && this.originalUser !== undefined) {
      output.writeFieldBegin('originalUser', Thrift.Type.STRUCT, 22);
      this.originalUser.write(output);
      output.writeFieldEnd();
    }
    if (this.comments !== null && this.comments !== undefined) {
      output.writeFieldBegin('comments', Thrift.Type.LIST, 23);
      output.writeListBegin(Thrift.Type.STRUCT, this.comments.length);
      for (let iter118 in this.comments) {
        if (this.comments.hasOwnProperty(iter118)) {
          iter118 = this.comments[iter118];
          iter118.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.internalCreateIteration !== null && this.internalCreateIteration !== undefined) {
      output.writeFieldBegin('internalCreateIteration', Thrift.Type.I32, 24);
      output.writeI32(this.internalCreateIteration);
      output.writeFieldEnd();
    }
    if (this.internalActionIteration !== null && this.internalActionIteration !== undefined) {
      output.writeFieldBegin('internalActionIteration', Thrift.Type.I32, 25);
      output.writeI32(this.internalActionIteration);
      output.writeFieldEnd();
    }
    if (this.periodical !== null && this.periodical !== undefined) {
      output.writeFieldBegin('periodical', Thrift.Type.BOOL, 26);
      output.writeBool(this.periodical);
      output.writeFieldEnd();
    }
    if (this.startPeriod !== null && this.startPeriod !== undefined) {
      output.writeFieldBegin('startPeriod', Thrift.Type.I64, 27);
      output.writeI64(this.startPeriod);
      output.writeFieldEnd();
    }
    if (this.nextStartPeriod !== null && this.nextStartPeriod !== undefined) {
      output.writeFieldBegin('nextStartPeriod', Thrift.Type.STRING, 28);
      output.writeString(this.nextStartPeriod);
      output.writeFieldEnd();
    }
    if (this.periodicJiraEndDate !== null && this.periodicJiraEndDate !== undefined) {
      output.writeFieldBegin('periodicJiraEndDate', Thrift.Type.STRING, 29);
      output.writeString(this.periodicJiraEndDate);
      output.writeFieldEnd();
    }
    if (this.periodicEndDate !== null && this.periodicEndDate !== undefined) {
      output.writeFieldBegin('periodicEndDate', Thrift.Type.I64, 30);
      output.writeI64(this.periodicEndDate);
      output.writeFieldEnd();
    }
    if (this.delegateInfo !== null && this.delegateInfo !== undefined) {
      output.writeFieldBegin('delegateInfo', Thrift.Type.LIST, 31);
      output.writeListBegin(Thrift.Type.STRUCT, this.delegateInfo.length);
      for (let iter119 in this.delegateInfo) {
        if (this.delegateInfo.hasOwnProperty(iter119)) {
          iter119 = this.delegateInfo[iter119];
          iter119.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 32);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.handoverUser !== null && this.handoverUser !== undefined) {
      output.writeFieldBegin('handoverUser', Thrift.Type.STRUCT, 33);
      this.handoverUser.write(output);
      output.writeFieldEnd();
    }
    if (this.taskCommentUpdateDate !== null && this.taskCommentUpdateDate !== undefined) {
      output.writeFieldBegin('taskCommentUpdateDate', Thrift.Type.I64, 34);
      output.writeI64(this.taskCommentUpdateDate);
      output.writeFieldEnd();
    }
    if (this.taskCommentUpdateBy !== null && this.taskCommentUpdateBy !== undefined) {
      output.writeFieldBegin('taskCommentUpdateBy', Thrift.Type.STRING, 35);
      output.writeString(this.taskCommentUpdateBy);
      output.writeFieldEnd();
    }
    if (this.reassignDigitalSignId !== null && this.reassignDigitalSignId !== undefined) {
      output.writeFieldBegin('reassignDigitalSignId', Thrift.Type.STRING, 36);
      output.writeString(this.reassignDigitalSignId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentParticipantGroup = class {
  constructor(args) {
    this.userOrGroup = null;
    this.dispatchState = null;
    if (args) {
      if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
        this.userOrGroup = Thrift.copyList(args.userOrGroup, [UserOrGroup]);
      }
      if (args.dispatchState !== undefined && args.dispatchState !== null) {
        this.dispatchState = args.dispatchState;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.userOrGroup = [];
          const _rtmp3121 = input.readListBegin();
          const _size120 = _rtmp3121.size || 0;
          for (let _i122 = 0; _i122 < _size120; ++_i122) {
            let elem123 = null;
            elem123 = new UserOrGroup();
            elem123.read(input);
            this.userOrGroup.push(elem123);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.dispatchState = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentParticipantGroup');
    if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
      output.writeFieldBegin('userOrGroup', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroup.length);
      for (let iter124 in this.userOrGroup) {
        if (this.userOrGroup.hasOwnProperty(iter124)) {
          iter124 = this.userOrGroup[iter124];
          iter124.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.dispatchState !== null && this.dispatchState !== undefined) {
      output.writeFieldBegin('dispatchState', Thrift.Type.I32, 2);
      output.writeI32(this.dispatchState);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Document = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.originalPatternId = null;
    this.filledDocumentPattern = null;
    this.stage = null;
    this.documentDeadlineDate = null;
    this.deleteDate = null;
    this.numberDocument = null;
    this.nameDocument = null;
    this.chatId = null;
    this.status = null;
    this.subStatus = null;
    this.hasExternalLink = null;
    this.reassignedDateTime = null;
    this.cardDeadlineDate = null;
    this.actionMap = null;
    this.ownerType = null;
    this.iteration = null;
    this.systemNumber = null;
    this.additionConfirmer = null;
    this.viewed = null;
    this.hasDigitalSign = null;
    this.currentExecutors = null;
    this.otherUsers = null;
    this.scChangeDate = null;
    this.registrationDate = null;
    this.sender = null;
    this.recipient = null;
    this.originalUser = null;
    this.documentParticipantGroup = null;
    this.controlForDocument = null;
    this.controlForExecutor = null;
    this.tags = null;
    this.account = null;
    this.moveError = null;
    this.encripted = null;
    this.icon = null;
    this.reassignDeadline = null;
    this.countCurrentExecutors = null;
    this.countOtherUsers = null;
    this.countResponsibleUsers = null;
    this.responsibleUsers = null;
    this.countConfirmerUsers = null;
    this.externalNumber = null;
    this.externalRegDate = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.originalPatternId !== undefined && args.originalPatternId !== null) {
        this.originalPatternId = args.originalPatternId;
      }
      if (args.filledDocumentPattern !== undefined && args.filledDocumentPattern !== null) {
        this.filledDocumentPattern = new FreezeDocumentPattern(args.filledDocumentPattern);
      }
      if (args.stage !== undefined && args.stage !== null) {
        this.stage = new DocumentPatternStage(args.stage);
      }
      if (args.documentDeadlineDate !== undefined && args.documentDeadlineDate !== null) {
        this.documentDeadlineDate = args.documentDeadlineDate;
      }
      if (args.deleteDate !== undefined && args.deleteDate !== null) {
        this.deleteDate = args.deleteDate;
      }
      if (args.numberDocument !== undefined && args.numberDocument !== null) {
        this.numberDocument = args.numberDocument;
      }
      if (args.nameDocument !== undefined && args.nameDocument !== null) {
        this.nameDocument = args.nameDocument;
      }
      if (args.chatId !== undefined && args.chatId !== null) {
        this.chatId = args.chatId;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.subStatus !== undefined && args.subStatus !== null) {
        this.subStatus = args.subStatus;
      }
      if (args.hasExternalLink !== undefined && args.hasExternalLink !== null) {
        this.hasExternalLink = args.hasExternalLink;
      }
      if (args.reassignedDateTime !== undefined && args.reassignedDateTime !== null) {
        this.reassignedDateTime = args.reassignedDateTime;
      }
      if (args.cardDeadlineDate !== undefined && args.cardDeadlineDate !== null) {
        this.cardDeadlineDate = args.cardDeadlineDate;
      }
      if (args.actionMap !== undefined && args.actionMap !== null) {
        this.actionMap = Thrift.copyMap(args.actionMap, [null]);
      }
      if (args.ownerType !== undefined && args.ownerType !== null) {
        this.ownerType = args.ownerType;
      }
      if (args.iteration !== undefined && args.iteration !== null) {
        this.iteration = args.iteration;
      }
      if (args.systemNumber !== undefined && args.systemNumber !== null) {
        this.systemNumber = args.systemNumber;
      }
      if (args.additionConfirmer !== undefined && args.additionConfirmer !== null) {
        this.additionConfirmer = args.additionConfirmer;
      }
      if (args.viewed !== undefined && args.viewed !== null) {
        this.viewed = args.viewed;
      }
      if (args.hasDigitalSign !== undefined && args.hasDigitalSign !== null) {
        this.hasDigitalSign = args.hasDigitalSign;
      }
      if (args.currentExecutors !== undefined && args.currentExecutors !== null) {
        this.currentExecutors = Thrift.copyList(args.currentExecutors, [DocumentExecution]);
      }
      if (args.otherUsers !== undefined && args.otherUsers !== null) {
        this.otherUsers = Thrift.copyList(args.otherUsers, [DocumentExecution]);
      }
      if (args.scChangeDate !== undefined && args.scChangeDate !== null) {
        this.scChangeDate = args.scChangeDate;
      }
      if (args.registrationDate !== undefined && args.registrationDate !== null) {
        this.registrationDate = args.registrationDate;
      }
      if (args.sender !== undefined && args.sender !== null) {
        this.sender = args.sender;
      }
      if (args.recipient !== undefined && args.recipient !== null) {
        this.recipient = args.recipient;
      }
      if (args.originalUser !== undefined && args.originalUser !== null) {
        this.originalUser = new UserOrGroup(args.originalUser);
      }
      if (args.documentParticipantGroup !== undefined && args.documentParticipantGroup !== null) {
        this.documentParticipantGroup = Thrift.copyList(args.documentParticipantGroup, [DocumentParticipantGroup]);
      }
      if (args.controlForDocument !== undefined && args.controlForDocument !== null) {
        this.controlForDocument = args.controlForDocument;
      }
      if (args.controlForExecutor !== undefined && args.controlForExecutor !== null) {
        this.controlForExecutor = args.controlForExecutor;
      }
      if (args.tags !== undefined && args.tags !== null) {
        this.tags = Thrift.copyList(args.tags, [null]);
      }
      if (args.account !== undefined && args.account !== null) {
        this.account = new Account(args.account);
      }
      if (args.moveError !== undefined && args.moveError !== null) {
        this.moveError = args.moveError;
      }
      if (args.encripted !== undefined && args.encripted !== null) {
        this.encripted = args.encripted;
      }
      if (args.icon !== undefined && args.icon !== null) {
        this.icon = args.icon;
      }
      if (args.reassignDeadline !== undefined && args.reassignDeadline !== null) {
        this.reassignDeadline = args.reassignDeadline;
      }
      if (args.countCurrentExecutors !== undefined && args.countCurrentExecutors !== null) {
        this.countCurrentExecutors = args.countCurrentExecutors;
      }
      if (args.countOtherUsers !== undefined && args.countOtherUsers !== null) {
        this.countOtherUsers = args.countOtherUsers;
      }
      if (args.countResponsibleUsers !== undefined && args.countResponsibleUsers !== null) {
        this.countResponsibleUsers = args.countResponsibleUsers;
      }
      if (args.responsibleUsers !== undefined && args.responsibleUsers !== null) {
        this.responsibleUsers = Thrift.copyList(args.responsibleUsers, [DocumentExecution]);
      }
      if (args.countConfirmerUsers !== undefined && args.countConfirmerUsers !== null) {
        this.countConfirmerUsers = args.countConfirmerUsers;
      }
      if (args.externalNumber !== undefined && args.externalNumber !== null) {
        this.externalNumber = args.externalNumber;
      }
      if (args.externalRegDate !== undefined && args.externalRegDate !== null) {
        this.externalRegDate = args.externalRegDate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.originalPatternId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.filledDocumentPattern = new FreezeDocumentPattern();
          this.filledDocumentPattern.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.stage = new DocumentPatternStage();
          this.stage.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.documentDeadlineDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.deleteDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.numberDocument = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.nameDocument = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.chatId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.subStatus = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.BOOL) {
          this.hasExternalLink = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I64) {
          this.reassignedDateTime = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I64) {
          this.cardDeadlineDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.MAP) {
          this.actionMap = {};
          const _rtmp3126 = input.readMapBegin();
          const _size125 = _rtmp3126.size || 0;
          for (let _i127 = 0; _i127 < _size125; ++_i127) {
            if (_i127 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key128 = null;
            let val129 = null;
            key128 = input.readString().value;
            val129 = input.readI32().value;
            this.actionMap[key128] = val129;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.I32) {
          this.ownerType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.I32) {
          this.iteration = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.STRING) {
          this.systemNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.BOOL) {
          this.additionConfirmer = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.BOOL) {
          this.viewed = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.BOOL) {
          this.hasDigitalSign = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.LIST) {
          this.currentExecutors = [];
          const _rtmp3131 = input.readListBegin();
          const _size130 = _rtmp3131.size || 0;
          for (let _i132 = 0; _i132 < _size130; ++_i132) {
            let elem133 = null;
            elem133 = new DocumentExecution();
            elem133.read(input);
            this.currentExecutors.push(elem133);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.LIST) {
          this.otherUsers = [];
          const _rtmp3135 = input.readListBegin();
          const _size134 = _rtmp3135.size || 0;
          for (let _i136 = 0; _i136 < _size134; ++_i136) {
            let elem137 = null;
            elem137 = new DocumentExecution();
            elem137.read(input);
            this.otherUsers.push(elem137);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.I64) {
          this.scChangeDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.I64) {
          this.registrationDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.BOOL) {
          this.sender = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.BOOL) {
          this.recipient = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 29:
        if (ftype == Thrift.Type.STRUCT) {
          this.originalUser = new UserOrGroup();
          this.originalUser.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 30:
        if (ftype == Thrift.Type.LIST) {
          this.documentParticipantGroup = [];
          const _rtmp3139 = input.readListBegin();
          const _size138 = _rtmp3139.size || 0;
          for (let _i140 = 0; _i140 < _size138; ++_i140) {
            let elem141 = null;
            elem141 = new DocumentParticipantGroup();
            elem141.read(input);
            this.documentParticipantGroup.push(elem141);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.BOOL) {
          this.controlForDocument = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.BOOL) {
          this.controlForExecutor = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 33:
        if (ftype == Thrift.Type.LIST) {
          this.tags = [];
          const _rtmp3143 = input.readListBegin();
          const _size142 = _rtmp3143.size || 0;
          for (let _i144 = 0; _i144 < _size142; ++_i144) {
            let elem145 = null;
            elem145 = input.readString().value;
            this.tags.push(elem145);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 34:
        if (ftype == Thrift.Type.STRUCT) {
          this.account = new Account();
          this.account.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 35:
        if (ftype == Thrift.Type.BOOL) {
          this.moveError = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 36:
        if (ftype == Thrift.Type.BOOL) {
          this.encripted = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 37:
        if (ftype == Thrift.Type.I32) {
          this.icon = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 38:
        if (ftype == Thrift.Type.I64) {
          this.reassignDeadline = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 39:
        if (ftype == Thrift.Type.I32) {
          this.countCurrentExecutors = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 40:
        if (ftype == Thrift.Type.I32) {
          this.countOtherUsers = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 41:
        if (ftype == Thrift.Type.I32) {
          this.countResponsibleUsers = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 42:
        if (ftype == Thrift.Type.LIST) {
          this.responsibleUsers = [];
          const _rtmp3147 = input.readListBegin();
          const _size146 = _rtmp3147.size || 0;
          for (let _i148 = 0; _i148 < _size146; ++_i148) {
            let elem149 = null;
            elem149 = new DocumentExecution();
            elem149.read(input);
            this.responsibleUsers.push(elem149);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 43:
        if (ftype == Thrift.Type.I32) {
          this.countConfirmerUsers = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 44:
        if (ftype == Thrift.Type.STRING) {
          this.externalNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 45:
        if (ftype == Thrift.Type.I64) {
          this.externalRegDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Document');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.originalPatternId !== null && this.originalPatternId !== undefined) {
      output.writeFieldBegin('originalPatternId', Thrift.Type.STRING, 3);
      output.writeString(this.originalPatternId);
      output.writeFieldEnd();
    }
    if (this.filledDocumentPattern !== null && this.filledDocumentPattern !== undefined) {
      output.writeFieldBegin('filledDocumentPattern', Thrift.Type.STRUCT, 4);
      this.filledDocumentPattern.write(output);
      output.writeFieldEnd();
    }
    if (this.stage !== null && this.stage !== undefined) {
      output.writeFieldBegin('stage', Thrift.Type.STRUCT, 5);
      this.stage.write(output);
      output.writeFieldEnd();
    }
    if (this.documentDeadlineDate !== null && this.documentDeadlineDate !== undefined) {
      output.writeFieldBegin('documentDeadlineDate', Thrift.Type.I64, 6);
      output.writeI64(this.documentDeadlineDate);
      output.writeFieldEnd();
    }
    if (this.deleteDate !== null && this.deleteDate !== undefined) {
      output.writeFieldBegin('deleteDate', Thrift.Type.I64, 7);
      output.writeI64(this.deleteDate);
      output.writeFieldEnd();
    }
    if (this.numberDocument !== null && this.numberDocument !== undefined) {
      output.writeFieldBegin('numberDocument', Thrift.Type.STRING, 8);
      output.writeString(this.numberDocument);
      output.writeFieldEnd();
    }
    if (this.nameDocument !== null && this.nameDocument !== undefined) {
      output.writeFieldBegin('nameDocument', Thrift.Type.STRING, 9);
      output.writeString(this.nameDocument);
      output.writeFieldEnd();
    }
    if (this.chatId !== null && this.chatId !== undefined) {
      output.writeFieldBegin('chatId', Thrift.Type.STRING, 10);
      output.writeString(this.chatId);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 11);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.subStatus !== null && this.subStatus !== undefined) {
      output.writeFieldBegin('subStatus', Thrift.Type.I32, 12);
      output.writeI32(this.subStatus);
      output.writeFieldEnd();
    }
    if (this.hasExternalLink !== null && this.hasExternalLink !== undefined) {
      output.writeFieldBegin('hasExternalLink', Thrift.Type.BOOL, 13);
      output.writeBool(this.hasExternalLink);
      output.writeFieldEnd();
    }
    if (this.reassignedDateTime !== null && this.reassignedDateTime !== undefined) {
      output.writeFieldBegin('reassignedDateTime', Thrift.Type.I64, 14);
      output.writeI64(this.reassignedDateTime);
      output.writeFieldEnd();
    }
    if (this.cardDeadlineDate !== null && this.cardDeadlineDate !== undefined) {
      output.writeFieldBegin('cardDeadlineDate', Thrift.Type.I64, 15);
      output.writeI64(this.cardDeadlineDate);
      output.writeFieldEnd();
    }
    if (this.actionMap !== null && this.actionMap !== undefined) {
      output.writeFieldBegin('actionMap', Thrift.Type.MAP, 16);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.actionMap));
      for (let kiter150 in this.actionMap) {
        if (this.actionMap.hasOwnProperty(kiter150)) {
          let viter151 = this.actionMap[kiter150];
          output.writeString(kiter150);
          output.writeI32(viter151);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ownerType !== null && this.ownerType !== undefined) {
      output.writeFieldBegin('ownerType', Thrift.Type.I32, 17);
      output.writeI32(this.ownerType);
      output.writeFieldEnd();
    }
    if (this.iteration !== null && this.iteration !== undefined) {
      output.writeFieldBegin('iteration', Thrift.Type.I32, 18);
      output.writeI32(this.iteration);
      output.writeFieldEnd();
    }
    if (this.systemNumber !== null && this.systemNumber !== undefined) {
      output.writeFieldBegin('systemNumber', Thrift.Type.STRING, 19);
      output.writeString(this.systemNumber);
      output.writeFieldEnd();
    }
    if (this.additionConfirmer !== null && this.additionConfirmer !== undefined) {
      output.writeFieldBegin('additionConfirmer', Thrift.Type.BOOL, 20);
      output.writeBool(this.additionConfirmer);
      output.writeFieldEnd();
    }
    if (this.viewed !== null && this.viewed !== undefined) {
      output.writeFieldBegin('viewed', Thrift.Type.BOOL, 21);
      output.writeBool(this.viewed);
      output.writeFieldEnd();
    }
    if (this.hasDigitalSign !== null && this.hasDigitalSign !== undefined) {
      output.writeFieldBegin('hasDigitalSign', Thrift.Type.BOOL, 22);
      output.writeBool(this.hasDigitalSign);
      output.writeFieldEnd();
    }
    if (this.currentExecutors !== null && this.currentExecutors !== undefined) {
      output.writeFieldBegin('currentExecutors', Thrift.Type.LIST, 23);
      output.writeListBegin(Thrift.Type.STRUCT, this.currentExecutors.length);
      for (let iter152 in this.currentExecutors) {
        if (this.currentExecutors.hasOwnProperty(iter152)) {
          iter152 = this.currentExecutors[iter152];
          iter152.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.otherUsers !== null && this.otherUsers !== undefined) {
      output.writeFieldBegin('otherUsers', Thrift.Type.LIST, 24);
      output.writeListBegin(Thrift.Type.STRUCT, this.otherUsers.length);
      for (let iter153 in this.otherUsers) {
        if (this.otherUsers.hasOwnProperty(iter153)) {
          iter153 = this.otherUsers[iter153];
          iter153.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.scChangeDate !== null && this.scChangeDate !== undefined) {
      output.writeFieldBegin('scChangeDate', Thrift.Type.I64, 25);
      output.writeI64(this.scChangeDate);
      output.writeFieldEnd();
    }
    if (this.registrationDate !== null && this.registrationDate !== undefined) {
      output.writeFieldBegin('registrationDate', Thrift.Type.I64, 26);
      output.writeI64(this.registrationDate);
      output.writeFieldEnd();
    }
    if (this.sender !== null && this.sender !== undefined) {
      output.writeFieldBegin('sender', Thrift.Type.BOOL, 27);
      output.writeBool(this.sender);
      output.writeFieldEnd();
    }
    if (this.recipient !== null && this.recipient !== undefined) {
      output.writeFieldBegin('recipient', Thrift.Type.BOOL, 28);
      output.writeBool(this.recipient);
      output.writeFieldEnd();
    }
    if (this.originalUser !== null && this.originalUser !== undefined) {
      output.writeFieldBegin('originalUser', Thrift.Type.STRUCT, 29);
      this.originalUser.write(output);
      output.writeFieldEnd();
    }
    if (this.documentParticipantGroup !== null && this.documentParticipantGroup !== undefined) {
      output.writeFieldBegin('documentParticipantGroup', Thrift.Type.LIST, 30);
      output.writeListBegin(Thrift.Type.STRUCT, this.documentParticipantGroup.length);
      for (let iter154 in this.documentParticipantGroup) {
        if (this.documentParticipantGroup.hasOwnProperty(iter154)) {
          iter154 = this.documentParticipantGroup[iter154];
          iter154.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.controlForDocument !== null && this.controlForDocument !== undefined) {
      output.writeFieldBegin('controlForDocument', Thrift.Type.BOOL, 31);
      output.writeBool(this.controlForDocument);
      output.writeFieldEnd();
    }
    if (this.controlForExecutor !== null && this.controlForExecutor !== undefined) {
      output.writeFieldBegin('controlForExecutor', Thrift.Type.BOOL, 32);
      output.writeBool(this.controlForExecutor);
      output.writeFieldEnd();
    }
    if (this.tags !== null && this.tags !== undefined) {
      output.writeFieldBegin('tags', Thrift.Type.LIST, 33);
      output.writeListBegin(Thrift.Type.STRING, this.tags.length);
      for (let iter155 in this.tags) {
        if (this.tags.hasOwnProperty(iter155)) {
          iter155 = this.tags[iter155];
          output.writeString(iter155);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.account !== null && this.account !== undefined) {
      output.writeFieldBegin('account', Thrift.Type.STRUCT, 34);
      this.account.write(output);
      output.writeFieldEnd();
    }
    if (this.moveError !== null && this.moveError !== undefined) {
      output.writeFieldBegin('moveError', Thrift.Type.BOOL, 35);
      output.writeBool(this.moveError);
      output.writeFieldEnd();
    }
    if (this.encripted !== null && this.encripted !== undefined) {
      output.writeFieldBegin('encripted', Thrift.Type.BOOL, 36);
      output.writeBool(this.encripted);
      output.writeFieldEnd();
    }
    if (this.icon !== null && this.icon !== undefined) {
      output.writeFieldBegin('icon', Thrift.Type.I32, 37);
      output.writeI32(this.icon);
      output.writeFieldEnd();
    }
    if (this.reassignDeadline !== null && this.reassignDeadline !== undefined) {
      output.writeFieldBegin('reassignDeadline', Thrift.Type.I64, 38);
      output.writeI64(this.reassignDeadline);
      output.writeFieldEnd();
    }
    if (this.countCurrentExecutors !== null && this.countCurrentExecutors !== undefined) {
      output.writeFieldBegin('countCurrentExecutors', Thrift.Type.I32, 39);
      output.writeI32(this.countCurrentExecutors);
      output.writeFieldEnd();
    }
    if (this.countOtherUsers !== null && this.countOtherUsers !== undefined) {
      output.writeFieldBegin('countOtherUsers', Thrift.Type.I32, 40);
      output.writeI32(this.countOtherUsers);
      output.writeFieldEnd();
    }
    if (this.countResponsibleUsers !== null && this.countResponsibleUsers !== undefined) {
      output.writeFieldBegin('countResponsibleUsers', Thrift.Type.I32, 41);
      output.writeI32(this.countResponsibleUsers);
      output.writeFieldEnd();
    }
    if (this.responsibleUsers !== null && this.responsibleUsers !== undefined) {
      output.writeFieldBegin('responsibleUsers', Thrift.Type.LIST, 42);
      output.writeListBegin(Thrift.Type.STRUCT, this.responsibleUsers.length);
      for (let iter156 in this.responsibleUsers) {
        if (this.responsibleUsers.hasOwnProperty(iter156)) {
          iter156 = this.responsibleUsers[iter156];
          iter156.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.countConfirmerUsers !== null && this.countConfirmerUsers !== undefined) {
      output.writeFieldBegin('countConfirmerUsers', Thrift.Type.I32, 43);
      output.writeI32(this.countConfirmerUsers);
      output.writeFieldEnd();
    }
    if (this.externalNumber !== null && this.externalNumber !== undefined) {
      output.writeFieldBegin('externalNumber', Thrift.Type.STRING, 44);
      output.writeString(this.externalNumber);
      output.writeFieldEnd();
    }
    if (this.externalRegDate !== null && this.externalRegDate !== undefined) {
      output.writeFieldBegin('externalRegDate', Thrift.Type.I64, 45);
      output.writeI64(this.externalRegDate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
AttachmentPermissions = class {
  constructor(args) {
    this.onlineEdit = null;
    this.onlineComment = null;
    this.changeEditMode = null;
    this.canSign = null;
    if (args) {
      if (args.onlineEdit !== undefined && args.onlineEdit !== null) {
        this.onlineEdit = args.onlineEdit;
      }
      if (args.onlineComment !== undefined && args.onlineComment !== null) {
        this.onlineComment = args.onlineComment;
      }
      if (args.changeEditMode !== undefined && args.changeEditMode !== null) {
        this.changeEditMode = args.changeEditMode;
      }
      if (args.canSign !== undefined && args.canSign !== null) {
        this.canSign = args.canSign;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.onlineEdit = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.onlineComment = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.changeEditMode = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.canSign = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AttachmentPermissions');
    if (this.onlineEdit !== null && this.onlineEdit !== undefined) {
      output.writeFieldBegin('onlineEdit', Thrift.Type.BOOL, 1);
      output.writeBool(this.onlineEdit);
      output.writeFieldEnd();
    }
    if (this.onlineComment !== null && this.onlineComment !== undefined) {
      output.writeFieldBegin('onlineComment', Thrift.Type.BOOL, 2);
      output.writeBool(this.onlineComment);
      output.writeFieldEnd();
    }
    if (this.changeEditMode !== null && this.changeEditMode !== undefined) {
      output.writeFieldBegin('changeEditMode', Thrift.Type.BOOL, 3);
      output.writeBool(this.changeEditMode);
      output.writeFieldEnd();
    }
    if (this.canSign !== null && this.canSign !== undefined) {
      output.writeFieldBegin('canSign', Thrift.Type.BOOL, 4);
      output.writeBool(this.canSign);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
AttachmentVersionInfo = class {
  constructor(args) {
    this.id = null;
    this.status = null;
    this.precalculatedRank = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.precalculatedRank !== undefined && args.precalculatedRank !== null) {
        this.precalculatedRank = args.precalculatedRank;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.precalculatedRank = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AttachmentVersionInfo');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 2);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.precalculatedRank !== null && this.precalculatedRank !== undefined) {
      output.writeFieldBegin('precalculatedRank', Thrift.Type.I32, 3);
      output.writeI32(this.precalculatedRank);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
Attachment = class {
  constructor(args) {
    this.id = null;
    this.documentId = null;
    this.fileName = null;
    this.createDate = null;
    this.attHash = null;
    this.preview = null;
    this.creatorId = null;
    this.creator = null;
    this.size = null;
    this.status = null;
    this.stageId = null;
    this.hasDigitalSign = null;
    this.docExecId = null;
    this.autoReplacement = null;
    this.originalUserId = null;
    this.originalUser = null;
    this.forDraft = null;
    this.waitForPublish = null;
    this.fVersion = null;
    this.iteration = null;
    this.attachmentPermissions = null;
    this.versionCount = null;
    this.fType = null;
    this.accessMode = null;
    this.editMode = null;
    this.externalId = null;
    this.meetingId = null;
    this.attachmentExtStatus = null;
    this.versionInfo = null;
    this.patternAttachmentTemplateId = null;
    this.isHidden = null;
    this.signCertKeys = null;
    this.autoAdd = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.documentId !== undefined && args.documentId !== null) {
        this.documentId = args.documentId;
      }
      if (args.fileName !== undefined && args.fileName !== null) {
        this.fileName = args.fileName;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.attHash !== undefined && args.attHash !== null) {
        this.attHash = args.attHash;
      }
      if (args.preview !== undefined && args.preview !== null) {
        this.preview = Thrift.copyList(args.preview, [null]);
      }
      if (args.creatorId !== undefined && args.creatorId !== null) {
        this.creatorId = args.creatorId;
      }
      if (args.creator !== undefined && args.creator !== null) {
        this.creator = new UserOrGroup(args.creator);
      }
      if (args.size !== undefined && args.size !== null) {
        this.size = args.size;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.stageId !== undefined && args.stageId !== null) {
        this.stageId = args.stageId;
      }
      if (args.hasDigitalSign !== undefined && args.hasDigitalSign !== null) {
        this.hasDigitalSign = args.hasDigitalSign;
      }
      if (args.docExecId !== undefined && args.docExecId !== null) {
        this.docExecId = args.docExecId;
      }
      if (args.autoReplacement !== undefined && args.autoReplacement !== null) {
        this.autoReplacement = args.autoReplacement;
      }
      if (args.originalUserId !== undefined && args.originalUserId !== null) {
        this.originalUserId = args.originalUserId;
      }
      if (args.originalUser !== undefined && args.originalUser !== null) {
        this.originalUser = new UserOrGroup(args.originalUser);
      }
      if (args.forDraft !== undefined && args.forDraft !== null) {
        this.forDraft = args.forDraft;
      }
      if (args.waitForPublish !== undefined && args.waitForPublish !== null) {
        this.waitForPublish = args.waitForPublish;
      }
      if (args.fVersion !== undefined && args.fVersion !== null) {
        this.fVersion = args.fVersion;
      }
      if (args.iteration !== undefined && args.iteration !== null) {
        this.iteration = args.iteration;
      }
      if (args.attachmentPermissions !== undefined && args.attachmentPermissions !== null) {
        this.attachmentPermissions = new AttachmentPermissions(args.attachmentPermissions);
      }
      if (args.versionCount !== undefined && args.versionCount !== null) {
        this.versionCount = args.versionCount;
      }
      if (args.fType !== undefined && args.fType !== null) {
        this.fType = args.fType;
      }
      if (args.accessMode !== undefined && args.accessMode !== null) {
        this.accessMode = args.accessMode;
      }
      if (args.editMode !== undefined && args.editMode !== null) {
        this.editMode = args.editMode;
      }
      if (args.externalId !== undefined && args.externalId !== null) {
        this.externalId = args.externalId;
      }
      if (args.meetingId !== undefined && args.meetingId !== null) {
        this.meetingId = args.meetingId;
      }
      if (args.attachmentExtStatus !== undefined && args.attachmentExtStatus !== null) {
        this.attachmentExtStatus = args.attachmentExtStatus;
      }
      if (args.versionInfo !== undefined && args.versionInfo !== null) {
        this.versionInfo = Thrift.copyList(args.versionInfo, [AttachmentVersionInfo]);
      }
      if (args.patternAttachmentTemplateId !== undefined && args.patternAttachmentTemplateId !== null) {
        this.patternAttachmentTemplateId = args.patternAttachmentTemplateId;
      }
      if (args.isHidden !== undefined && args.isHidden !== null) {
        this.isHidden = args.isHidden;
      }
      if (args.signCertKeys !== undefined && args.signCertKeys !== null) {
        this.signCertKeys = Thrift.copyList(args.signCertKeys, [null]);
      }
      if (args.autoAdd !== undefined && args.autoAdd !== null) {
        this.autoAdd = args.autoAdd;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.documentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.fileName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.attHash = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.preview = [];
          const _rtmp3158 = input.readListBegin();
          const _size157 = _rtmp3158.size || 0;
          for (let _i159 = 0; _i159 < _size157; ++_i159) {
            let elem160 = null;
            elem160 = input.readI32().value;
            this.preview.push(elem160);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.creatorId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRUCT) {
          this.creator = new UserOrGroup();
          this.creator.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I64) {
          this.size = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.stageId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.BOOL) {
          this.hasDigitalSign = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRING) {
          this.docExecId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.BOOL) {
          this.autoReplacement = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.originalUserId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.STRUCT) {
          this.originalUser = new UserOrGroup();
          this.originalUser.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.BOOL) {
          this.forDraft = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.BOOL) {
          this.waitForPublish = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.I64) {
          this.fVersion = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.I32) {
          this.iteration = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRUCT) {
          this.attachmentPermissions = new AttachmentPermissions();
          this.attachmentPermissions.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.I32) {
          this.versionCount = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.I32) {
          this.fType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.I32) {
          this.accessMode = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.I32) {
          this.editMode = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.STRING) {
          this.externalId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.STRING) {
          this.meetingId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.I32) {
          this.attachmentExtStatus = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 29:
        if (ftype == Thrift.Type.LIST) {
          this.versionInfo = [];
          const _rtmp3162 = input.readListBegin();
          const _size161 = _rtmp3162.size || 0;
          for (let _i163 = 0; _i163 < _size161; ++_i163) {
            let elem164 = null;
            elem164 = new AttachmentVersionInfo();
            elem164.read(input);
            this.versionInfo.push(elem164);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 30:
        if (ftype == Thrift.Type.STRING) {
          this.patternAttachmentTemplateId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 31:
        if (ftype == Thrift.Type.BOOL) {
          this.isHidden = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 32:
        if (ftype == Thrift.Type.SET) {
          this.signCertKeys = [];
          const _rtmp3166 = input.readSetBegin();
          const _size165 = _rtmp3166.size || 0;
          for (let _i167 = 0; _i167 < _size165; ++_i167) {
            let elem168 = null;
            elem168 = input.readString().value;
            this.signCertKeys.push(elem168);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 33:
        if (ftype == Thrift.Type.BOOL) {
          this.autoAdd = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Attachment');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.documentId !== null && this.documentId !== undefined) {
      output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
      output.writeString(this.documentId);
      output.writeFieldEnd();
    }
    if (this.fileName !== null && this.fileName !== undefined) {
      output.writeFieldBegin('fileName', Thrift.Type.STRING, 3);
      output.writeString(this.fileName);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 4);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.attHash !== null && this.attHash !== undefined) {
      output.writeFieldBegin('attHash', Thrift.Type.STRING, 5);
      output.writeString(this.attHash);
      output.writeFieldEnd();
    }
    if (this.preview !== null && this.preview !== undefined) {
      output.writeFieldBegin('preview', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.I32, this.preview.length);
      for (let iter169 in this.preview) {
        if (this.preview.hasOwnProperty(iter169)) {
          iter169 = this.preview[iter169];
          output.writeI32(iter169);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creatorId !== null && this.creatorId !== undefined) {
      output.writeFieldBegin('creatorId', Thrift.Type.STRING, 7);
      output.writeString(this.creatorId);
      output.writeFieldEnd();
    }
    if (this.creator !== null && this.creator !== undefined) {
      output.writeFieldBegin('creator', Thrift.Type.STRUCT, 8);
      this.creator.write(output);
      output.writeFieldEnd();
    }
    if (this.size !== null && this.size !== undefined) {
      output.writeFieldBegin('size', Thrift.Type.I64, 9);
      output.writeI64(this.size);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 10);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.stageId !== null && this.stageId !== undefined) {
      output.writeFieldBegin('stageId', Thrift.Type.STRING, 11);
      output.writeString(this.stageId);
      output.writeFieldEnd();
    }
    if (this.hasDigitalSign !== null && this.hasDigitalSign !== undefined) {
      output.writeFieldBegin('hasDigitalSign', Thrift.Type.BOOL, 12);
      output.writeBool(this.hasDigitalSign);
      output.writeFieldEnd();
    }
    if (this.docExecId !== null && this.docExecId !== undefined) {
      output.writeFieldBegin('docExecId', Thrift.Type.STRING, 13);
      output.writeString(this.docExecId);
      output.writeFieldEnd();
    }
    if (this.autoReplacement !== null && this.autoReplacement !== undefined) {
      output.writeFieldBegin('autoReplacement', Thrift.Type.BOOL, 14);
      output.writeBool(this.autoReplacement);
      output.writeFieldEnd();
    }
    if (this.originalUserId !== null && this.originalUserId !== undefined) {
      output.writeFieldBegin('originalUserId', Thrift.Type.STRING, 15);
      output.writeString(this.originalUserId);
      output.writeFieldEnd();
    }
    if (this.originalUser !== null && this.originalUser !== undefined) {
      output.writeFieldBegin('originalUser', Thrift.Type.STRUCT, 16);
      this.originalUser.write(output);
      output.writeFieldEnd();
    }
    if (this.forDraft !== null && this.forDraft !== undefined) {
      output.writeFieldBegin('forDraft', Thrift.Type.BOOL, 17);
      output.writeBool(this.forDraft);
      output.writeFieldEnd();
    }
    if (this.waitForPublish !== null && this.waitForPublish !== undefined) {
      output.writeFieldBegin('waitForPublish', Thrift.Type.BOOL, 18);
      output.writeBool(this.waitForPublish);
      output.writeFieldEnd();
    }
    if (this.fVersion !== null && this.fVersion !== undefined) {
      output.writeFieldBegin('fVersion', Thrift.Type.I64, 19);
      output.writeI64(this.fVersion);
      output.writeFieldEnd();
    }
    if (this.iteration !== null && this.iteration !== undefined) {
      output.writeFieldBegin('iteration', Thrift.Type.I32, 20);
      output.writeI32(this.iteration);
      output.writeFieldEnd();
    }
    if (this.attachmentPermissions !== null && this.attachmentPermissions !== undefined) {
      output.writeFieldBegin('attachmentPermissions', Thrift.Type.STRUCT, 21);
      this.attachmentPermissions.write(output);
      output.writeFieldEnd();
    }
    if (this.versionCount !== null && this.versionCount !== undefined) {
      output.writeFieldBegin('versionCount', Thrift.Type.I32, 22);
      output.writeI32(this.versionCount);
      output.writeFieldEnd();
    }
    if (this.fType !== null && this.fType !== undefined) {
      output.writeFieldBegin('fType', Thrift.Type.I32, 23);
      output.writeI32(this.fType);
      output.writeFieldEnd();
    }
    if (this.accessMode !== null && this.accessMode !== undefined) {
      output.writeFieldBegin('accessMode', Thrift.Type.I32, 24);
      output.writeI32(this.accessMode);
      output.writeFieldEnd();
    }
    if (this.editMode !== null && this.editMode !== undefined) {
      output.writeFieldBegin('editMode', Thrift.Type.I32, 25);
      output.writeI32(this.editMode);
      output.writeFieldEnd();
    }
    if (this.externalId !== null && this.externalId !== undefined) {
      output.writeFieldBegin('externalId', Thrift.Type.STRING, 26);
      output.writeString(this.externalId);
      output.writeFieldEnd();
    }
    if (this.meetingId !== null && this.meetingId !== undefined) {
      output.writeFieldBegin('meetingId', Thrift.Type.STRING, 27);
      output.writeString(this.meetingId);
      output.writeFieldEnd();
    }
    if (this.attachmentExtStatus !== null && this.attachmentExtStatus !== undefined) {
      output.writeFieldBegin('attachmentExtStatus', Thrift.Type.I32, 28);
      output.writeI32(this.attachmentExtStatus);
      output.writeFieldEnd();
    }
    if (this.versionInfo !== null && this.versionInfo !== undefined) {
      output.writeFieldBegin('versionInfo', Thrift.Type.LIST, 29);
      output.writeListBegin(Thrift.Type.STRUCT, this.versionInfo.length);
      for (let iter170 in this.versionInfo) {
        if (this.versionInfo.hasOwnProperty(iter170)) {
          iter170 = this.versionInfo[iter170];
          iter170.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.patternAttachmentTemplateId !== null && this.patternAttachmentTemplateId !== undefined) {
      output.writeFieldBegin('patternAttachmentTemplateId', Thrift.Type.STRING, 30);
      output.writeString(this.patternAttachmentTemplateId);
      output.writeFieldEnd();
    }
    if (this.isHidden !== null && this.isHidden !== undefined) {
      output.writeFieldBegin('isHidden', Thrift.Type.BOOL, 31);
      output.writeBool(this.isHidden);
      output.writeFieldEnd();
    }
    if (this.signCertKeys !== null && this.signCertKeys !== undefined) {
      output.writeFieldBegin('signCertKeys', Thrift.Type.SET, 32);
      output.writeSetBegin(Thrift.Type.STRING, this.signCertKeys.length);
      for (let iter171 in this.signCertKeys) {
        if (this.signCertKeys.hasOwnProperty(iter171)) {
          iter171 = this.signCertKeys[iter171];
          output.writeString(iter171);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.autoAdd !== null && this.autoAdd !== undefined) {
      output.writeFieldBegin('autoAdd', Thrift.Type.BOOL, 33);
      output.writeBool(this.autoAdd);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentRelation = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.docId1 = null;
    this.docId2 = null;
    this.createDoc2Date = null;
    this.doc2Name = null;
    this.doc2Number = null;
    this.doc2SystemNumber = null;
    this.doc2Access = null;
    this.relationType = null;
    this.doc2Status = null;
    this.doc2SubStatus = null;
    this.doc2DeadlineDate = null;
    this.doc2CardDeadlineDate = null;
    this.resolution = null;
    this.doc2ActionType = null;
    this.doc2HasConfirmationCard = null;
    this.doc2Icon = null;
    this.doc2PatternName = null;
    this.doc2PatternGroupName = null;
    this.doc2StageName = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.docId1 !== undefined && args.docId1 !== null) {
        this.docId1 = args.docId1;
      }
      if (args.docId2 !== undefined && args.docId2 !== null) {
        this.docId2 = args.docId2;
      }
      if (args.createDoc2Date !== undefined && args.createDoc2Date !== null) {
        this.createDoc2Date = args.createDoc2Date;
      }
      if (args.doc2Name !== undefined && args.doc2Name !== null) {
        this.doc2Name = args.doc2Name;
      }
      if (args.doc2Number !== undefined && args.doc2Number !== null) {
        this.doc2Number = args.doc2Number;
      }
      if (args.doc2SystemNumber !== undefined && args.doc2SystemNumber !== null) {
        this.doc2SystemNumber = args.doc2SystemNumber;
      }
      if (args.doc2Access !== undefined && args.doc2Access !== null) {
        this.doc2Access = args.doc2Access;
      }
      if (args.relationType !== undefined && args.relationType !== null) {
        this.relationType = args.relationType;
      }
      if (args.doc2Status !== undefined && args.doc2Status !== null) {
        this.doc2Status = args.doc2Status;
      }
      if (args.doc2SubStatus !== undefined && args.doc2SubStatus !== null) {
        this.doc2SubStatus = args.doc2SubStatus;
      }
      if (args.doc2DeadlineDate !== undefined && args.doc2DeadlineDate !== null) {
        this.doc2DeadlineDate = args.doc2DeadlineDate;
      }
      if (args.doc2CardDeadlineDate !== undefined && args.doc2CardDeadlineDate !== null) {
        this.doc2CardDeadlineDate = args.doc2CardDeadlineDate;
      }
      if (args.resolution !== undefined && args.resolution !== null) {
        this.resolution = args.resolution;
      }
      if (args.doc2ActionType !== undefined && args.doc2ActionType !== null) {
        this.doc2ActionType = Thrift.copyMap(args.doc2ActionType, [null]);
      }
      if (args.doc2HasConfirmationCard !== undefined && args.doc2HasConfirmationCard !== null) {
        this.doc2HasConfirmationCard = args.doc2HasConfirmationCard;
      }
      if (args.doc2Icon !== undefined && args.doc2Icon !== null) {
        this.doc2Icon = args.doc2Icon;
      }
      if (args.doc2PatternName !== undefined && args.doc2PatternName !== null) {
        this.doc2PatternName = args.doc2PatternName;
      }
      if (args.doc2PatternGroupName !== undefined && args.doc2PatternGroupName !== null) {
        this.doc2PatternGroupName = args.doc2PatternGroupName;
      }
      if (args.doc2StageName !== undefined && args.doc2StageName !== null) {
        this.doc2StageName = args.doc2StageName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.docId1 = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.docId2 = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.createDoc2Date = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.doc2Name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.doc2Number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.doc2SystemNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.BOOL) {
          this.doc2Access = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.relationType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I32) {
          this.doc2Status = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.doc2SubStatus = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.doc2DeadlineDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.I64) {
          this.doc2CardDeadlineDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.resolution = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.MAP) {
          this.doc2ActionType = {};
          const _rtmp3173 = input.readMapBegin();
          const _size172 = _rtmp3173.size || 0;
          for (let _i174 = 0; _i174 < _size172; ++_i174) {
            if (_i174 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key175 = null;
            let val176 = null;
            key175 = input.readString().value;
            val176 = input.readI32().value;
            this.doc2ActionType[key175] = val176;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.BOOL) {
          this.doc2HasConfirmationCard = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.I32) {
          this.doc2Icon = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.STRING) {
          this.doc2PatternName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.STRING) {
          this.doc2PatternGroupName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRING) {
          this.doc2StageName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentRelation');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.docId1 !== null && this.docId1 !== undefined) {
      output.writeFieldBegin('docId1', Thrift.Type.STRING, 3);
      output.writeString(this.docId1);
      output.writeFieldEnd();
    }
    if (this.docId2 !== null && this.docId2 !== undefined) {
      output.writeFieldBegin('docId2', Thrift.Type.STRING, 4);
      output.writeString(this.docId2);
      output.writeFieldEnd();
    }
    if (this.createDoc2Date !== null && this.createDoc2Date !== undefined) {
      output.writeFieldBegin('createDoc2Date', Thrift.Type.I64, 5);
      output.writeI64(this.createDoc2Date);
      output.writeFieldEnd();
    }
    if (this.doc2Name !== null && this.doc2Name !== undefined) {
      output.writeFieldBegin('doc2Name', Thrift.Type.STRING, 6);
      output.writeString(this.doc2Name);
      output.writeFieldEnd();
    }
    if (this.doc2Number !== null && this.doc2Number !== undefined) {
      output.writeFieldBegin('doc2Number', Thrift.Type.STRING, 7);
      output.writeString(this.doc2Number);
      output.writeFieldEnd();
    }
    if (this.doc2SystemNumber !== null && this.doc2SystemNumber !== undefined) {
      output.writeFieldBegin('doc2SystemNumber', Thrift.Type.STRING, 8);
      output.writeString(this.doc2SystemNumber);
      output.writeFieldEnd();
    }
    if (this.doc2Access !== null && this.doc2Access !== undefined) {
      output.writeFieldBegin('doc2Access', Thrift.Type.BOOL, 9);
      output.writeBool(this.doc2Access);
      output.writeFieldEnd();
    }
    if (this.relationType !== null && this.relationType !== undefined) {
      output.writeFieldBegin('relationType', Thrift.Type.I32, 10);
      output.writeI32(this.relationType);
      output.writeFieldEnd();
    }
    if (this.doc2Status !== null && this.doc2Status !== undefined) {
      output.writeFieldBegin('doc2Status', Thrift.Type.I32, 11);
      output.writeI32(this.doc2Status);
      output.writeFieldEnd();
    }
    if (this.doc2SubStatus !== null && this.doc2SubStatus !== undefined) {
      output.writeFieldBegin('doc2SubStatus', Thrift.Type.I32, 12);
      output.writeI32(this.doc2SubStatus);
      output.writeFieldEnd();
    }
    if (this.doc2DeadlineDate !== null && this.doc2DeadlineDate !== undefined) {
      output.writeFieldBegin('doc2DeadlineDate', Thrift.Type.I64, 13);
      output.writeI64(this.doc2DeadlineDate);
      output.writeFieldEnd();
    }
    if (this.doc2CardDeadlineDate !== null && this.doc2CardDeadlineDate !== undefined) {
      output.writeFieldBegin('doc2CardDeadlineDate', Thrift.Type.I64, 14);
      output.writeI64(this.doc2CardDeadlineDate);
      output.writeFieldEnd();
    }
    if (this.resolution !== null && this.resolution !== undefined) {
      output.writeFieldBegin('resolution', Thrift.Type.STRING, 15);
      output.writeString(this.resolution);
      output.writeFieldEnd();
    }
    if (this.doc2ActionType !== null && this.doc2ActionType !== undefined) {
      output.writeFieldBegin('doc2ActionType', Thrift.Type.MAP, 16);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.doc2ActionType));
      for (let kiter177 in this.doc2ActionType) {
        if (this.doc2ActionType.hasOwnProperty(kiter177)) {
          let viter178 = this.doc2ActionType[kiter177];
          output.writeString(kiter177);
          output.writeI32(viter178);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.doc2HasConfirmationCard !== null && this.doc2HasConfirmationCard !== undefined) {
      output.writeFieldBegin('doc2HasConfirmationCard', Thrift.Type.BOOL, 17);
      output.writeBool(this.doc2HasConfirmationCard);
      output.writeFieldEnd();
    }
    if (this.doc2Icon !== null && this.doc2Icon !== undefined) {
      output.writeFieldBegin('doc2Icon', Thrift.Type.I32, 18);
      output.writeI32(this.doc2Icon);
      output.writeFieldEnd();
    }
    if (this.doc2PatternName !== null && this.doc2PatternName !== undefined) {
      output.writeFieldBegin('doc2PatternName', Thrift.Type.STRING, 19);
      output.writeString(this.doc2PatternName);
      output.writeFieldEnd();
    }
    if (this.doc2PatternGroupName !== null && this.doc2PatternGroupName !== undefined) {
      output.writeFieldBegin('doc2PatternGroupName', Thrift.Type.STRING, 20);
      output.writeString(this.doc2PatternGroupName);
      output.writeFieldEnd();
    }
    if (this.doc2StageName !== null && this.doc2StageName !== undefined) {
      output.writeFieldBegin('doc2StageName', Thrift.Type.STRING, 21);
      output.writeString(this.doc2StageName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
ExecutionTree = class {
  constructor(args) {
    this.card = null;
    this.attachments = null;
    this.comments = null;
    this.childTree = null;
    this.parentTree = null;
    this.docRelations = null;
    this.period = null;
    this.periodicEndDate = null;
    if (args) {
      if (args.card !== undefined && args.card !== null) {
        this.card = new DocumentExecution(args.card);
      }
      if (args.attachments !== undefined && args.attachments !== null) {
        this.attachments = Thrift.copyList(args.attachments, [Attachment]);
      }
      if (args.comments !== undefined && args.comments !== null) {
        this.comments = Thrift.copyList(args.comments, [DocumentComment]);
      }
      if (args.childTree !== undefined && args.childTree !== null) {
        this.childTree = Thrift.copyList(args.childTree, [null]);
      }
      if (args.parentTree !== undefined && args.parentTree !== null) {
        this.parentTree = new ExecutionTree(args.parentTree);
      }
      if (args.docRelations !== undefined && args.docRelations !== null) {
        this.docRelations = Thrift.copyList(args.docRelations, [DocumentRelation]);
      }
      if (args.period !== undefined && args.period !== null) {
        this.period = args.period;
      }
      if (args.periodicEndDate !== undefined && args.periodicEndDate !== null) {
        this.periodicEndDate = args.periodicEndDate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.card = new DocumentExecution();
          this.card.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.attachments = [];
          const _rtmp3180 = input.readListBegin();
          const _size179 = _rtmp3180.size || 0;
          for (let _i181 = 0; _i181 < _size179; ++_i181) {
            let elem182 = null;
            elem182 = new Attachment();
            elem182.read(input);
            this.attachments.push(elem182);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.comments = [];
          const _rtmp3184 = input.readListBegin();
          const _size183 = _rtmp3184.size || 0;
          for (let _i185 = 0; _i185 < _size183; ++_i185) {
            let elem186 = null;
            elem186 = new DocumentComment();
            elem186.read(input);
            this.comments.push(elem186);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.childTree = [];
          const _rtmp3188 = input.readListBegin();
          const _size187 = _rtmp3188.size || 0;
          for (let _i189 = 0; _i189 < _size187; ++_i189) {
            let elem190 = null;
            elem190 = new ExecutionTree();
            elem190.read(input);
            this.childTree.push(elem190);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.parentTree = new ExecutionTree();
          this.parentTree.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.docRelations = [];
          const _rtmp3192 = input.readListBegin();
          const _size191 = _rtmp3192.size || 0;
          for (let _i193 = 0; _i193 < _size191; ++_i193) {
            let elem194 = null;
            elem194 = new DocumentRelation();
            elem194.read(input);
            this.docRelations.push(elem194);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.period = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.periodicEndDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExecutionTree');
    if (this.card !== null && this.card !== undefined) {
      output.writeFieldBegin('card', Thrift.Type.STRUCT, 1);
      this.card.write(output);
      output.writeFieldEnd();
    }
    if (this.attachments !== null && this.attachments !== undefined) {
      output.writeFieldBegin('attachments', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.attachments.length);
      for (let iter195 in this.attachments) {
        if (this.attachments.hasOwnProperty(iter195)) {
          iter195 = this.attachments[iter195];
          iter195.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.comments !== null && this.comments !== undefined) {
      output.writeFieldBegin('comments', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.comments.length);
      for (let iter196 in this.comments) {
        if (this.comments.hasOwnProperty(iter196)) {
          iter196 = this.comments[iter196];
          iter196.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.childTree !== null && this.childTree !== undefined) {
      output.writeFieldBegin('childTree', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.childTree.length);
      for (let iter197 in this.childTree) {
        if (this.childTree.hasOwnProperty(iter197)) {
          iter197 = this.childTree[iter197];
          iter197.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.parentTree !== null && this.parentTree !== undefined) {
      output.writeFieldBegin('parentTree', Thrift.Type.STRUCT, 5);
      this.parentTree.write(output);
      output.writeFieldEnd();
    }
    if (this.docRelations !== null && this.docRelations !== undefined) {
      output.writeFieldBegin('docRelations', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.docRelations.length);
      for (let iter198 in this.docRelations) {
        if (this.docRelations.hasOwnProperty(iter198)) {
          iter198 = this.docRelations[iter198];
          iter198.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.period !== null && this.period !== undefined) {
      output.writeFieldBegin('period', Thrift.Type.STRING, 7);
      output.writeString(this.period);
      output.writeFieldEnd();
    }
    if (this.periodicEndDate !== null && this.periodicEndDate !== undefined) {
      output.writeFieldBegin('periodicEndDate', Thrift.Type.I64, 8);
      output.writeI64(this.periodicEndDate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
PassedStage = class {
  constructor(args) {
    this.passedStage = null;
    this.iteration = null;
    this.startDate = null;
    this.factDate = null;
    this.deadLineDate = null;
    if (args) {
      if (args.passedStage !== undefined && args.passedStage !== null) {
        this.passedStage = new DocumentPatternStage(args.passedStage);
      }
      if (args.iteration !== undefined && args.iteration !== null) {
        this.iteration = args.iteration;
      }
      if (args.startDate !== undefined && args.startDate !== null) {
        this.startDate = args.startDate;
      }
      if (args.factDate !== undefined && args.factDate !== null) {
        this.factDate = args.factDate;
      }
      if (args.deadLineDate !== undefined && args.deadLineDate !== null) {
        this.deadLineDate = args.deadLineDate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.passedStage = new DocumentPatternStage();
          this.passedStage.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.iteration = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.startDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.factDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.deadLineDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PassedStage');
    if (this.passedStage !== null && this.passedStage !== undefined) {
      output.writeFieldBegin('passedStage', Thrift.Type.STRUCT, 1);
      this.passedStage.write(output);
      output.writeFieldEnd();
    }
    if (this.iteration !== null && this.iteration !== undefined) {
      output.writeFieldBegin('iteration', Thrift.Type.I32, 2);
      output.writeI32(this.iteration);
      output.writeFieldEnd();
    }
    if (this.startDate !== null && this.startDate !== undefined) {
      output.writeFieldBegin('startDate', Thrift.Type.I64, 3);
      output.writeI64(this.startDate);
      output.writeFieldEnd();
    }
    if (this.factDate !== null && this.factDate !== undefined) {
      output.writeFieldBegin('factDate', Thrift.Type.I64, 4);
      output.writeI64(this.factDate);
      output.writeFieldEnd();
    }
    if (this.deadLineDate !== null && this.deadLineDate !== undefined) {
      output.writeFieldBegin('deadLineDate', Thrift.Type.I64, 5);
      output.writeI64(this.deadLineDate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
AttCreateInfo = class {
  constructor(args) {
    this.attachmentId = null;
    this.attachmentTemplateId = null;
    this.fileName = null;
    this.forDraft = null;
    this.editMode = null;
    this.meetingId = null;
    this.attachmentExtStatus = null;
    if (args) {
      if (args.attachmentId !== undefined && args.attachmentId !== null) {
        this.attachmentId = args.attachmentId;
      }
      if (args.attachmentTemplateId !== undefined && args.attachmentTemplateId !== null) {
        this.attachmentTemplateId = args.attachmentTemplateId;
      }
      if (args.fileName !== undefined && args.fileName !== null) {
        this.fileName = args.fileName;
      }
      if (args.forDraft !== undefined && args.forDraft !== null) {
        this.forDraft = args.forDraft;
      }
      if (args.editMode !== undefined && args.editMode !== null) {
        this.editMode = args.editMode;
      }
      if (args.meetingId !== undefined && args.meetingId !== null) {
        this.meetingId = args.meetingId;
      }
      if (args.attachmentExtStatus !== undefined && args.attachmentExtStatus !== null) {
        this.attachmentExtStatus = args.attachmentExtStatus;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.attachmentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.attachmentTemplateId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.fileName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.forDraft = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.editMode = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.meetingId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.attachmentExtStatus = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AttCreateInfo');
    if (this.attachmentId !== null && this.attachmentId !== undefined) {
      output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 1);
      output.writeString(this.attachmentId);
      output.writeFieldEnd();
    }
    if (this.attachmentTemplateId !== null && this.attachmentTemplateId !== undefined) {
      output.writeFieldBegin('attachmentTemplateId', Thrift.Type.STRING, 2);
      output.writeString(this.attachmentTemplateId);
      output.writeFieldEnd();
    }
    if (this.fileName !== null && this.fileName !== undefined) {
      output.writeFieldBegin('fileName', Thrift.Type.STRING, 3);
      output.writeString(this.fileName);
      output.writeFieldEnd();
    }
    if (this.forDraft !== null && this.forDraft !== undefined) {
      output.writeFieldBegin('forDraft', Thrift.Type.BOOL, 4);
      output.writeBool(this.forDraft);
      output.writeFieldEnd();
    }
    if (this.editMode !== null && this.editMode !== undefined) {
      output.writeFieldBegin('editMode', Thrift.Type.I32, 5);
      output.writeI32(this.editMode);
      output.writeFieldEnd();
    }
    if (this.meetingId !== null && this.meetingId !== undefined) {
      output.writeFieldBegin('meetingId', Thrift.Type.STRING, 6);
      output.writeString(this.meetingId);
      output.writeFieldEnd();
    }
    if (this.attachmentExtStatus !== null && this.attachmentExtStatus !== undefined) {
      output.writeFieldBegin('attachmentExtStatus', Thrift.Type.I32, 7);
      output.writeI32(this.attachmentExtStatus);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentReassign = class {
  constructor(args) {
    this.id = null;
    this.dateStart = null;
    this.dateEnd = null;
    this.userOrGroup = null;
    this.deadLineTime = null;
    this.reassignType = null;
    this.comment = null;
    this.periodical = null;
    this.startPeriod = null;
    this.nextStartPeriod = null;
    this.periodicEndDate = null;
    this.cardActivityPeriod = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.dateStart !== undefined && args.dateStart !== null) {
        this.dateStart = args.dateStart;
      }
      if (args.dateEnd !== undefined && args.dateEnd !== null) {
        this.dateEnd = args.dateEnd;
      }
      if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
        this.userOrGroup = new UserOrGroup(args.userOrGroup);
      }
      if (args.deadLineTime !== undefined && args.deadLineTime !== null) {
        this.deadLineTime = args.deadLineTime;
      }
      if (args.reassignType !== undefined && args.reassignType !== null) {
        this.reassignType = args.reassignType;
      }
      if (args.comment !== undefined && args.comment !== null) {
        this.comment = args.comment;
      }
      if (args.periodical !== undefined && args.periodical !== null) {
        this.periodical = args.periodical;
      }
      if (args.startPeriod !== undefined && args.startPeriod !== null) {
        this.startPeriod = args.startPeriod;
      }
      if (args.nextStartPeriod !== undefined && args.nextStartPeriod !== null) {
        this.nextStartPeriod = args.nextStartPeriod;
      }
      if (args.periodicEndDate !== undefined && args.periodicEndDate !== null) {
        this.periodicEndDate = args.periodicEndDate;
      }
      if (args.cardActivityPeriod !== undefined && args.cardActivityPeriod !== null) {
        this.cardActivityPeriod = args.cardActivityPeriod;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.dateStart = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.dateEnd = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.userOrGroup = new UserOrGroup();
          this.userOrGroup.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.deadLineTime = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.reassignType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.comment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.periodical = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I64) {
          this.startPeriod = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.nextStartPeriod = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.periodicEndDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.cardActivityPeriod = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentReassign');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.dateStart !== null && this.dateStart !== undefined) {
      output.writeFieldBegin('dateStart', Thrift.Type.I64, 2);
      output.writeI64(this.dateStart);
      output.writeFieldEnd();
    }
    if (this.dateEnd !== null && this.dateEnd !== undefined) {
      output.writeFieldBegin('dateEnd', Thrift.Type.I64, 3);
      output.writeI64(this.dateEnd);
      output.writeFieldEnd();
    }
    if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
      output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 4);
      this.userOrGroup.write(output);
      output.writeFieldEnd();
    }
    if (this.deadLineTime !== null && this.deadLineTime !== undefined) {
      output.writeFieldBegin('deadLineTime', Thrift.Type.I64, 5);
      output.writeI64(this.deadLineTime);
      output.writeFieldEnd();
    }
    if (this.reassignType !== null && this.reassignType !== undefined) {
      output.writeFieldBegin('reassignType', Thrift.Type.I32, 6);
      output.writeI32(this.reassignType);
      output.writeFieldEnd();
    }
    if (this.comment !== null && this.comment !== undefined) {
      output.writeFieldBegin('comment', Thrift.Type.STRING, 7);
      output.writeString(this.comment);
      output.writeFieldEnd();
    }
    if (this.periodical !== null && this.periodical !== undefined) {
      output.writeFieldBegin('periodical', Thrift.Type.BOOL, 8);
      output.writeBool(this.periodical);
      output.writeFieldEnd();
    }
    if (this.startPeriod !== null && this.startPeriod !== undefined) {
      output.writeFieldBegin('startPeriod', Thrift.Type.I64, 9);
      output.writeI64(this.startPeriod);
      output.writeFieldEnd();
    }
    if (this.nextStartPeriod !== null && this.nextStartPeriod !== undefined) {
      output.writeFieldBegin('nextStartPeriod', Thrift.Type.STRING, 10);
      output.writeString(this.nextStartPeriod);
      output.writeFieldEnd();
    }
    if (this.periodicEndDate !== null && this.periodicEndDate !== undefined) {
      output.writeFieldBegin('periodicEndDate', Thrift.Type.I64, 11);
      output.writeI64(this.periodicEndDate);
      output.writeFieldEnd();
    }
    if (this.cardActivityPeriod !== null && this.cardActivityPeriod !== undefined) {
      output.writeFieldBegin('cardActivityPeriod', Thrift.Type.STRING, 12);
      output.writeString(this.cardActivityPeriod);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
ContentHolderShowPlace = class {
  constructor(args) {
    this.id = null;
    this.stageId = null;
    this.seqNum = null;
    this.accessRule = null;
    this.contentHolder = null;
    this.allowEdit = null;
    this.linkId = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.stageId !== undefined && args.stageId !== null) {
        this.stageId = args.stageId;
      }
      if (args.seqNum !== undefined && args.seqNum !== null) {
        this.seqNum = args.seqNum;
      }
      if (args.accessRule !== undefined && args.accessRule !== null) {
        this.accessRule = new AccessRule(args.accessRule);
      }
      if (args.contentHolder !== undefined && args.contentHolder !== null) {
        this.contentHolder = new ContentHolder(args.contentHolder);
      }
      if (args.allowEdit !== undefined && args.allowEdit !== null) {
        this.allowEdit = args.allowEdit;
      }
      if (args.linkId !== undefined && args.linkId !== null) {
        this.linkId = args.linkId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.stageId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.seqNum = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.accessRule = new AccessRule();
          this.accessRule.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.contentHolder = new ContentHolder();
          this.contentHolder.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.allowEdit = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.linkId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContentHolderShowPlace');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.stageId !== null && this.stageId !== undefined) {
      output.writeFieldBegin('stageId', Thrift.Type.STRING, 2);
      output.writeString(this.stageId);
      output.writeFieldEnd();
    }
    if (this.seqNum !== null && this.seqNum !== undefined) {
      output.writeFieldBegin('seqNum', Thrift.Type.I32, 3);
      output.writeI32(this.seqNum);
      output.writeFieldEnd();
    }
    if (this.accessRule !== null && this.accessRule !== undefined) {
      output.writeFieldBegin('accessRule', Thrift.Type.STRUCT, 4);
      this.accessRule.write(output);
      output.writeFieldEnd();
    }
    if (this.contentHolder !== null && this.contentHolder !== undefined) {
      output.writeFieldBegin('contentHolder', Thrift.Type.STRUCT, 5);
      this.contentHolder.write(output);
      output.writeFieldEnd();
    }
    if (this.allowEdit !== null && this.allowEdit !== undefined) {
      output.writeFieldBegin('allowEdit', Thrift.Type.BOOL, 6);
      output.writeBool(this.allowEdit);
      output.writeFieldEnd();
    }
    if (this.linkId !== null && this.linkId !== undefined) {
      output.writeFieldBegin('linkId', Thrift.Type.STRING, 7);
      output.writeString(this.linkId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
ContentHolder = class {
  constructor(args) {
    this.id = null;
    this.patternId = null;
    this.oName = null;
    this.isSystem = null;
    this.contentHolderLink = null;
    this.visibleOnShort = null;
    this.visibleOnFull = null;
    this.showInInfo = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.patternId !== undefined && args.patternId !== null) {
        this.patternId = args.patternId;
      }
      if (args.oName !== undefined && args.oName !== null) {
        this.oName = args.oName;
      }
      if (args.isSystem !== undefined && args.isSystem !== null) {
        this.isSystem = args.isSystem;
      }
      if (args.contentHolderLink !== undefined && args.contentHolderLink !== null) {
        this.contentHolderLink = Thrift.copyList(args.contentHolderLink, [null]);
      }
      if (args.visibleOnShort !== undefined && args.visibleOnShort !== null) {
        this.visibleOnShort = args.visibleOnShort;
      }
      if (args.visibleOnFull !== undefined && args.visibleOnFull !== null) {
        this.visibleOnFull = args.visibleOnFull;
      }
      if (args.showInInfo !== undefined && args.showInInfo !== null) {
        this.showInInfo = args.showInInfo;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.patternId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.oName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.isSystem = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.contentHolderLink = [];
          const _rtmp3200 = input.readListBegin();
          const _size199 = _rtmp3200.size || 0;
          for (let _i201 = 0; _i201 < _size199; ++_i201) {
            let elem202 = null;
            elem202 = new ContentHolderLink();
            elem202.read(input);
            this.contentHolderLink.push(elem202);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.visibleOnShort = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.visibleOnFull = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.showInInfo = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContentHolder');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.patternId !== null && this.patternId !== undefined) {
      output.writeFieldBegin('patternId', Thrift.Type.STRING, 2);
      output.writeString(this.patternId);
      output.writeFieldEnd();
    }
    if (this.oName !== null && this.oName !== undefined) {
      output.writeFieldBegin('oName', Thrift.Type.STRING, 3);
      output.writeString(this.oName);
      output.writeFieldEnd();
    }
    if (this.isSystem !== null && this.isSystem !== undefined) {
      output.writeFieldBegin('isSystem', Thrift.Type.BOOL, 4);
      output.writeBool(this.isSystem);
      output.writeFieldEnd();
    }
    if (this.contentHolderLink !== null && this.contentHolderLink !== undefined) {
      output.writeFieldBegin('contentHolderLink', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.STRUCT, this.contentHolderLink.length);
      for (let iter203 in this.contentHolderLink) {
        if (this.contentHolderLink.hasOwnProperty(iter203)) {
          iter203 = this.contentHolderLink[iter203];
          iter203.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.visibleOnShort !== null && this.visibleOnShort !== undefined) {
      output.writeFieldBegin('visibleOnShort', Thrift.Type.BOOL, 6);
      output.writeBool(this.visibleOnShort);
      output.writeFieldEnd();
    }
    if (this.visibleOnFull !== null && this.visibleOnFull !== undefined) {
      output.writeFieldBegin('visibleOnFull', Thrift.Type.BOOL, 7);
      output.writeBool(this.visibleOnFull);
      output.writeFieldEnd();
    }
    if (this.showInInfo !== null && this.showInInfo !== undefined) {
      output.writeFieldBegin('showInInfo', Thrift.Type.BOOL, 8);
      output.writeBool(this.showInInfo);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
ContentHolderLink = class {
  constructor(args) {
    this.id = null;
    this.contentItem = null;
    this.requared = null;
    this.readOnly = null;
    this.order = null;
    this.showPlace = null;
    this.visible = null;
    this.visibleScript = null;
    this.readonlyScript = null;
    this.onChangeScript = null;
    this.allowForCurUser = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.contentItem !== undefined && args.contentItem !== null) {
        this.contentItem = new ContentItem(args.contentItem);
      }
      if (args.requared !== undefined && args.requared !== null) {
        this.requared = args.requared;
      }
      if (args.readOnly !== undefined && args.readOnly !== null) {
        this.readOnly = args.readOnly;
      }
      if (args.order !== undefined && args.order !== null) {
        this.order = args.order;
      }
      if (args.showPlace !== undefined && args.showPlace !== null) {
        this.showPlace = args.showPlace;
      }
      if (args.visible !== undefined && args.visible !== null) {
        this.visible = args.visible;
      }
      if (args.visibleScript !== undefined && args.visibleScript !== null) {
        this.visibleScript = args.visibleScript;
      }
      if (args.readonlyScript !== undefined && args.readonlyScript !== null) {
        this.readonlyScript = args.readonlyScript;
      }
      if (args.onChangeScript !== undefined && args.onChangeScript !== null) {
        this.onChangeScript = args.onChangeScript;
      }
      if (args.allowForCurUser !== undefined && args.allowForCurUser !== null) {
        this.allowForCurUser = args.allowForCurUser;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.contentItem = new ContentItem();
          this.contentItem.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.requared = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.readOnly = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.order = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.showPlace = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.visible = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.visibleScript = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.readonlyScript = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.onChangeScript = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.BOOL) {
          this.allowForCurUser = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContentHolderLink');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.contentItem !== null && this.contentItem !== undefined) {
      output.writeFieldBegin('contentItem', Thrift.Type.STRUCT, 2);
      this.contentItem.write(output);
      output.writeFieldEnd();
    }
    if (this.requared !== null && this.requared !== undefined) {
      output.writeFieldBegin('requared', Thrift.Type.BOOL, 3);
      output.writeBool(this.requared);
      output.writeFieldEnd();
    }
    if (this.readOnly !== null && this.readOnly !== undefined) {
      output.writeFieldBegin('readOnly', Thrift.Type.BOOL, 4);
      output.writeBool(this.readOnly);
      output.writeFieldEnd();
    }
    if (this.order !== null && this.order !== undefined) {
      output.writeFieldBegin('order', Thrift.Type.I32, 5);
      output.writeI32(this.order);
      output.writeFieldEnd();
    }
    if (this.showPlace !== null && this.showPlace !== undefined) {
      output.writeFieldBegin('showPlace', Thrift.Type.I32, 6);
      output.writeI32(this.showPlace);
      output.writeFieldEnd();
    }
    if (this.visible !== null && this.visible !== undefined) {
      output.writeFieldBegin('visible', Thrift.Type.BOOL, 7);
      output.writeBool(this.visible);
      output.writeFieldEnd();
    }
    if (this.visibleScript !== null && this.visibleScript !== undefined) {
      output.writeFieldBegin('visibleScript', Thrift.Type.STRING, 8);
      output.writeString(this.visibleScript);
      output.writeFieldEnd();
    }
    if (this.readonlyScript !== null && this.readonlyScript !== undefined) {
      output.writeFieldBegin('readonlyScript', Thrift.Type.STRING, 9);
      output.writeString(this.readonlyScript);
      output.writeFieldEnd();
    }
    if (this.onChangeScript !== null && this.onChangeScript !== undefined) {
      output.writeFieldBegin('onChangeScript', Thrift.Type.STRING, 10);
      output.writeString(this.onChangeScript);
      output.writeFieldEnd();
    }
    if (this.allowForCurUser !== null && this.allowForCurUser !== undefined) {
      output.writeFieldBegin('allowForCurUser', Thrift.Type.BOOL, 11);
      output.writeBool(this.allowForCurUser);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
ContentTab = class {
  constructor(args) {
    this.id = null;
    this.oName = null;
    this.seqNum = null;
    this.contentItems = null;
    this.enableEdit = null;
    this.visibleOnShort = null;
    this.visibleOnFull = null;
    this.allowForCurUser = null;
    this.visible = null;
    this.editOnCreate = null;
    this.visibleOnCreate = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.oName !== undefined && args.oName !== null) {
        this.oName = args.oName;
      }
      if (args.seqNum !== undefined && args.seqNum !== null) {
        this.seqNum = args.seqNum;
      }
      if (args.contentItems !== undefined && args.contentItems !== null) {
        this.contentItems = Thrift.copyList(args.contentItems, [ContentItem]);
      }
      if (args.enableEdit !== undefined && args.enableEdit !== null) {
        this.enableEdit = Thrift.copyMap(args.enableEdit, [AccessRule]);
      }
      if (args.visibleOnShort !== undefined && args.visibleOnShort !== null) {
        this.visibleOnShort = args.visibleOnShort;
      }
      if (args.visibleOnFull !== undefined && args.visibleOnFull !== null) {
        this.visibleOnFull = args.visibleOnFull;
      }
      if (args.allowForCurUser !== undefined && args.allowForCurUser !== null) {
        this.allowForCurUser = args.allowForCurUser;
      }
      if (args.visible !== undefined && args.visible !== null) {
        this.visible = Thrift.copyMap(args.visible, [null]);
      }
      if (args.editOnCreate !== undefined && args.editOnCreate !== null) {
        this.editOnCreate = args.editOnCreate;
      }
      if (args.visibleOnCreate !== undefined && args.visibleOnCreate !== null) {
        this.visibleOnCreate = args.visibleOnCreate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.oName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.seqNum = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.contentItems = [];
          const _rtmp3205 = input.readListBegin();
          const _size204 = _rtmp3205.size || 0;
          for (let _i206 = 0; _i206 < _size204; ++_i206) {
            let elem207 = null;
            elem207 = new ContentItem();
            elem207.read(input);
            this.contentItems.push(elem207);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.MAP) {
          this.enableEdit = {};
          const _rtmp3209 = input.readMapBegin();
          const _size208 = _rtmp3209.size || 0;
          for (let _i210 = 0; _i210 < _size208; ++_i210) {
            if (_i210 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key211 = null;
            let val212 = null;
            key211 = input.readString().value;
            val212 = new AccessRule();
            val212.read(input);
            this.enableEdit[key211] = val212;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.visibleOnShort = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.visibleOnFull = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.BOOL) {
          this.allowForCurUser = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.MAP) {
          this.visible = {};
          const _rtmp3214 = input.readMapBegin();
          const _size213 = _rtmp3214.size || 0;
          for (let _i215 = 0; _i215 < _size213; ++_i215) {
            if (_i215 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key216 = null;
            let val217 = null;
            key216 = input.readString().value;
            val217 = input.readBool().value;
            this.visible[key216] = val217;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.BOOL) {
          this.editOnCreate = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.BOOL) {
          this.visibleOnCreate = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContentTab');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.oName !== null && this.oName !== undefined) {
      output.writeFieldBegin('oName', Thrift.Type.STRING, 2);
      output.writeString(this.oName);
      output.writeFieldEnd();
    }
    if (this.seqNum !== null && this.seqNum !== undefined) {
      output.writeFieldBegin('seqNum', Thrift.Type.I32, 3);
      output.writeI32(this.seqNum);
      output.writeFieldEnd();
    }
    if (this.contentItems !== null && this.contentItems !== undefined) {
      output.writeFieldBegin('contentItems', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.contentItems.length);
      for (let iter218 in this.contentItems) {
        if (this.contentItems.hasOwnProperty(iter218)) {
          iter218 = this.contentItems[iter218];
          iter218.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.enableEdit !== null && this.enableEdit !== undefined) {
      output.writeFieldBegin('enableEdit', Thrift.Type.MAP, 5);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.enableEdit));
      for (let kiter219 in this.enableEdit) {
        if (this.enableEdit.hasOwnProperty(kiter219)) {
          let viter220 = this.enableEdit[kiter219];
          output.writeString(kiter219);
          viter220.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.visibleOnShort !== null && this.visibleOnShort !== undefined) {
      output.writeFieldBegin('visibleOnShort', Thrift.Type.BOOL, 6);
      output.writeBool(this.visibleOnShort);
      output.writeFieldEnd();
    }
    if (this.visibleOnFull !== null && this.visibleOnFull !== undefined) {
      output.writeFieldBegin('visibleOnFull', Thrift.Type.BOOL, 7);
      output.writeBool(this.visibleOnFull);
      output.writeFieldEnd();
    }
    if (this.allowForCurUser !== null && this.allowForCurUser !== undefined) {
      output.writeFieldBegin('allowForCurUser', Thrift.Type.BOOL, 8);
      output.writeBool(this.allowForCurUser);
      output.writeFieldEnd();
    }
    if (this.visible !== null && this.visible !== undefined) {
      output.writeFieldBegin('visible', Thrift.Type.MAP, 9);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BOOL, Thrift.objectLength(this.visible));
      for (let kiter221 in this.visible) {
        if (this.visible.hasOwnProperty(kiter221)) {
          let viter222 = this.visible[kiter221];
          output.writeString(kiter221);
          output.writeBool(viter222);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.editOnCreate !== null && this.editOnCreate !== undefined) {
      output.writeFieldBegin('editOnCreate', Thrift.Type.BOOL, 10);
      output.writeBool(this.editOnCreate);
      output.writeFieldEnd();
    }
    if (this.visibleOnCreate !== null && this.visibleOnCreate !== undefined) {
      output.writeFieldBegin('visibleOnCreate', Thrift.Type.BOOL, 11);
      output.writeBool(this.visibleOnCreate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HistoryData = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.documentId = null;
    this.level = null;
    this.key = null;
    this.parameters = null;
    this.client = null;
    this.originalUser = null;
    this.docNumber = null;
    this.docSysNumber = null;
    this.attachmentId = null;
    this.attachmentFileName = null;
    this.ip1 = null;
    this.ip2 = null;
    this.patternId = null;
    this.hasDetailData = null;
    this.nomenclatureNumberId = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.documentId !== undefined && args.documentId !== null) {
        this.documentId = args.documentId;
      }
      if (args.level !== undefined && args.level !== null) {
        this.level = args.level;
      }
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.parameters !== undefined && args.parameters !== null) {
        this.parameters = Thrift.copyList(args.parameters, [null]);
      }
      if (args.client !== undefined && args.client !== null) {
        this.client = new UserOrGroup(args.client);
      }
      if (args.originalUser !== undefined && args.originalUser !== null) {
        this.originalUser = new UserOrGroup(args.originalUser);
      }
      if (args.docNumber !== undefined && args.docNumber !== null) {
        this.docNumber = args.docNumber;
      }
      if (args.docSysNumber !== undefined && args.docSysNumber !== null) {
        this.docSysNumber = args.docSysNumber;
      }
      if (args.attachmentId !== undefined && args.attachmentId !== null) {
        this.attachmentId = args.attachmentId;
      }
      if (args.attachmentFileName !== undefined && args.attachmentFileName !== null) {
        this.attachmentFileName = args.attachmentFileName;
      }
      if (args.ip1 !== undefined && args.ip1 !== null) {
        this.ip1 = args.ip1;
      }
      if (args.ip2 !== undefined && args.ip2 !== null) {
        this.ip2 = args.ip2;
      }
      if (args.patternId !== undefined && args.patternId !== null) {
        this.patternId = args.patternId;
      }
      if (args.hasDetailData !== undefined && args.hasDetailData !== null) {
        this.hasDetailData = args.hasDetailData;
      }
      if (args.nomenclatureNumberId !== undefined && args.nomenclatureNumberId !== null) {
        this.nomenclatureNumberId = args.nomenclatureNumberId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.documentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.level = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.parameters = [];
          const _rtmp3224 = input.readListBegin();
          const _size223 = _rtmp3224.size || 0;
          for (let _i225 = 0; _i225 < _size223; ++_i225) {
            let elem226 = null;
            elem226 = input.readString().value;
            this.parameters.push(elem226);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.client = new UserOrGroup();
          this.client.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRUCT) {
          this.originalUser = new UserOrGroup();
          this.originalUser.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.docNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.docSysNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.attachmentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.attachmentFileName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRING) {
          this.ip1 = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.ip2 = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.patternId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.BOOL) {
          this.hasDetailData = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRING) {
          this.nomenclatureNumberId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HistoryData');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.documentId !== null && this.documentId !== undefined) {
      output.writeFieldBegin('documentId', Thrift.Type.STRING, 3);
      output.writeString(this.documentId);
      output.writeFieldEnd();
    }
    if (this.level !== null && this.level !== undefined) {
      output.writeFieldBegin('level', Thrift.Type.I32, 4);
      output.writeI32(this.level);
      output.writeFieldEnd();
    }
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 5);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.parameters !== null && this.parameters !== undefined) {
      output.writeFieldBegin('parameters', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRING, this.parameters.length);
      for (let iter227 in this.parameters) {
        if (this.parameters.hasOwnProperty(iter227)) {
          iter227 = this.parameters[iter227];
          output.writeString(iter227);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.client !== null && this.client !== undefined) {
      output.writeFieldBegin('client', Thrift.Type.STRUCT, 7);
      this.client.write(output);
      output.writeFieldEnd();
    }
    if (this.originalUser !== null && this.originalUser !== undefined) {
      output.writeFieldBegin('originalUser', Thrift.Type.STRUCT, 8);
      this.originalUser.write(output);
      output.writeFieldEnd();
    }
    if (this.docNumber !== null && this.docNumber !== undefined) {
      output.writeFieldBegin('docNumber', Thrift.Type.STRING, 9);
      output.writeString(this.docNumber);
      output.writeFieldEnd();
    }
    if (this.docSysNumber !== null && this.docSysNumber !== undefined) {
      output.writeFieldBegin('docSysNumber', Thrift.Type.STRING, 10);
      output.writeString(this.docSysNumber);
      output.writeFieldEnd();
    }
    if (this.attachmentId !== null && this.attachmentId !== undefined) {
      output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 11);
      output.writeString(this.attachmentId);
      output.writeFieldEnd();
    }
    if (this.attachmentFileName !== null && this.attachmentFileName !== undefined) {
      output.writeFieldBegin('attachmentFileName', Thrift.Type.STRING, 12);
      output.writeString(this.attachmentFileName);
      output.writeFieldEnd();
    }
    if (this.ip1 !== null && this.ip1 !== undefined) {
      output.writeFieldBegin('ip1', Thrift.Type.STRING, 13);
      output.writeString(this.ip1);
      output.writeFieldEnd();
    }
    if (this.ip2 !== null && this.ip2 !== undefined) {
      output.writeFieldBegin('ip2', Thrift.Type.STRING, 14);
      output.writeString(this.ip2);
      output.writeFieldEnd();
    }
    if (this.patternId !== null && this.patternId !== undefined) {
      output.writeFieldBegin('patternId', Thrift.Type.STRING, 15);
      output.writeString(this.patternId);
      output.writeFieldEnd();
    }
    if (this.hasDetailData !== null && this.hasDetailData !== undefined) {
      output.writeFieldBegin('hasDetailData', Thrift.Type.BOOL, 16);
      output.writeBool(this.hasDetailData);
      output.writeFieldEnd();
    }
    if (this.nomenclatureNumberId !== null && this.nomenclatureNumberId !== undefined) {
      output.writeFieldBegin('nomenclatureNumberId', Thrift.Type.STRING, 17);
      output.writeString(this.nomenclatureNumberId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
HistoryPage = class {
  constructor(args) {
    this.historyList = null;
    this.totalCount = null;
    if (args) {
      if (args.historyList !== undefined && args.historyList !== null) {
        this.historyList = Thrift.copyList(args.historyList, [HistoryData]);
      }
      if (args.totalCount !== undefined && args.totalCount !== null) {
        this.totalCount = args.totalCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.historyList = [];
          const _rtmp3229 = input.readListBegin();
          const _size228 = _rtmp3229.size || 0;
          for (let _i230 = 0; _i230 < _size228; ++_i230) {
            let elem231 = null;
            elem231 = new HistoryData();
            elem231.read(input);
            this.historyList.push(elem231);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.totalCount = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('HistoryPage');
    if (this.historyList !== null && this.historyList !== undefined) {
      output.writeFieldBegin('historyList', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.historyList.length);
      for (let iter232 in this.historyList) {
        if (this.historyList.hasOwnProperty(iter232)) {
          iter232 = this.historyList[iter232];
          iter232.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.totalCount !== null && this.totalCount !== undefined) {
      output.writeFieldBegin('totalCount', Thrift.Type.I64, 2);
      output.writeI64(this.totalCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DeadlineHistory = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.creator = null;
    this.document = null;
    this.documentExecution = null;
    this.oldDeadlineDate = null;
    this.theNewDeadlineDate = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.creator !== undefined && args.creator !== null) {
        this.creator = new UserOrGroup(args.creator);
      }
      if (args.document !== undefined && args.document !== null) {
        this.document = new Document(args.document);
      }
      if (args.documentExecution !== undefined && args.documentExecution !== null) {
        this.documentExecution = new DocumentExecution(args.documentExecution);
      }
      if (args.oldDeadlineDate !== undefined && args.oldDeadlineDate !== null) {
        this.oldDeadlineDate = args.oldDeadlineDate;
      }
      if (args.theNewDeadlineDate !== undefined && args.theNewDeadlineDate !== null) {
        this.theNewDeadlineDate = args.theNewDeadlineDate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creator = new UserOrGroup();
          this.creator.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.document = new Document();
          this.document.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.documentExecution = new DocumentExecution();
          this.documentExecution.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.oldDeadlineDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.theNewDeadlineDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DeadlineHistory');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.creator !== null && this.creator !== undefined) {
      output.writeFieldBegin('creator', Thrift.Type.STRUCT, 3);
      this.creator.write(output);
      output.writeFieldEnd();
    }
    if (this.document !== null && this.document !== undefined) {
      output.writeFieldBegin('document', Thrift.Type.STRUCT, 4);
      this.document.write(output);
      output.writeFieldEnd();
    }
    if (this.documentExecution !== null && this.documentExecution !== undefined) {
      output.writeFieldBegin('documentExecution', Thrift.Type.STRUCT, 5);
      this.documentExecution.write(output);
      output.writeFieldEnd();
    }
    if (this.oldDeadlineDate !== null && this.oldDeadlineDate !== undefined) {
      output.writeFieldBegin('oldDeadlineDate', Thrift.Type.I64, 6);
      output.writeI64(this.oldDeadlineDate);
      output.writeFieldEnd();
    }
    if (this.theNewDeadlineDate !== null && this.theNewDeadlineDate !== undefined) {
      output.writeFieldBegin('theNewDeadlineDate', Thrift.Type.I64, 7);
      output.writeI64(this.theNewDeadlineDate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentExtShare = class {
  constructor(args) {
    this.id = null;
    this.documentId = null;
    this.shareType = null;
    this.userId = null;
    this.guestId = null;
    this.secretCode = null;
    this.ruleSet = null;
    this.validTillDate = null;
    this.creatorId = null;
    this.createDate = null;
    this.extId = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.documentId !== undefined && args.documentId !== null) {
        this.documentId = args.documentId;
      }
      if (args.shareType !== undefined && args.shareType !== null) {
        this.shareType = args.shareType;
      }
      if (args.userId !== undefined && args.userId !== null) {
        this.userId = args.userId;
      }
      if (args.guestId !== undefined && args.guestId !== null) {
        this.guestId = args.guestId;
      }
      if (args.secretCode !== undefined && args.secretCode !== null) {
        this.secretCode = args.secretCode;
      }
      if (args.ruleSet !== undefined && args.ruleSet !== null) {
        this.ruleSet = Thrift.copyList(args.ruleSet, [null]);
      }
      if (args.validTillDate !== undefined && args.validTillDate !== null) {
        this.validTillDate = args.validTillDate;
      }
      if (args.creatorId !== undefined && args.creatorId !== null) {
        this.creatorId = args.creatorId;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.extId !== undefined && args.extId !== null) {
        this.extId = args.extId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.documentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.shareType = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.guestId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.secretCode = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.SET) {
          this.ruleSet = [];
          const _rtmp3234 = input.readSetBegin();
          const _size233 = _rtmp3234.size || 0;
          for (let _i235 = 0; _i235 < _size233; ++_i235) {
            let elem236 = null;
            elem236 = input.readI32().value;
            this.ruleSet.push(elem236);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.validTillDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.creatorId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.extId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentExtShare');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.documentId !== null && this.documentId !== undefined) {
      output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
      output.writeString(this.documentId);
      output.writeFieldEnd();
    }
    if (this.shareType !== null && this.shareType !== undefined) {
      output.writeFieldBegin('shareType', Thrift.Type.STRING, 3);
      output.writeString(this.shareType);
      output.writeFieldEnd();
    }
    if (this.userId !== null && this.userId !== undefined) {
      output.writeFieldBegin('userId', Thrift.Type.STRING, 4);
      output.writeString(this.userId);
      output.writeFieldEnd();
    }
    if (this.guestId !== null && this.guestId !== undefined) {
      output.writeFieldBegin('guestId', Thrift.Type.STRING, 5);
      output.writeString(this.guestId);
      output.writeFieldEnd();
    }
    if (this.secretCode !== null && this.secretCode !== undefined) {
      output.writeFieldBegin('secretCode', Thrift.Type.STRING, 6);
      output.writeString(this.secretCode);
      output.writeFieldEnd();
    }
    if (this.ruleSet !== null && this.ruleSet !== undefined) {
      output.writeFieldBegin('ruleSet', Thrift.Type.SET, 7);
      output.writeSetBegin(Thrift.Type.I32, this.ruleSet.length);
      for (let iter237 in this.ruleSet) {
        if (this.ruleSet.hasOwnProperty(iter237)) {
          iter237 = this.ruleSet[iter237];
          output.writeI32(iter237);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.validTillDate !== null && this.validTillDate !== undefined) {
      output.writeFieldBegin('validTillDate', Thrift.Type.I64, 8);
      output.writeI64(this.validTillDate);
      output.writeFieldEnd();
    }
    if (this.creatorId !== null && this.creatorId !== undefined) {
      output.writeFieldBegin('creatorId', Thrift.Type.STRING, 9);
      output.writeString(this.creatorId);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 10);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.extId !== null && this.extId !== undefined) {
      output.writeFieldBegin('extId', Thrift.Type.STRING, 11);
      output.writeString(this.extId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
PatternVariable = class {
  constructor(args) {
    this.id = null;
    this.key = null;
    this.defValue = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.defValue !== undefined && args.defValue !== null) {
        this.defValue = args.defValue;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.defValue = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PatternVariable');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 2);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.defValue !== null && this.defValue !== undefined) {
      output.writeFieldBegin('defValue', Thrift.Type.STRING, 3);
      output.writeString(this.defValue);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
PatternProcessRoleExec = class {
  constructor(args) {
    this.userOrGroup = null;
    this.childUserId = null;
    this.comment = null;
    this.commentDescription = null;
    this.deadlineDate = null;
    if (args) {
      if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
        this.userOrGroup = new UserOrGroup(args.userOrGroup);
      }
      if (args.childUserId !== undefined && args.childUserId !== null) {
        this.childUserId = args.childUserId;
      }
      if (args.comment !== undefined && args.comment !== null) {
        this.comment = args.comment;
      }
      if (args.commentDescription !== undefined && args.commentDescription !== null) {
        this.commentDescription = args.commentDescription;
      }
      if (args.deadlineDate !== undefined && args.deadlineDate !== null) {
        this.deadlineDate = args.deadlineDate;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userOrGroup = new UserOrGroup();
          this.userOrGroup.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.childUserId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.comment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.commentDescription = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.deadlineDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PatternProcessRoleExec');
    if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
      output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 1);
      this.userOrGroup.write(output);
      output.writeFieldEnd();
    }
    if (this.childUserId !== null && this.childUserId !== undefined) {
      output.writeFieldBegin('childUserId', Thrift.Type.STRING, 2);
      output.writeString(this.childUserId);
      output.writeFieldEnd();
    }
    if (this.comment !== null && this.comment !== undefined) {
      output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
      output.writeString(this.comment);
      output.writeFieldEnd();
    }
    if (this.commentDescription !== null && this.commentDescription !== undefined) {
      output.writeFieldBegin('commentDescription', Thrift.Type.STRING, 4);
      output.writeString(this.commentDescription);
      output.writeFieldEnd();
    }
    if (this.deadlineDate !== null && this.deadlineDate !== undefined) {
      output.writeFieldBegin('deadlineDate', Thrift.Type.I64, 5);
      output.writeI64(this.deadlineDate);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
PatternProcessRole = class {
  constructor(args) {
    this.id = null;
    this.key = null;
    this.oName = null;
    this.fixed = null;
    this.single = null;
    this.roleExecList = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.oName !== undefined && args.oName !== null) {
        this.oName = args.oName;
      }
      if (args.fixed !== undefined && args.fixed !== null) {
        this.fixed = args.fixed;
      }
      if (args.single !== undefined && args.single !== null) {
        this.single = args.single;
      }
      if (args.roleExecList !== undefined && args.roleExecList !== null) {
        this.roleExecList = Thrift.copyList(args.roleExecList, [PatternProcessRoleExec]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.oName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.fixed = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.single = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.roleExecList = [];
          const _rtmp3239 = input.readListBegin();
          const _size238 = _rtmp3239.size || 0;
          for (let _i240 = 0; _i240 < _size238; ++_i240) {
            let elem241 = null;
            elem241 = new PatternProcessRoleExec();
            elem241.read(input);
            this.roleExecList.push(elem241);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PatternProcessRole');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 2);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.oName !== null && this.oName !== undefined) {
      output.writeFieldBegin('oName', Thrift.Type.STRING, 3);
      output.writeString(this.oName);
      output.writeFieldEnd();
    }
    if (this.fixed !== null && this.fixed !== undefined) {
      output.writeFieldBegin('fixed', Thrift.Type.BOOL, 4);
      output.writeBool(this.fixed);
      output.writeFieldEnd();
    }
    if (this.single !== null && this.single !== undefined) {
      output.writeFieldBegin('single', Thrift.Type.BOOL, 5);
      output.writeBool(this.single);
      output.writeFieldEnd();
    }
    if (this.roleExecList !== null && this.roleExecList !== undefined) {
      output.writeFieldBegin('roleExecList', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.roleExecList.length);
      for (let iter242 in this.roleExecList) {
        if (this.roleExecList.hasOwnProperty(iter242)) {
          iter242 = this.roleExecList[iter242];
          iter242.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentRelationInfo = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.name = null;
    this.systemNumber = null;
    this.numberDocument = null;
    this.registrationDate = null;
    this.doc2Access = null;
    this.status = null;
    this.subStatus = null;
    this.deadlineDate = null;
    this.cardDeadlineDate = null;
    this.icon = null;
    this.patternName = null;
    this.stageName = null;
    this.actionMap = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.systemNumber !== undefined && args.systemNumber !== null) {
        this.systemNumber = args.systemNumber;
      }
      if (args.numberDocument !== undefined && args.numberDocument !== null) {
        this.numberDocument = args.numberDocument;
      }
      if (args.registrationDate !== undefined && args.registrationDate !== null) {
        this.registrationDate = args.registrationDate;
      }
      if (args.doc2Access !== undefined && args.doc2Access !== null) {
        this.doc2Access = args.doc2Access;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.subStatus !== undefined && args.subStatus !== null) {
        this.subStatus = args.subStatus;
      }
      if (args.deadlineDate !== undefined && args.deadlineDate !== null) {
        this.deadlineDate = args.deadlineDate;
      }
      if (args.cardDeadlineDate !== undefined && args.cardDeadlineDate !== null) {
        this.cardDeadlineDate = args.cardDeadlineDate;
      }
      if (args.icon !== undefined && args.icon !== null) {
        this.icon = args.icon;
      }
      if (args.patternName !== undefined && args.patternName !== null) {
        this.patternName = args.patternName;
      }
      if (args.stageName !== undefined && args.stageName !== null) {
        this.stageName = args.stageName;
      }
      if (args.actionMap !== undefined && args.actionMap !== null) {
        this.actionMap = Thrift.copyMap(args.actionMap, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.systemNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.numberDocument = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.registrationDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.doc2Access = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.subStatus = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I64) {
          this.deadlineDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.cardDeadlineDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.icon = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRING) {
          this.patternName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.stageName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.MAP) {
          this.actionMap = {};
          const _rtmp3244 = input.readMapBegin();
          const _size243 = _rtmp3244.size || 0;
          for (let _i245 = 0; _i245 < _size243; ++_i245) {
            if (_i245 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            let key246 = null;
            let val247 = null;
            key246 = input.readString().value;
            val247 = input.readI32().value;
            this.actionMap[key246] = val247;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentRelationInfo');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 3);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.systemNumber !== null && this.systemNumber !== undefined) {
      output.writeFieldBegin('systemNumber', Thrift.Type.STRING, 4);
      output.writeString(this.systemNumber);
      output.writeFieldEnd();
    }
    if (this.numberDocument !== null && this.numberDocument !== undefined) {
      output.writeFieldBegin('numberDocument', Thrift.Type.STRING, 5);
      output.writeString(this.numberDocument);
      output.writeFieldEnd();
    }
    if (this.registrationDate !== null && this.registrationDate !== undefined) {
      output.writeFieldBegin('registrationDate', Thrift.Type.I64, 6);
      output.writeI64(this.registrationDate);
      output.writeFieldEnd();
    }
    if (this.doc2Access !== null && this.doc2Access !== undefined) {
      output.writeFieldBegin('doc2Access', Thrift.Type.BOOL, 7);
      output.writeBool(this.doc2Access);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 8);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.subStatus !== null && this.subStatus !== undefined) {
      output.writeFieldBegin('subStatus', Thrift.Type.I32, 9);
      output.writeI32(this.subStatus);
      output.writeFieldEnd();
    }
    if (this.deadlineDate !== null && this.deadlineDate !== undefined) {
      output.writeFieldBegin('deadlineDate', Thrift.Type.I64, 10);
      output.writeI64(this.deadlineDate);
      output.writeFieldEnd();
    }
    if (this.cardDeadlineDate !== null && this.cardDeadlineDate !== undefined) {
      output.writeFieldBegin('cardDeadlineDate', Thrift.Type.I64, 11);
      output.writeI64(this.cardDeadlineDate);
      output.writeFieldEnd();
    }
    if (this.icon !== null && this.icon !== undefined) {
      output.writeFieldBegin('icon', Thrift.Type.I32, 12);
      output.writeI32(this.icon);
      output.writeFieldEnd();
    }
    if (this.patternName !== null && this.patternName !== undefined) {
      output.writeFieldBegin('patternName', Thrift.Type.STRING, 13);
      output.writeString(this.patternName);
      output.writeFieldEnd();
    }
    if (this.stageName !== null && this.stageName !== undefined) {
      output.writeFieldBegin('stageName', Thrift.Type.STRING, 14);
      output.writeString(this.stageName);
      output.writeFieldEnd();
    }
    if (this.actionMap !== null && this.actionMap !== undefined) {
      output.writeFieldBegin('actionMap', Thrift.Type.MAP, 15);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.actionMap));
      for (let kiter248 in this.actionMap) {
        if (this.actionMap.hasOwnProperty(kiter248)) {
          let viter249 = this.actionMap[kiter248];
          output.writeString(kiter248);
          output.writeI32(viter249);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentRelationLink = class {
  constructor(args) {
    this.fromId = null;
    this.toId = null;
    this.linkType = null;
    this.isAuto = null;
    if (args) {
      if (args.fromId !== undefined && args.fromId !== null) {
        this.fromId = args.fromId;
      }
      if (args.toId !== undefined && args.toId !== null) {
        this.toId = args.toId;
      }
      if (args.linkType !== undefined && args.linkType !== null) {
        this.linkType = args.linkType;
      }
      if (args.isAuto !== undefined && args.isAuto !== null) {
        this.isAuto = args.isAuto;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.fromId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.toId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.linkType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.isAuto = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentRelationLink');
    if (this.fromId !== null && this.fromId !== undefined) {
      output.writeFieldBegin('fromId', Thrift.Type.STRING, 1);
      output.writeString(this.fromId);
      output.writeFieldEnd();
    }
    if (this.toId !== null && this.toId !== undefined) {
      output.writeFieldBegin('toId', Thrift.Type.STRING, 2);
      output.writeString(this.toId);
      output.writeFieldEnd();
    }
    if (this.linkType !== null && this.linkType !== undefined) {
      output.writeFieldBegin('linkType', Thrift.Type.I32, 3);
      output.writeI32(this.linkType);
      output.writeFieldEnd();
    }
    if (this.isAuto !== null && this.isAuto !== undefined) {
      output.writeFieldBegin('isAuto', Thrift.Type.BOOL, 4);
      output.writeBool(this.isAuto);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
DocumentRelationModel = class {
  constructor(args) {
    this.docId = null;
    this.docRelInfoList = null;
    this.docRelLinkList = null;
    if (args) {
      if (args.docId !== undefined && args.docId !== null) {
        this.docId = args.docId;
      }
      if (args.docRelInfoList !== undefined && args.docRelInfoList !== null) {
        this.docRelInfoList = Thrift.copyList(args.docRelInfoList, [DocumentRelationInfo]);
      }
      if (args.docRelLinkList !== undefined && args.docRelLinkList !== null) {
        this.docRelLinkList = Thrift.copyList(args.docRelLinkList, [DocumentRelationLink]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.docId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.docRelInfoList = [];
          const _rtmp3251 = input.readListBegin();
          const _size250 = _rtmp3251.size || 0;
          for (let _i252 = 0; _i252 < _size250; ++_i252) {
            let elem253 = null;
            elem253 = new DocumentRelationInfo();
            elem253.read(input);
            this.docRelInfoList.push(elem253);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.docRelLinkList = [];
          const _rtmp3255 = input.readListBegin();
          const _size254 = _rtmp3255.size || 0;
          for (let _i256 = 0; _i256 < _size254; ++_i256) {
            let elem257 = null;
            elem257 = new DocumentRelationLink();
            elem257.read(input);
            this.docRelLinkList.push(elem257);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DocumentRelationModel');
    if (this.docId !== null && this.docId !== undefined) {
      output.writeFieldBegin('docId', Thrift.Type.STRING, 1);
      output.writeString(this.docId);
      output.writeFieldEnd();
    }
    if (this.docRelInfoList !== null && this.docRelInfoList !== undefined) {
      output.writeFieldBegin('docRelInfoList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.docRelInfoList.length);
      for (let iter258 in this.docRelInfoList) {
        if (this.docRelInfoList.hasOwnProperty(iter258)) {
          iter258 = this.docRelInfoList[iter258];
          iter258.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.docRelLinkList !== null && this.docRelLinkList !== undefined) {
      output.writeFieldBegin('docRelLinkList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.docRelLinkList.length);
      for (let iter259 in this.docRelLinkList) {
        if (this.docRelLinkList.hasOwnProperty(iter259)) {
          iter259 = this.docRelLinkList[iter259];
          iter259.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
