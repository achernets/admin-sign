//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


MrkContactType = {
  'EMAIL' : 0,
  'PHONE' : 1
};
MrkDocumentType = {
  'DRAFT' : 0,
  'INPUT' : 1,
  'OUTPUT' : 2
};
MrkDocResponceType = {
  'OPTIONAL_NEW' : 0,
  'REQUIRED_SAME' : 1,
  'REQUIRED_NEW' : 2,
  'PROHIBITED' : 3
};
MrkDocumentRespStatus = {
  'OPTIONAL' : 0,
  'REQUIRED' : 1,
  'PROHIBITED' : 2,
  'DRAFT' : 3,
  'SEND' : 4,
  'CANCELED' : 5
};
MrkHistoryKey = {
  'CLIENT_LOGIN' : 0,
  'CLIENT_CREATED' : 1,
  'ACCOUNT_CHANGED' : 2,
  'ACCOUNT_CREATED' : 3,
  'ORGANIZATION_CREATED' : 4,
  'DOCUMENT_UPDATE' : 5,
  'DOCUMENT_CREATE' : 6,
  'DOCUMENT_VIEW' : 7,
  'ATTACHMENT_CREATED' : 8,
  'USER_REMOVED' : 9,
  'USER_CHANGED' : 10
};
MrkContactInfo = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.cType = null;
    this.cValue = null;
    this.verified = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.cType !== undefined && args.cType !== null) {
        this.cType = args.cType;
      }
      if (args.cValue !== undefined && args.cValue !== null) {
        this.cValue = args.cValue;
      }
      if (args.verified !== undefined && args.verified !== null) {
        this.verified = args.verified;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.cType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.cValue = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.verified = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkContactInfo');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.cType !== null && this.cType !== undefined) {
      output.writeFieldBegin('cType', Thrift.Type.I32, 3);
      output.writeI32(this.cType);
      output.writeFieldEnd();
    }
    if (this.cValue !== null && this.cValue !== undefined) {
      output.writeFieldBegin('cValue', Thrift.Type.STRING, 4);
      output.writeString(this.cValue);
      output.writeFieldEnd();
    }
    if (this.verified !== null && this.verified !== undefined) {
      output.writeFieldBegin('verified', Thrift.Type.BOOL, 5);
      output.writeBool(this.verified);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkClient = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.deleteDate = null;
    this.login = null;
    this.firstName = null;
    this.lastName = null;
    this.middleName = null;
    this.position = null;
    this.contacts = null;
    this.inn = null;
    this.birthDate = null;
    this.chief = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.deleteDate !== undefined && args.deleteDate !== null) {
        this.deleteDate = args.deleteDate;
      }
      if (args.login !== undefined && args.login !== null) {
        this.login = args.login;
      }
      if (args.firstName !== undefined && args.firstName !== null) {
        this.firstName = args.firstName;
      }
      if (args.lastName !== undefined && args.lastName !== null) {
        this.lastName = args.lastName;
      }
      if (args.middleName !== undefined && args.middleName !== null) {
        this.middleName = args.middleName;
      }
      if (args.position !== undefined && args.position !== null) {
        this.position = args.position;
      }
      if (args.contacts !== undefined && args.contacts !== null) {
        this.contacts = Thrift.copyList(args.contacts, [MrkContactInfo]);
      }
      if (args.inn !== undefined && args.inn !== null) {
        this.inn = args.inn;
      }
      if (args.birthDate !== undefined && args.birthDate !== null) {
        this.birthDate = args.birthDate;
      }
      if (args.chief !== undefined && args.chief !== null) {
        this.chief = args.chief;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.deleteDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.login = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.firstName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.lastName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.middleName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.position = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.LIST) {
          this.contacts = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new MrkContactInfo();
            elem3.read(input);
            this.contacts.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.inn = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.I64) {
          this.birthDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.BOOL) {
          this.chief = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkClient');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.deleteDate !== null && this.deleteDate !== undefined) {
      output.writeFieldBegin('deleteDate', Thrift.Type.I64, 3);
      output.writeI64(this.deleteDate);
      output.writeFieldEnd();
    }
    if (this.login !== null && this.login !== undefined) {
      output.writeFieldBegin('login', Thrift.Type.STRING, 4);
      output.writeString(this.login);
      output.writeFieldEnd();
    }
    if (this.firstName !== null && this.firstName !== undefined) {
      output.writeFieldBegin('firstName', Thrift.Type.STRING, 5);
      output.writeString(this.firstName);
      output.writeFieldEnd();
    }
    if (this.lastName !== null && this.lastName !== undefined) {
      output.writeFieldBegin('lastName', Thrift.Type.STRING, 6);
      output.writeString(this.lastName);
      output.writeFieldEnd();
    }
    if (this.middleName !== null && this.middleName !== undefined) {
      output.writeFieldBegin('middleName', Thrift.Type.STRING, 7);
      output.writeString(this.middleName);
      output.writeFieldEnd();
    }
    if (this.position !== null && this.position !== undefined) {
      output.writeFieldBegin('position', Thrift.Type.STRING, 8);
      output.writeString(this.position);
      output.writeFieldEnd();
    }
    if (this.contacts !== null && this.contacts !== undefined) {
      output.writeFieldBegin('contacts', Thrift.Type.LIST, 9);
      output.writeListBegin(Thrift.Type.STRUCT, this.contacts.length);
      for (let iter4 in this.contacts) {
        if (this.contacts.hasOwnProperty(iter4)) {
          iter4 = this.contacts[iter4];
          iter4.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.inn !== null && this.inn !== undefined) {
      output.writeFieldBegin('inn', Thrift.Type.STRING, 10);
      output.writeString(this.inn);
      output.writeFieldEnd();
    }
    if (this.birthDate !== null && this.birthDate !== undefined) {
      output.writeFieldBegin('birthDate', Thrift.Type.I64, 11);
      output.writeI64(this.birthDate);
      output.writeFieldEnd();
    }
    if (this.chief !== null && this.chief !== undefined) {
      output.writeFieldBegin('chief', Thrift.Type.BOOL, 12);
      output.writeBool(this.chief);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkOrganization = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.name = null;
    this.edrpo = null;
    this.adress = null;
    this.regAdress = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.edrpo !== undefined && args.edrpo !== null) {
        this.edrpo = args.edrpo;
      }
      if (args.adress !== undefined && args.adress !== null) {
        this.adress = args.adress;
      }
      if (args.regAdress !== undefined && args.regAdress !== null) {
        this.regAdress = args.regAdress;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.edrpo = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.adress = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.regAdress = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkOrganization');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 3);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.edrpo !== null && this.edrpo !== undefined) {
      output.writeFieldBegin('edrpo', Thrift.Type.STRING, 4);
      output.writeString(this.edrpo);
      output.writeFieldEnd();
    }
    if (this.adress !== null && this.adress !== undefined) {
      output.writeFieldBegin('adress', Thrift.Type.STRING, 5);
      output.writeString(this.adress);
      output.writeFieldEnd();
    }
    if (this.regAdress !== null && this.regAdress !== undefined) {
      output.writeFieldBegin('regAdress', Thrift.Type.STRING, 6);
      output.writeString(this.regAdress);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkAccount = class {
  constructor(args) {
    this.id = null;
    this.clientList = null;
    this.organization = null;
    this.confirmed = null;
    this.contragent = null;
    this.blocked = null;
    this.signed = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.clientList !== undefined && args.clientList !== null) {
        this.clientList = Thrift.copyList(args.clientList, [MrkClient]);
      }
      if (args.organization !== undefined && args.organization !== null) {
        this.organization = new MrkOrganization(args.organization);
      }
      if (args.confirmed !== undefined && args.confirmed !== null) {
        this.confirmed = args.confirmed;
      }
      if (args.contragent !== undefined && args.contragent !== null) {
        this.contragent = args.contragent;
      }
      if (args.blocked !== undefined && args.blocked !== null) {
        this.blocked = args.blocked;
      }
      if (args.signed !== undefined && args.signed !== null) {
        this.signed = args.signed;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.clientList = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = new MrkClient();
            elem8.read(input);
            this.clientList.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.organization = new MrkOrganization();
          this.organization.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.confirmed = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.contragent = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.blocked = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.signed = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkAccount');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.clientList !== null && this.clientList !== undefined) {
      output.writeFieldBegin('clientList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.clientList.length);
      for (let iter9 in this.clientList) {
        if (this.clientList.hasOwnProperty(iter9)) {
          iter9 = this.clientList[iter9];
          iter9.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.organization !== null && this.organization !== undefined) {
      output.writeFieldBegin('organization', Thrift.Type.STRUCT, 3);
      this.organization.write(output);
      output.writeFieldEnd();
    }
    if (this.confirmed !== null && this.confirmed !== undefined) {
      output.writeFieldBegin('confirmed', Thrift.Type.BOOL, 4);
      output.writeBool(this.confirmed);
      output.writeFieldEnd();
    }
    if (this.contragent !== null && this.contragent !== undefined) {
      output.writeFieldBegin('contragent', Thrift.Type.BOOL, 5);
      output.writeBool(this.contragent);
      output.writeFieldEnd();
    }
    if (this.blocked !== null && this.blocked !== undefined) {
      output.writeFieldBegin('blocked', Thrift.Type.BOOL, 6);
      output.writeBool(this.blocked);
      output.writeFieldEnd();
    }
    if (this.signed !== null && this.signed !== undefined) {
      output.writeFieldBegin('signed', Thrift.Type.BOOL, 7);
      output.writeBool(this.signed);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkClientSession = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.client = null;
    this.organization = null;
    this.accountId = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.client !== undefined && args.client !== null) {
        this.client = new MrkClient(args.client);
      }
      if (args.organization !== undefined && args.organization !== null) {
        this.organization = new MrkOrganization(args.organization);
      }
      if (args.accountId !== undefined && args.accountId !== null) {
        this.accountId = args.accountId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.client = new MrkClient();
          this.client.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.organization = new MrkOrganization();
          this.organization.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.accountId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkClientSession');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.client !== null && this.client !== undefined) {
      output.writeFieldBegin('client', Thrift.Type.STRUCT, 3);
      this.client.write(output);
      output.writeFieldEnd();
    }
    if (this.organization !== null && this.organization !== undefined) {
      output.writeFieldBegin('organization', Thrift.Type.STRUCT, 4);
      this.organization.write(output);
      output.writeFieldEnd();
    }
    if (this.accountId !== null && this.accountId !== undefined) {
      output.writeFieldBegin('accountId', Thrift.Type.STRING, 5);
      output.writeString(this.accountId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkUser = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.deleteDate = null;
    this.login = null;
    this.firstName = null;
    this.lastName = null;
    this.middleName = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.deleteDate !== undefined && args.deleteDate !== null) {
        this.deleteDate = args.deleteDate;
      }
      if (args.login !== undefined && args.login !== null) {
        this.login = args.login;
      }
      if (args.firstName !== undefined && args.firstName !== null) {
        this.firstName = args.firstName;
      }
      if (args.lastName !== undefined && args.lastName !== null) {
        this.lastName = args.lastName;
      }
      if (args.middleName !== undefined && args.middleName !== null) {
        this.middleName = args.middleName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.deleteDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.login = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.firstName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.lastName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.middleName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkUser');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.deleteDate !== null && this.deleteDate !== undefined) {
      output.writeFieldBegin('deleteDate', Thrift.Type.I64, 3);
      output.writeI64(this.deleteDate);
      output.writeFieldEnd();
    }
    if (this.login !== null && this.login !== undefined) {
      output.writeFieldBegin('login', Thrift.Type.STRING, 4);
      output.writeString(this.login);
      output.writeFieldEnd();
    }
    if (this.firstName !== null && this.firstName !== undefined) {
      output.writeFieldBegin('firstName', Thrift.Type.STRING, 5);
      output.writeString(this.firstName);
      output.writeFieldEnd();
    }
    if (this.lastName !== null && this.lastName !== undefined) {
      output.writeFieldBegin('lastName', Thrift.Type.STRING, 6);
      output.writeString(this.lastName);
      output.writeFieldEnd();
    }
    if (this.middleName !== null && this.middleName !== undefined) {
      output.writeFieldBegin('middleName', Thrift.Type.STRING, 7);
      output.writeString(this.middleName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkUserPage = class {
  constructor(args) {
    this.users = null;
    this.count = null;
    if (args) {
      if (args.users !== undefined && args.users !== null) {
        this.users = Thrift.copyList(args.users, [MrkUser]);
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.users = [];
          const _rtmp311 = input.readListBegin();
          const _size10 = _rtmp311.size || 0;
          for (let _i12 = 0; _i12 < _size10; ++_i12) {
            let elem13 = null;
            elem13 = new MrkUser();
            elem13.read(input);
            this.users.push(elem13);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkUserPage');
    if (this.users !== null && this.users !== undefined) {
      output.writeFieldBegin('users', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
      for (let iter14 in this.users) {
        if (this.users.hasOwnProperty(iter14)) {
          iter14 = this.users[iter14];
          iter14.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 2);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkUserSession = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.user = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.user !== undefined && args.user !== null) {
        this.user = new MrkUser(args.user);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.user = new MrkUser();
          this.user.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkUserSession');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin('user', Thrift.Type.STRUCT, 3);
      this.user.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkDocument = class {
  constructor(args) {
    this.id = null;
    this.extId = null;
    this.extIteration = null;
    this.accountId = null;
    this.patternId = null;
    this.patternName = null;
    this.name = null;
    this.type = null;
    this.createDate = null;
    this.parentId = null;
    this.viewed = null;
    this.sendDate = null;
    this.receiveDate = null;
    this.creatorId = null;
    this.groupNumber = null;
    this.signInSystem = null;
    this.extCameFrom = null;
    this.extAuthorName = null;
    this.extAuthorEmail = null;
    this.extRespExecId = null;
    this.extRespPatternId = null;
    this.extRespReq = null;
    this.hasAttachments = null;
    this.hasDigitalSign = null;
    this.documentNumber = null;
    this.documentRegDate = null;
    this.externalNumber = null;
    this.externalRegDate = null;
    this.cancelDate = null;
    this.respStatus = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.extId !== undefined && args.extId !== null) {
        this.extId = args.extId;
      }
      if (args.extIteration !== undefined && args.extIteration !== null) {
        this.extIteration = args.extIteration;
      }
      if (args.accountId !== undefined && args.accountId !== null) {
        this.accountId = args.accountId;
      }
      if (args.patternId !== undefined && args.patternId !== null) {
        this.patternId = args.patternId;
      }
      if (args.patternName !== undefined && args.patternName !== null) {
        this.patternName = args.patternName;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.parentId !== undefined && args.parentId !== null) {
        this.parentId = args.parentId;
      }
      if (args.viewed !== undefined && args.viewed !== null) {
        this.viewed = args.viewed;
      }
      if (args.sendDate !== undefined && args.sendDate !== null) {
        this.sendDate = args.sendDate;
      }
      if (args.receiveDate !== undefined && args.receiveDate !== null) {
        this.receiveDate = args.receiveDate;
      }
      if (args.creatorId !== undefined && args.creatorId !== null) {
        this.creatorId = args.creatorId;
      }
      if (args.groupNumber !== undefined && args.groupNumber !== null) {
        this.groupNumber = args.groupNumber;
      }
      if (args.signInSystem !== undefined && args.signInSystem !== null) {
        this.signInSystem = args.signInSystem;
      }
      if (args.extCameFrom !== undefined && args.extCameFrom !== null) {
        this.extCameFrom = args.extCameFrom;
      }
      if (args.extAuthorName !== undefined && args.extAuthorName !== null) {
        this.extAuthorName = args.extAuthorName;
      }
      if (args.extAuthorEmail !== undefined && args.extAuthorEmail !== null) {
        this.extAuthorEmail = args.extAuthorEmail;
      }
      if (args.extRespExecId !== undefined && args.extRespExecId !== null) {
        this.extRespExecId = args.extRespExecId;
      }
      if (args.extRespPatternId !== undefined && args.extRespPatternId !== null) {
        this.extRespPatternId = args.extRespPatternId;
      }
      if (args.extRespReq !== undefined && args.extRespReq !== null) {
        this.extRespReq = args.extRespReq;
      }
      if (args.hasAttachments !== undefined && args.hasAttachments !== null) {
        this.hasAttachments = args.hasAttachments;
      }
      if (args.hasDigitalSign !== undefined && args.hasDigitalSign !== null) {
        this.hasDigitalSign = args.hasDigitalSign;
      }
      if (args.documentNumber !== undefined && args.documentNumber !== null) {
        this.documentNumber = args.documentNumber;
      }
      if (args.documentRegDate !== undefined && args.documentRegDate !== null) {
        this.documentRegDate = args.documentRegDate;
      }
      if (args.externalNumber !== undefined && args.externalNumber !== null) {
        this.externalNumber = args.externalNumber;
      }
      if (args.externalRegDate !== undefined && args.externalRegDate !== null) {
        this.externalRegDate = args.externalRegDate;
      }
      if (args.cancelDate !== undefined && args.cancelDate !== null) {
        this.cancelDate = args.cancelDate;
      }
      if (args.respStatus !== undefined && args.respStatus !== null) {
        this.respStatus = args.respStatus;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.extId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.extIteration = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.accountId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.patternId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.patternName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.parentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.BOOL) {
          this.viewed = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I64) {
          this.sendDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.I64) {
          this.receiveDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.creatorId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.STRING) {
          this.groupNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.I32) {
          this.signInSystem = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 17:
        if (ftype == Thrift.Type.STRING) {
          this.extCameFrom = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 18:
        if (ftype == Thrift.Type.STRING) {
          this.extAuthorName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 19:
        if (ftype == Thrift.Type.STRING) {
          this.extAuthorEmail = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 20:
        if (ftype == Thrift.Type.STRING) {
          this.extRespExecId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 21:
        if (ftype == Thrift.Type.STRING) {
          this.extRespPatternId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 22:
        if (ftype == Thrift.Type.I32) {
          this.extRespReq = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 23:
        if (ftype == Thrift.Type.BOOL) {
          this.hasAttachments = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 24:
        if (ftype == Thrift.Type.BOOL) {
          this.hasDigitalSign = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 25:
        if (ftype == Thrift.Type.STRING) {
          this.documentNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 26:
        if (ftype == Thrift.Type.I64) {
          this.documentRegDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 27:
        if (ftype == Thrift.Type.STRING) {
          this.externalNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 28:
        if (ftype == Thrift.Type.I64) {
          this.externalRegDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 29:
        if (ftype == Thrift.Type.I64) {
          this.cancelDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 30:
        if (ftype == Thrift.Type.I32) {
          this.respStatus = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkDocument');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.extId !== null && this.extId !== undefined) {
      output.writeFieldBegin('extId', Thrift.Type.STRING, 2);
      output.writeString(this.extId);
      output.writeFieldEnd();
    }
    if (this.extIteration !== null && this.extIteration !== undefined) {
      output.writeFieldBegin('extIteration', Thrift.Type.STRING, 3);
      output.writeString(this.extIteration);
      output.writeFieldEnd();
    }
    if (this.accountId !== null && this.accountId !== undefined) {
      output.writeFieldBegin('accountId', Thrift.Type.STRING, 4);
      output.writeString(this.accountId);
      output.writeFieldEnd();
    }
    if (this.patternId !== null && this.patternId !== undefined) {
      output.writeFieldBegin('patternId', Thrift.Type.STRING, 5);
      output.writeString(this.patternId);
      output.writeFieldEnd();
    }
    if (this.patternName !== null && this.patternName !== undefined) {
      output.writeFieldBegin('patternName', Thrift.Type.STRING, 6);
      output.writeString(this.patternName);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 7);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 8);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 9);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.parentId !== null && this.parentId !== undefined) {
      output.writeFieldBegin('parentId', Thrift.Type.STRING, 10);
      output.writeString(this.parentId);
      output.writeFieldEnd();
    }
    if (this.viewed !== null && this.viewed !== undefined) {
      output.writeFieldBegin('viewed', Thrift.Type.BOOL, 11);
      output.writeBool(this.viewed);
      output.writeFieldEnd();
    }
    if (this.sendDate !== null && this.sendDate !== undefined) {
      output.writeFieldBegin('sendDate', Thrift.Type.I64, 12);
      output.writeI64(this.sendDate);
      output.writeFieldEnd();
    }
    if (this.receiveDate !== null && this.receiveDate !== undefined) {
      output.writeFieldBegin('receiveDate', Thrift.Type.I64, 13);
      output.writeI64(this.receiveDate);
      output.writeFieldEnd();
    }
    if (this.creatorId !== null && this.creatorId !== undefined) {
      output.writeFieldBegin('creatorId', Thrift.Type.STRING, 14);
      output.writeString(this.creatorId);
      output.writeFieldEnd();
    }
    if (this.groupNumber !== null && this.groupNumber !== undefined) {
      output.writeFieldBegin('groupNumber', Thrift.Type.STRING, 15);
      output.writeString(this.groupNumber);
      output.writeFieldEnd();
    }
    if (this.signInSystem !== null && this.signInSystem !== undefined) {
      output.writeFieldBegin('signInSystem', Thrift.Type.I32, 16);
      output.writeI32(this.signInSystem);
      output.writeFieldEnd();
    }
    if (this.extCameFrom !== null && this.extCameFrom !== undefined) {
      output.writeFieldBegin('extCameFrom', Thrift.Type.STRING, 17);
      output.writeString(this.extCameFrom);
      output.writeFieldEnd();
    }
    if (this.extAuthorName !== null && this.extAuthorName !== undefined) {
      output.writeFieldBegin('extAuthorName', Thrift.Type.STRING, 18);
      output.writeString(this.extAuthorName);
      output.writeFieldEnd();
    }
    if (this.extAuthorEmail !== null && this.extAuthorEmail !== undefined) {
      output.writeFieldBegin('extAuthorEmail', Thrift.Type.STRING, 19);
      output.writeString(this.extAuthorEmail);
      output.writeFieldEnd();
    }
    if (this.extRespExecId !== null && this.extRespExecId !== undefined) {
      output.writeFieldBegin('extRespExecId', Thrift.Type.STRING, 20);
      output.writeString(this.extRespExecId);
      output.writeFieldEnd();
    }
    if (this.extRespPatternId !== null && this.extRespPatternId !== undefined) {
      output.writeFieldBegin('extRespPatternId', Thrift.Type.STRING, 21);
      output.writeString(this.extRespPatternId);
      output.writeFieldEnd();
    }
    if (this.extRespReq !== null && this.extRespReq !== undefined) {
      output.writeFieldBegin('extRespReq', Thrift.Type.I32, 22);
      output.writeI32(this.extRespReq);
      output.writeFieldEnd();
    }
    if (this.hasAttachments !== null && this.hasAttachments !== undefined) {
      output.writeFieldBegin('hasAttachments', Thrift.Type.BOOL, 23);
      output.writeBool(this.hasAttachments);
      output.writeFieldEnd();
    }
    if (this.hasDigitalSign !== null && this.hasDigitalSign !== undefined) {
      output.writeFieldBegin('hasDigitalSign', Thrift.Type.BOOL, 24);
      output.writeBool(this.hasDigitalSign);
      output.writeFieldEnd();
    }
    if (this.documentNumber !== null && this.documentNumber !== undefined) {
      output.writeFieldBegin('documentNumber', Thrift.Type.STRING, 25);
      output.writeString(this.documentNumber);
      output.writeFieldEnd();
    }
    if (this.documentRegDate !== null && this.documentRegDate !== undefined) {
      output.writeFieldBegin('documentRegDate', Thrift.Type.I64, 26);
      output.writeI64(this.documentRegDate);
      output.writeFieldEnd();
    }
    if (this.externalNumber !== null && this.externalNumber !== undefined) {
      output.writeFieldBegin('externalNumber', Thrift.Type.STRING, 27);
      output.writeString(this.externalNumber);
      output.writeFieldEnd();
    }
    if (this.externalRegDate !== null && this.externalRegDate !== undefined) {
      output.writeFieldBegin('externalRegDate', Thrift.Type.I64, 28);
      output.writeI64(this.externalRegDate);
      output.writeFieldEnd();
    }
    if (this.cancelDate !== null && this.cancelDate !== undefined) {
      output.writeFieldBegin('cancelDate', Thrift.Type.I64, 29);
      output.writeI64(this.cancelDate);
      output.writeFieldEnd();
    }
    if (this.respStatus !== null && this.respStatus !== undefined) {
      output.writeFieldBegin('respStatus', Thrift.Type.I32, 30);
      output.writeI32(this.respStatus);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkDocumentPage = class {
  constructor(args) {
    this.documentData = null;
    this.count = null;
    if (args) {
      if (args.documentData !== undefined && args.documentData !== null) {
        this.documentData = Thrift.copyList(args.documentData, [MrkDocument]);
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.documentData = [];
          const _rtmp316 = input.readListBegin();
          const _size15 = _rtmp316.size || 0;
          for (let _i17 = 0; _i17 < _size15; ++_i17) {
            let elem18 = null;
            elem18 = new MrkDocument();
            elem18.read(input);
            this.documentData.push(elem18);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkDocumentPage');
    if (this.documentData !== null && this.documentData !== undefined) {
      output.writeFieldBegin('documentData', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.documentData.length);
      for (let iter19 in this.documentData) {
        if (this.documentData.hasOwnProperty(iter19)) {
          iter19 = this.documentData[iter19];
          iter19.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 2);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkAttachment = class {
  constructor(args) {
    this.id = null;
    this.fileVersion = null;
    this.fileName = null;
    this.account = null;
    this.creator = null;
    this.createDate = null;
    this.fSize = null;
    this.attHash = null;
    this.status = null;
    this.fType = null;
    this.hasDigitalSign = null;
    this.digitalSigns = null;
    this.isEditing = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.fileVersion !== undefined && args.fileVersion !== null) {
        this.fileVersion = args.fileVersion;
      }
      if (args.fileName !== undefined && args.fileName !== null) {
        this.fileName = args.fileName;
      }
      if (args.account !== undefined && args.account !== null) {
        this.account = new MrkAccount(args.account);
      }
      if (args.creator !== undefined && args.creator !== null) {
        this.creator = new MrkClient(args.creator);
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.fSize !== undefined && args.fSize !== null) {
        this.fSize = args.fSize;
      }
      if (args.attHash !== undefined && args.attHash !== null) {
        this.attHash = args.attHash;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.fType !== undefined && args.fType !== null) {
        this.fType = args.fType;
      }
      if (args.hasDigitalSign !== undefined && args.hasDigitalSign !== null) {
        this.hasDigitalSign = args.hasDigitalSign;
      }
      if (args.digitalSigns !== undefined && args.digitalSigns !== null) {
        this.digitalSigns = Thrift.copyList(args.digitalSigns, [null]);
      }
      if (args.isEditing !== undefined && args.isEditing !== null) {
        this.isEditing = args.isEditing;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.fileVersion = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.fileName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.account = new MrkAccount();
          this.account.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creator = new MrkClient();
          this.creator.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.fSize = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.attHash = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.status = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I32) {
          this.fType = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.BOOL) {
          this.hasDigitalSign = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.LIST) {
          this.digitalSigns = [];
          const _rtmp321 = input.readListBegin();
          const _size20 = _rtmp321.size || 0;
          for (let _i22 = 0; _i22 < _size20; ++_i22) {
            let elem23 = null;
            elem23 = new MrkDigitalSign();
            elem23.read(input);
            this.digitalSigns.push(elem23);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.BOOL) {
          this.isEditing = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkAttachment');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.fileVersion !== null && this.fileVersion !== undefined) {
      output.writeFieldBegin('fileVersion', Thrift.Type.I32, 2);
      output.writeI32(this.fileVersion);
      output.writeFieldEnd();
    }
    if (this.fileName !== null && this.fileName !== undefined) {
      output.writeFieldBegin('fileName', Thrift.Type.STRING, 3);
      output.writeString(this.fileName);
      output.writeFieldEnd();
    }
    if (this.account !== null && this.account !== undefined) {
      output.writeFieldBegin('account', Thrift.Type.STRUCT, 4);
      this.account.write(output);
      output.writeFieldEnd();
    }
    if (this.creator !== null && this.creator !== undefined) {
      output.writeFieldBegin('creator', Thrift.Type.STRUCT, 5);
      this.creator.write(output);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 6);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.fSize !== null && this.fSize !== undefined) {
      output.writeFieldBegin('fSize', Thrift.Type.I64, 7);
      output.writeI64(this.fSize);
      output.writeFieldEnd();
    }
    if (this.attHash !== null && this.attHash !== undefined) {
      output.writeFieldBegin('attHash', Thrift.Type.STRING, 8);
      output.writeString(this.attHash);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I32, 9);
      output.writeI32(this.status);
      output.writeFieldEnd();
    }
    if (this.fType !== null && this.fType !== undefined) {
      output.writeFieldBegin('fType', Thrift.Type.I32, 10);
      output.writeI32(this.fType);
      output.writeFieldEnd();
    }
    if (this.hasDigitalSign !== null && this.hasDigitalSign !== undefined) {
      output.writeFieldBegin('hasDigitalSign', Thrift.Type.BOOL, 11);
      output.writeBool(this.hasDigitalSign);
      output.writeFieldEnd();
    }
    if (this.digitalSigns !== null && this.digitalSigns !== undefined) {
      output.writeFieldBegin('digitalSigns', Thrift.Type.LIST, 12);
      output.writeListBegin(Thrift.Type.STRUCT, this.digitalSigns.length);
      for (let iter24 in this.digitalSigns) {
        if (this.digitalSigns.hasOwnProperty(iter24)) {
          iter24 = this.digitalSigns[iter24];
          iter24.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.isEditing !== null && this.isEditing !== undefined) {
      output.writeFieldBegin('isEditing', Thrift.Type.BOOL, 13);
      output.writeBool(this.isEditing);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkDigitalSign = class {
  constructor(args) {
    this.id = null;
    this.documentId = null;
    this.attachmentId = null;
    this.clientId = null;
    this.signDetails = null;
    this.signature = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.documentId !== undefined && args.documentId !== null) {
        this.documentId = args.documentId;
      }
      if (args.attachmentId !== undefined && args.attachmentId !== null) {
        this.attachmentId = args.attachmentId;
      }
      if (args.clientId !== undefined && args.clientId !== null) {
        this.clientId = args.clientId;
      }
      if (args.signDetails !== undefined && args.signDetails !== null) {
        this.signDetails = Thrift.copyList(args.signDetails, [null]);
      }
      if (args.signature !== undefined && args.signature !== null) {
        this.signature = args.signature;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.documentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.attachmentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.clientId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.LIST) {
          this.signDetails = [];
          const _rtmp326 = input.readListBegin();
          const _size25 = _rtmp326.size || 0;
          for (let _i27 = 0; _i27 < _size25; ++_i27) {
            let elem28 = null;
            elem28 = new MrkDigitalSignDetails();
            elem28.read(input);
            this.signDetails.push(elem28);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.signature = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkDigitalSign');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.documentId !== null && this.documentId !== undefined) {
      output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
      output.writeString(this.documentId);
      output.writeFieldEnd();
    }
    if (this.attachmentId !== null && this.attachmentId !== undefined) {
      output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 3);
      output.writeString(this.attachmentId);
      output.writeFieldEnd();
    }
    if (this.clientId !== null && this.clientId !== undefined) {
      output.writeFieldBegin('clientId', Thrift.Type.STRING, 4);
      output.writeString(this.clientId);
      output.writeFieldEnd();
    }
    if (this.signDetails !== null && this.signDetails !== undefined) {
      output.writeFieldBegin('signDetails', Thrift.Type.LIST, 5);
      output.writeListBegin(Thrift.Type.STRUCT, this.signDetails.length);
      for (let iter29 in this.signDetails) {
        if (this.signDetails.hasOwnProperty(iter29)) {
          iter29 = this.signDetails[iter29];
          iter29.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.signature !== null && this.signature !== undefined) {
      output.writeFieldBegin('signature', Thrift.Type.STRING, 6);
      output.writeString(this.signature);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkDigitalSignDetails = class {
  constructor(args) {
    this.id = null;
    this.userName = null;
    this.serialNumber = null;
    this.issuerDN = null;
    this.subjectDN = null;
    this.signDate = null;
    this.signInSystem = null;
    this.subjectSerialNumber = null;
    this.subjectSerialNumberIndividual = null;
    this.email = null;
    this.organization = null;
    this.fullName = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.userName !== undefined && args.userName !== null) {
        this.userName = args.userName;
      }
      if (args.serialNumber !== undefined && args.serialNumber !== null) {
        this.serialNumber = args.serialNumber;
      }
      if (args.issuerDN !== undefined && args.issuerDN !== null) {
        this.issuerDN = args.issuerDN;
      }
      if (args.subjectDN !== undefined && args.subjectDN !== null) {
        this.subjectDN = args.subjectDN;
      }
      if (args.signDate !== undefined && args.signDate !== null) {
        this.signDate = args.signDate;
      }
      if (args.signInSystem !== undefined && args.signInSystem !== null) {
        this.signInSystem = args.signInSystem;
      }
      if (args.subjectSerialNumber !== undefined && args.subjectSerialNumber !== null) {
        this.subjectSerialNumber = args.subjectSerialNumber;
      }
      if (args.subjectSerialNumberIndividual !== undefined && args.subjectSerialNumberIndividual !== null) {
        this.subjectSerialNumberIndividual = args.subjectSerialNumberIndividual;
      }
      if (args.email !== undefined && args.email !== null) {
        this.email = args.email;
      }
      if (args.organization !== undefined && args.organization !== null) {
        this.organization = args.organization;
      }
      if (args.fullName !== undefined && args.fullName !== null) {
        this.fullName = args.fullName;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.userName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.serialNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.issuerDN = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.subjectDN = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.signDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.signInSystem = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.subjectSerialNumber = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.subjectSerialNumberIndividual = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.email = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.organization = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.fullName = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkDigitalSignDetails');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.userName !== null && this.userName !== undefined) {
      output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
      output.writeString(this.userName);
      output.writeFieldEnd();
    }
    if (this.serialNumber !== null && this.serialNumber !== undefined) {
      output.writeFieldBegin('serialNumber', Thrift.Type.STRING, 3);
      output.writeString(this.serialNumber);
      output.writeFieldEnd();
    }
    if (this.issuerDN !== null && this.issuerDN !== undefined) {
      output.writeFieldBegin('issuerDN', Thrift.Type.STRING, 4);
      output.writeString(this.issuerDN);
      output.writeFieldEnd();
    }
    if (this.subjectDN !== null && this.subjectDN !== undefined) {
      output.writeFieldBegin('subjectDN', Thrift.Type.STRING, 5);
      output.writeString(this.subjectDN);
      output.writeFieldEnd();
    }
    if (this.signDate !== null && this.signDate !== undefined) {
      output.writeFieldBegin('signDate', Thrift.Type.I64, 6);
      output.writeI64(this.signDate);
      output.writeFieldEnd();
    }
    if (this.signInSystem !== null && this.signInSystem !== undefined) {
      output.writeFieldBegin('signInSystem', Thrift.Type.STRING, 7);
      output.writeString(this.signInSystem);
      output.writeFieldEnd();
    }
    if (this.subjectSerialNumber !== null && this.subjectSerialNumber !== undefined) {
      output.writeFieldBegin('subjectSerialNumber', Thrift.Type.STRING, 8);
      output.writeString(this.subjectSerialNumber);
      output.writeFieldEnd();
    }
    if (this.subjectSerialNumberIndividual !== null && this.subjectSerialNumberIndividual !== undefined) {
      output.writeFieldBegin('subjectSerialNumberIndividual', Thrift.Type.STRING, 9);
      output.writeString(this.subjectSerialNumberIndividual);
      output.writeFieldEnd();
    }
    if (this.email !== null && this.email !== undefined) {
      output.writeFieldBegin('email', Thrift.Type.STRING, 10);
      output.writeString(this.email);
      output.writeFieldEnd();
    }
    if (this.organization !== null && this.organization !== undefined) {
      output.writeFieldBegin('organization', Thrift.Type.STRING, 11);
      output.writeString(this.organization);
      output.writeFieldEnd();
    }
    if (this.fullName !== null && this.fullName !== undefined) {
      output.writeFieldBegin('fullName', Thrift.Type.STRING, 12);
      output.writeString(this.fullName);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkDocumentData = class {
  constructor(args) {
    this.document = null;
    this.items = null;
    this.atts = null;
    this.documentDigitalSign = null;
    if (args) {
      if (args.document !== undefined && args.document !== null) {
        this.document = new MrkDocument(args.document);
      }
      if (args.items !== undefined && args.items !== null) {
        this.items = Thrift.copyList(args.items, [ContentItem]);
      }
      if (args.atts !== undefined && args.atts !== null) {
        this.atts = Thrift.copyList(args.atts, [MrkAttachment]);
      }
      if (args.documentDigitalSign !== undefined && args.documentDigitalSign !== null) {
        this.documentDigitalSign = new MrkDigitalSign(args.documentDigitalSign);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.document = new MrkDocument();
          this.document.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.items = [];
          const _rtmp331 = input.readListBegin();
          const _size30 = _rtmp331.size || 0;
          for (let _i32 = 0; _i32 < _size30; ++_i32) {
            let elem33 = null;
            elem33 = new ContentItem();
            elem33.read(input);
            this.items.push(elem33);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.atts = [];
          const _rtmp335 = input.readListBegin();
          const _size34 = _rtmp335.size || 0;
          for (let _i36 = 0; _i36 < _size34; ++_i36) {
            let elem37 = null;
            elem37 = new MrkAttachment();
            elem37.read(input);
            this.atts.push(elem37);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.documentDigitalSign = new MrkDigitalSign();
          this.documentDigitalSign.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkDocumentData');
    if (this.document !== null && this.document !== undefined) {
      output.writeFieldBegin('document', Thrift.Type.STRUCT, 1);
      this.document.write(output);
      output.writeFieldEnd();
    }
    if (this.items !== null && this.items !== undefined) {
      output.writeFieldBegin('items', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
      for (let iter38 in this.items) {
        if (this.items.hasOwnProperty(iter38)) {
          iter38 = this.items[iter38];
          iter38.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.atts !== null && this.atts !== undefined) {
      output.writeFieldBegin('atts', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.atts.length);
      for (let iter39 in this.atts) {
        if (this.atts.hasOwnProperty(iter39)) {
          iter39 = this.atts[iter39];
          iter39.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.documentDigitalSign !== null && this.documentDigitalSign !== undefined) {
      output.writeFieldBegin('documentDigitalSign', Thrift.Type.STRUCT, 4);
      this.documentDigitalSign.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkHistory = class {
  constructor(args) {
    this.id = null;
    this.createDate = null;
    this.accountId = null;
    this.key = null;
    this.clientId = null;
    this.userId = null;
    this.documentId = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.createDate !== undefined && args.createDate !== null) {
        this.createDate = args.createDate;
      }
      if (args.accountId !== undefined && args.accountId !== null) {
        this.accountId = args.accountId;
      }
      if (args.key !== undefined && args.key !== null) {
        this.key = args.key;
      }
      if (args.clientId !== undefined && args.clientId !== null) {
        this.clientId = args.clientId;
      }
      if (args.userId !== undefined && args.userId !== null) {
        this.userId = args.userId;
      }
      if (args.documentId !== undefined && args.documentId !== null) {
        this.documentId = args.documentId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.createDate = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.accountId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.key = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.clientId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.documentId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkHistory');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.createDate !== null && this.createDate !== undefined) {
      output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
      output.writeI64(this.createDate);
      output.writeFieldEnd();
    }
    if (this.accountId !== null && this.accountId !== undefined) {
      output.writeFieldBegin('accountId', Thrift.Type.STRING, 3);
      output.writeString(this.accountId);
      output.writeFieldEnd();
    }
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.I32, 4);
      output.writeI32(this.key);
      output.writeFieldEnd();
    }
    if (this.clientId !== null && this.clientId !== undefined) {
      output.writeFieldBegin('clientId', Thrift.Type.STRING, 5);
      output.writeString(this.clientId);
      output.writeFieldEnd();
    }
    if (this.userId !== null && this.userId !== undefined) {
      output.writeFieldBegin('userId', Thrift.Type.STRING, 6);
      output.writeString(this.userId);
      output.writeFieldEnd();
    }
    if (this.documentId !== null && this.documentId !== undefined) {
      output.writeFieldBegin('documentId', Thrift.Type.STRING, 7);
      output.writeString(this.documentId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkAlmexSysUser = class {
  constructor(args) {
    this.login = null;
    this.confirmed = null;
    this.contragent = null;
    if (args) {
      if (args.login !== undefined && args.login !== null) {
        this.login = args.login;
      }
      if (args.confirmed !== undefined && args.confirmed !== null) {
        this.confirmed = args.confirmed;
      }
      if (args.contragent !== undefined && args.contragent !== null) {
        this.contragent = args.contragent;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.login = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.confirmed = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.contragent = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkAlmexSysUser');
    if (this.login !== null && this.login !== undefined) {
      output.writeFieldBegin('login', Thrift.Type.STRING, 1);
      output.writeString(this.login);
      output.writeFieldEnd();
    }
    if (this.confirmed !== null && this.confirmed !== undefined) {
      output.writeFieldBegin('confirmed', Thrift.Type.BOOL, 2);
      output.writeBool(this.confirmed);
      output.writeFieldEnd();
    }
    if (this.contragent !== null && this.contragent !== undefined) {
      output.writeFieldBegin('contragent', Thrift.Type.BOOL, 3);
      output.writeBool(this.contragent);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkHistoryPage = class {
  constructor(args) {
    this.historyData = null;
    this.count = null;
    if (args) {
      if (args.historyData !== undefined && args.historyData !== null) {
        this.historyData = Thrift.copyList(args.historyData, [MrkHistory]);
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.historyData = [];
          const _rtmp341 = input.readListBegin();
          const _size40 = _rtmp341.size || 0;
          for (let _i42 = 0; _i42 < _size40; ++_i42) {
            let elem43 = null;
            elem43 = new MrkHistory();
            elem43.read(input);
            this.historyData.push(elem43);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkHistoryPage');
    if (this.historyData !== null && this.historyData !== undefined) {
      output.writeFieldBegin('historyData', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.historyData.length);
      for (let iter44 in this.historyData) {
        if (this.historyData.hasOwnProperty(iter44)) {
          iter44 = this.historyData[iter44];
          iter44.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 2);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkAlmexSysUserPage = class {
  constructor(args) {
    this.almexUsersData = null;
    this.count = null;
    if (args) {
      if (args.almexUsersData !== undefined && args.almexUsersData !== null) {
        this.almexUsersData = Thrift.copyList(args.almexUsersData, [MrkAlmexSysUser]);
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          this.almexUsersData = [];
          const _rtmp346 = input.readListBegin();
          const _size45 = _rtmp346.size || 0;
          for (let _i47 = 0; _i47 < _size45; ++_i47) {
            let elem48 = null;
            elem48 = new MrkAlmexSysUser();
            elem48.read(input);
            this.almexUsersData.push(elem48);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkAlmexSysUserPage');
    if (this.almexUsersData !== null && this.almexUsersData !== undefined) {
      output.writeFieldBegin('almexUsersData', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRUCT, this.almexUsersData.length);
      for (let iter49 in this.almexUsersData) {
        if (this.almexUsersData.hasOwnProperty(iter49)) {
          iter49 = this.almexUsersData[iter49];
          iter49.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 2);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MRK_CURRENT_VERSION = 'mrk-1.0.1';
