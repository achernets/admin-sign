//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

MrkAdminService_getMrkAlmexSysUserPage_args = class {
  constructor(args) {
    this.token = null;
    this.filter = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.filter !== undefined && args.filter !== null) {
        this.filter = new KazFilter(args.filter);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.filter = new KazFilter();
          this.filter.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkAdminService_getMrkAlmexSysUserPage_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.filter !== null && this.filter !== undefined) {
      output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
      this.filter.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkAdminService_getMrkAlmexSysUserPage_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new MrkAlmexSysUserPage(args.success);
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new MrkAlmexSysUserPage();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkAdminService_getMrkAlmexSysUserPage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkAdminService_changeMrkSysUser_args = class {
  constructor(args) {
    this.token = null;
    this.toUpdate = null;
    this.password = null;
    this.idToRemove = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.toUpdate !== undefined && args.toUpdate !== null) {
        this.toUpdate = new MrkAlmexSysUser(args.toUpdate);
      }
      if (args.password !== undefined && args.password !== null) {
        this.password = args.password;
      }
      if (args.idToRemove !== undefined && args.idToRemove !== null) {
        this.idToRemove = args.idToRemove;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.toUpdate = new MrkAlmexSysUser();
          this.toUpdate.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.idToRemove = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkAdminService_changeMrkSysUser_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeString(this.token);
      output.writeFieldEnd();
    }
    if (this.toUpdate !== null && this.toUpdate !== undefined) {
      output.writeFieldBegin('toUpdate', Thrift.Type.STRUCT, 2);
      this.toUpdate.write(output);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 3);
      output.writeString(this.password);
      output.writeFieldEnd();
    }
    if (this.idToRemove !== null && this.idToRemove !== undefined) {
      output.writeFieldBegin('idToRemove', Thrift.Type.STRING, 4);
      output.writeString(this.idToRemove);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkAdminService_changeMrkSysUser_result = class {
  constructor(args) {
    this.success = null;
    this.validError = null;
    this.error = null;
    if (args instanceof PreconditionException) {
        this.validError = args;
        return;
    }
    if (args instanceof ServerException) {
        this.error = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new MrkAlmexSysUser(args.success);
      }
      if (args.validError !== undefined && args.validError !== null) {
        this.validError = args.validError;
      }
      if (args.error !== undefined && args.error !== null) {
        this.error = args.error;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new MrkAlmexSysUser();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.validError = new PreconditionException();
          this.validError.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.error = new ServerException();
          this.error.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('MrkAdminService_changeMrkSysUser_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.validError !== null && this.validError !== undefined) {
      output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
      this.validError.write(output);
      output.writeFieldEnd();
    }
    if (this.error !== null && this.error !== undefined) {
      output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
      this.error.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
MrkAdminServiceClient = class {
  constructor(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
  }

  getMrkAlmexSysUserPage (token, filter) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getMrkAlmexSysUserPage(token, filter, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getMrkAlmexSysUserPage (token, filter, callback) {
    const params = {
      token: token,
      filter: filter
    };
    const args = new MrkAdminService_getMrkAlmexSysUserPage_args(params);
    try {
      this.output.writeMessageBegin('getMrkAlmexSysUserPage', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_getMrkAlmexSysUserPage();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getMrkAlmexSysUserPage () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MrkAdminService_getMrkAlmexSysUserPage_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'getMrkAlmexSysUserPage failed: unknown result';
  }

  changeMrkSysUser (token, toUpdate, password, idToRemove) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_changeMrkSysUser(token, toUpdate, password, idToRemove, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_changeMrkSysUser (token, toUpdate, password, idToRemove, callback) {
    const params = {
      token: token,
      toUpdate: toUpdate,
      password: password,
      idToRemove: idToRemove
    };
    const args = new MrkAdminService_changeMrkSysUser_args(params);
    try {
      this.output.writeMessageBegin('changeMrkSysUser', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_changeMrkSysUser();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_changeMrkSysUser () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new MrkAdminService_changeMrkSysUser_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.validError) {
      throw result.validError;
    }
    if (null !== result.error) {
      throw result.error;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'changeMrkSysUser failed: unknown result';
  }
};
